import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Box, Card, Grid, Typography, Avatar, Paper, Button, Dialog, DialogContent, DialogActions, Link } from '@mui/material';
import { styled } from '@mui/material/styles';
import axios from 'axios';
import Cookies from 'js-cookie';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import WalletIcon from '@mui/icons-material/Wallet';
import GpsFixedIcon from '@mui/icons-material/GpsFixed';
import SummarizeIcon from '@mui/icons-material/Summarize';
import Loader from '../../../components/Loader';
import SearchTable from '../../../components/SearchTableAlt';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';
import useTitle from '../../../hooks/useTitle';
import { H3 } from '../../../components/Typography';
import LeadgerCard from './LedgerCard';
import { useSnackbar } from '../../../components/Snackbar';
import swal from 'sweetalert';
import { useFormik } from 'formik';
import * as Yup from 'yup';

const FileLeave = () => {
  const [hover, setHover] = useState(false);
  const hoverTimeoutRef = useRef(null);
  const hoverCardRef = useRef(null);
  const navigate = useNavigate();
  const { showSnackbar } = useSnackbar();
  const user = useSelector((state) => state.loginReducer);
  const userId = user.data.userdetails.user.userId;
  const [tableData, setTableData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [leaveBalance, setLeaveBalance] = useState([]);
  const [availableLeaves, setAvailableLeaves] = useState();
  const [availedLeaves, setAvailedLeaves] = useState();
  const [balanceLeaves, setBalanceLeaves] = useState();
  const [open, setOpen] = useState(false);
  const [requestStatus, setRequestStatus] = useState(null);
  const [reqRemarks, setReqRemarks] = useState(null);
  const [dubby, setDubby] = useState();
  const resetCheck = useRef();

  useTitle('Leave Applications');

  const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
    ...theme.typography.body2,
    padding: theme.spacing(1),
    margin: 3,
    borderRadius: '10px',
    textAlign: 'center',
    color: theme.palette.text.secondary,
  }));

  const style = {
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 700,
    bgcolor: 'background.paper',
    border: '05 px solid #000',
    boxShadow: 24,
    p: 2,
  };

  const handleMouseMove = useCallback((event) => {
    if (hoverCardRef.current && !hoverCardRef.current.contains(event.target)) {
      setHover(false);
    }
  }, []);

  useEffect(() => {
    if (hover) {
      window.addEventListener('mousemove', handleMouseMove);
    } else {
      window.removeEventListener('mousemove', handleMouseMove);
    }
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [hover, handleMouseMove]);

  const handleMouseEnter = () => {
    clearTimeout(hoverTimeoutRef.current);
    setHover(true);
  };

  const handleMouseLeave = () => {
    hoverTimeoutRef.current = setTimeout(() => {
      setHover(false);
    }, 200);
  };

  const fetchDataOnLeaveBalance = async () => {
    try {
      const payload = {
        userId: userId,
      };

      const response = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/leave-balance-dropdown`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get('token')}`,
          },
        }
      );
      let sortedLeaveBalanceData = response.data.result.map((value) => value);
      setLeaveBalance(sortedLeaveBalanceData);
    } catch (error) {
      console.error(error);
    }
  };

  const LeaveBalance = async () => {
    try {
      const payload = {
        userId: userId,
      };

      const response = await axios.post(
        `http://141.148.194.18:8095/leavemanagement/leave-balances`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get('token')}`,
          },
        }
      );
      if (response.data.statusCode === 200) {
        setAvailableLeaves(response.data?.result.availableLeaves);
        setAvailedLeaves(response.data?.result.availedLeaves);
        setBalanceLeaves(response.data?.result.balanceLeaves);
      }
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    setIsLoading(true);
    fetchDataOnLeaveBalance();
    LeaveBalance();
  }, []);

  const validationSchema = Yup.object().shape({
    LeaveStartDate: Yup.string().required('Leave Start Date is required').nullable(),
    LeaveEndDate: Yup.string().required('Leave End Date is required').nullable(),
  });

  const formik = useFormik({
    initialValues: {
      LeaveStartDate: null,
      LeaveEndDate: null,
    },
    validationSchema: validationSchema,
    enableReinitialize: true,
    onSubmit: (values) => {
      console.log(values);
    },
  });

  const handleResetForm = () => {
    swal({
      title: 'Do you want to reset the search?',
      buttons: { cancel: 'Cancel', confirm: 'Confirm' },
    }).then((userClickedConfirm) => {
      if (userClickedConfirm) {
        formik.setFieldValue('LeaveStartDate', null);
        formik.setFieldValue('LeaveEndDate', null);
        resetCheck.current = true;
        handleFetchData();
      }
    });
  };

  const handleFetchData = async () => {
    try {
      const payload = {
        userId: userId,
        rqstFrom: resetCheck.current ? null : formik.values.LeaveStartDate,
        rqstTo: resetCheck.current ? null : formik.values.LeaveEndDate,
      };

      const response = await axios.post(
        'http://141.148.194.18:8052/leavemanagement/leave-applied-leaves',
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get('token')}`,
          },
        }
      );
      const formattedData = response.data.result.map((item, index) => {
        const fromDate = item.rqstFromDate + ':' + item.rqstFromTime;
        const toDate = item.rqstToDate + ':' + item.rqstToTime;
        return {
          ...item,
          index: index + 1,
          fromDate: fromDate,
          toDate: toDate,
        };
      });

      setTableData(formattedData);
      showSnackbar('Data fetched successfully', 'success');
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
      resetCheck.current = false;
    }
  };

  useEffect(() => {
    handleFetchData();
    setIsLoading(true);
  }, []);

  const columns = [
    {
      field: 'index',
      headerName: 'S.No',
      flex: 0.1,
      minWidth: 80,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'rqstId',
      headerName: 'Leave ID',
      flex: 0.3,
      minWidth: 100,
      headerClassName: 'super-app-theme--header',
      renderCell: (params) => (
        <Link
          sx={{ cursor: 'pointer' }}
          onClick={() => {
            const requestId = params.row.rqstId;
            navigate('/leaveapplicationview', { state: { requestId } });
          }}
        >
          {params.value}
        </Link>
      ),
    },
    {
      field: 'leaveTypeDesc',
      headerName: 'Leave Type',
      flex: 0.3,
      minWidth: 160,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'fromDate',
      headerName: 'Leave Start',
      flex: 0.3,
      minWidth: 180,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'toDate',
      headerName: 'Leave End',
      flex: 0.3,
      minWidth: 180,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'daysOfLeave',
      headerName: 'Leave Duration',
      flex: 0.3,
      minWidth: 80,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'leaveStatus',
      headerName: 'Leave Status',
      flex: 0.3,
      minWidth: 150,
      headerClassName: 'super-app-theme--header',
    },
    {
      field: 'action',
      headerName: 'Action',
      flex: 0.2,
      minWidth: 120,
      headerClassName: 'super-app-theme--header',
      renderCell: (params) => (
        <Button
          variant="contained"
          size="small"
          onClick={() => {
            setRequestStatus(params.row.leaveStatus);
            setReqRemarks(params.row.remark);
            setDubby(params.row.updatedDate);
            setOpen(true);
          }}
        >
          Track
        </Button>
      ),
    },
  ];

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <Box
      sx={{
        '& .super-app-theme--header': {
          backgroundColor: '#198754',
          color: 'white',
        },
      }}
    >
      <Card sx={{ height: 150, marginBottom: 2 }}>
        <Box p={2}>
          <H3 textAlign="center" mb={2}>
            File Leave Application
          </H3>
          <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={2}>
              <Grid item xs={12} md={4}>
                <Item>
                  <Typography variant="h6">Available Leaves</Typography>
                  <Typography variant="h4">{availableLeaves}</Typography>
                </Item>
              </Grid>
              <Grid item xs={12} md={4}>
                <Item>
                  <Typography variant="h6">Availed Leaves</Typography>
                  <Typography variant="h4">{availedLeaves}</Typography>
                </Item>
              </Grid>
              <Grid item xs={12} md={4}>
                <Item>
                  <Typography variant="h6">Balance Leaves</Typography>
                  <Typography variant="h4">{balanceLeaves}</Typography>
                </Item>
              </Grid>
            </Grid>
            <Grid container spacing={2} mt={2}>
              <Grid item xs={12} md={4}>
                <Item>
                  <Typography variant="h6">Leave Start Date</Typography>
                  <input
                    type="date"
                    name="LeaveStartDate"
                    onChange={formik.handleChange}
                    value={formik.values.LeaveStartDate}
                    onBlur={formik.handleBlur}
                  />
                  {formik.touched.LeaveStartDate && formik.errors.LeaveStartDate ? (
                    <Typography color="error" variant="body2">
                      {formik.errors.LeaveStartDate}
                    </Typography>
                  ) : null}
                </Item>
              </Grid>
              <Grid item xs={12} md={4}>
                <Item>
                  <Typography variant="h6">Leave End Date</Typography>
                  <input
                    type="date"
                    name="LeaveEndDate"
                    onChange={formik.handleChange}
                    value={formik.values.LeaveEndDate}
                    onBlur={formik.handleBlur}
                  />
                  {formik.touched.LeaveEndDate && formik.errors.LeaveEndDate ? (
                    <Typography color="error" variant="body2">
                      {formik.errors.LeaveEndDate}
                    </Typography>
                  ) : null}
                </Item>
              </Grid>
            </Grid>
            <Grid container spacing={2} mt={2}>
              <Grid item xs={12} md={4}>
                <Item>
                  <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    fullWidth
                  >
                    Submit
                  </Button>
                </Item>
              </Grid>
              <Grid item xs={12} md={4}>
                <Item>
                  <Button
                    type="button"
                    variant="outlined"
                    color="secondary"
                    fullWidth
                    onClick={handleResetForm}
                  >
                    Reset
                  </Button>
                </Item>
              </Grid>
            </Grid>
          </form>
        </Box>
      </Card>
      <Card sx={{ marginBottom: 2 }}>
        <Grid container spacing={2} sx={{ padding: 2 }}>
          <Grid item xs={12} md={4} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
            <Item>
              <Avatar>
                <WalletIcon />
              </Avatar>
              <Typography variant="h6">Leave Ledger</Typography>
              {hover && (
                <Box ref={hoverCardRef} sx={{ position: 'absolute', width: 300, height: 200, zIndex: 1, background: 'white', boxShadow: 3, borderRadius: 1, p: 2 }}>
                  <LeadgerCard />
                </Box>
              )}
            </Item>
          </Grid>
          <Grid item xs={12} md={4} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
            <Item>
              <Avatar>
                <GpsFixedIcon />
              </Avatar>
              <Typography variant="h6">Track Request</Typography>
              {hover && (
                <Box ref={hoverCardRef} sx={{ position: 'absolute', width: 300, height: 200, zIndex: 1, background: 'white', boxShadow: 3, borderRadius: 1, p: 2 }}>
                  <TrackLeaveRequestStatus />
                </Box>
              )}
            </Item>
          </Grid>
          <Grid item xs={12} md={4} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>
            <Item>
              <Avatar>
                <SummarizeIcon />
              </Avatar>
              <Typography variant="h6">Leave Summary</Typography>
              {hover && (
                <Box ref={hoverCardRef} sx={{ position: 'absolute', width: 300, height: 200, zIndex: 1, background: 'white', boxShadow: 3, borderRadius: 1, p: 2 }}>
                  <Typography>Summary details...</Typography>
                </Box>
              )}
            </Item>
          </Grid>
        </Grid>
      </Card>
      {isLoading ? (
        <Loader />
      ) : (
        <SearchTable columns={columns} rows={tableData} />
      )}
      <Dialog open={open} onClose={handleClose}>
        <DialogContent>
          <TrackLeaveRequestStatus status={requestStatus} remarks={reqRemarks} date={dubby} />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose} color="primary">
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default FileLeave;
























const [hover, setHover] = useState(false);
 {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


<Card >
                        <Box sx={{ flexGrow: 1, mt: 1, elevation: "0" }}>
                            <Grid container spacing={2} columns={16}>
                                <Grid item xs={5}>
                                    <Item  
                                    onMouseEnter={() => setHover(true)}
                                    onMouseLeave={() => setHover(false)}>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Available Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availableLeaves}DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Availed Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availedLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Balance Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {balanceLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                            </Grid>


                            {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


                        </Box>

                    </Card>






import React, { useState, useEffect, useRef } from 'react'
import SearchTable from '../../../components/SearchTableAlt';
import { Box, Card, CardContent, IconButton, Stack, Button, Link, Dialog, DialogContent, TextField, DialogActions } from '@mui/material';
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import WalletIcon from '@mui/icons-material/Wallet';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns'
import Loader from '../../../components/Loader';
import GpsFixedIcon from '@mui/icons-material/GpsFixed';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import dayjs from 'dayjs';
import Cookies from "js-cookie";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import CachedIcon from "@mui/icons-material/Cached";
import SearchIcon from "@mui/icons-material/Search";
import SummarizeIcon from '@mui/icons-material/Summarize';
import swal from "sweetalert";
import { useLocation } from "react-router";
import { useSnackbar } from "../../../components/Snackbar";
import LeadgerCard from './LedgerCard';
import { Grid, Typography, Avatar, Paper } from '@mui/material';
import { styled } from "@mui/material/styles";
const FileLeave = () => {


    const title = 'Leave Applications';
    const title2 = 'Search Parameters';

    useTitle(title);


    const navigate = useNavigate();
    const { showSnackbar } = useSnackbar();
    const user = useSelector((state) => state.loginReducer);
    console.log(user.data.userdetails.user.userId);
    const userId = user.data.userdetails.user.userId;
    const [tableData, setTableData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [leaveBalance, setLeaveBalalnce] = useState([]);
    const [availableLeaves, setAvailableLeaves] = useState();
    const [availedLeaves, setAvailedLeaves] = useState();
    const [balanceLeaves, setBalanceLeaves] = useState();
    const [open, setOpen] = React.useState(false);
    const [requestStatus, setRequestStatus] = useState(null);
    const [reqRemarks, setReqRemarks] = useState(null);
    const [dubby, setDubby] = useState();
    const [selectAllApplications, setSelectAllApplications] = useState(false);
    const resetCheck = useRef();
    const location = useLocation();
    const [hover, setHover] = useState(false);

    const Item = styled(Paper)(({ theme }) => ({
        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
        ...theme.typography.body2,
        padding: theme.spacing(1),
        margin: 3,
        borderRadius: "10px",
        textAlign: 'center',
        color: theme.palette.text.secondary,
    }));
    const style = {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 700,
        bgcolor: 'background.paper',
        border: '05 px solid #000',
        boxShadow: 24,
        p:2
       
      };


    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };



    const handleNavigation = () => {
        console.log('called');
        navigate('/leave')
    }




    const fetchDataOnLeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            }

            const response = await axios.post(`http://141.148.194.18:8052/leavemanagement/leave-balance-dropdown`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            let sortedLeaveBallenceData = response.data.result.map((value) => {
                return value;
            })

            setLeaveBalalnce(sortedLeaveBallenceData);
            console.log(sortedLeaveBallenceData);


            //   if (response.status === 200) {


            //   }
        } catch (error) {
            console.error(error)
        }

    }

    const LeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            }

            const response = await axios.post(`http://141.148.194.18:8095/leavemanagement/leave-balances`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            if (response.data.statusCode === 200) {
                setAvailableLeaves(response.data?.result.availableLeaves);
                setAvailedLeaves(response.data?.result.availedLeaves);
                setBalanceLeaves(response.data?.result.balanceLeaves);

            }

            console.log(response);


        } catch (error) {
            console.error(error)
        }

    }


    useEffect(() => {

        setIsLoading(true);
        fetchDataOnLeaveBalance();
        LeaveBalance();
    }, [])



    const validationSchema = Yup.object().shape({

        LeaveStartDate: Yup.string().required("Leave Start Date is required").nullable(),
        LeaveEndDate: Yup.string().required("Leave End Date is required").nullable(),
    });


    const formik = useFormik({
        initialValues: {

            LeaveStartDate: null,
            LeaveEndDate: null,

        },
        validationSchema: validationSchema,
        enableReinitialize: true,
        onSubmit: (values) => {
            console.log(values)

        },
    });
    console.log(formik.values.LeaveStartDate);
    console.log(formik.values.LeaveEndDate);



    const handleResetForm = () => {

        swal({
            title: "Do you want to reset the search?",
            buttons: { cancel: "Cancel", confirm: "Confirm" },
        }).then((userClickedConfirm) => {
            if (userClickedConfirm) {
                console.log(userClickedConfirm)
                formik.setFieldValue("LeaveStartDate", null);
                formik.setFieldValue("LeaveEndDate", null);
                resetCheck.current = true
                // setTableData([]);
                handleFetchData();

            }

        })

    };

    const handleFetchData = async () => {

        try {
            const payload = {
                userId: userId,
                rqstFrom: resetCheck.current ? null : formik.values.LeaveStartDate,
                rqstTo: resetCheck.current ? null : formik.values.LeaveEndDate
            }

            const response = await axios.post("http://141.148.194.18:8052/leavemanagement/leave-applied-leaves", payload,
                {
                    headers: {
                        Authorization: `Bearer ${Cookies.get("token")}`
                    }
                });
            const formattedData = response.data.result.map((item, index) => {
                const fromDate = item.rqstFromDate + ":" + item.rqstFromTime;
                const toDate = item.rqstToDate + ":" + item.rqstToTime;
                return {
                    ...item,
                    index: index + 1,
                    fromDate: fromDate,
                    toDate: toDate,
                };

            });

            setTableData(formattedData);
            console.log('kp-tableDataResponse', response.data);



            // setTableData(response.data.result);
            if (response.data.status === true) {

                console.log('kparyan', tableData);
                console.log('kp-tableData2', tableData);
                showSnackbar("Data fetched successfully", "success");

            }
        } catch (error) {

            console.error(error);
        }
        finally {
            setIsLoading(false);
            resetCheck.current = false
        }
    }

    useEffect(() => {
        handleFetchData();
        setIsLoading(true);
    }, [])

    console.log('kp-tableDataAfter', tableData)
    const columns = [
        {
            field: "index", //keep this fixed, index should be present for all tables
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "rqstId",
            headerName: "Leave ID",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link
                    sx={{ cursor: "pointer" }}
                    onClick={() => {
                        const requestId = params.row.rqstId;
                        navigate("/leaveapplicationview", { state: { requestId } });
                    }}
                >
                    {params.value}
                </Link>
            ),
        },
        {
            field: "leaveTypeDesc",
            headerName: "Leave Type",
            flex: 0.3,
            minWidth: 160,
            headerClassName: "super-app-theme--header",
        },



        {
            field: "fromDate",
            headerName: "Leave Start",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "toDate",
            headerName: "Leave End",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "daysOfLeave",
            headerName: "Leave Duration",
            flex: 0.3,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstStatusDesc",
            headerName: "Leave Current Status",
            flex: 0.3,
            minWidth: 240,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "requestStatus",
            headerName: "Track Status",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link onClick={() => {
                    setReqRemarks(params.row.remarks);
                    setRequestStatus(params.value);
                    handleClickOpen();
                    setDubby(params.row.rqstId);
                }}>
                    <GpsFixedIcon color='primary' />
                </Link>
            )
        },


    ];




    console.log('kp-tabledata3', tableData)
    return (
        <>
            {
                isLoading && <Loader />
            }
            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <WalletIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Leave Balance</H3>
                    </div>
                    <Card >
                        <Box sx={{ flexGrow: 1, mt: 1, elevation: "0" }}>
                            <Grid container spacing={2} columns={16}>
                                <Grid item xs={5}>
                                    <Item  
                                    onMouseEnter={() => setHover(true)}
                                    onMouseLeave={() => setHover(false)}>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Available Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availableLeaves}DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Availed Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availedLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Balance Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {balanceLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                            </Grid>


                            {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


                        </Box>

                    </Card>
                    <Grid sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                        <Button sx={{ float: 'right', borderRadius: '4px' }} variant={'contained'} onClick={handleNavigation}>Apply for a new leave</Button>
                    </Grid>

                </CardContent>
            </Card>


            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>

                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <SummarizeIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end"> Leave Applications</H3>
                    </div>
                    <Box component={"div"} >

                        <SearchTable
                            columns={columns}
                            data={tableData}
                            isCheckbox={false}
                            isHideDensity={false}
                            isHideExport={true}
                            isHideFilter={true}
                            isHideColumn={true}
                            isHidePaging={false}
                            name="abc"
                            id="hjjh"
                        />
                    </Box>
                </CardContent>
            </Card>
            <Dialog
                fullWidth
                maxWidth={'md'}
                open={open}
                onClose={handleClose}
            >
                <DialogContent >
                    <TrackLeaveRequestStatus rqstId={dubby} />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Close</Button>

                </DialogActions>
            </Dialog>
        </>
    )
}

//aryan
export default FileLeave
