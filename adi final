import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { CommonService } from 'src/app/services/common.service';
import { ReportService } from 'src/app/services/report.service';
import { jsPDF } from "jspdf";
import { VennDiagramController, ArcSlice } from 'chartjs-chart-venn';
import { Chart, LinearScale, registerables } from 'chart.js';
import * as Highcharts from 'highcharts';
Chart.register(...registerables, VennDiagramController, ArcSlice, LinearScale);


@Component({
  selector: 'app-venn-diagram',
  templateUrl: './venn-diagram.component.html',
  styleUrls: ['./venn-diagram.component.css']
})


export class VennDiagramComponent implements OnInit {
  constructor(private common: CommonService,
    private reportService: ReportService) { }

  @ViewChild('vennChartJS') vennChartJS: ElementRef;
  @ViewChild('chartCanvas') chartCanvas: ElementRef<HTMLCanvasElement>;
  context: CanvasRenderingContext2D;

  scheme1: any;
  scheme2: any = -1;

  scheme1name: any;
  scheme2name: any;

  scheme1cnt: any;
  scheme2cnt: any;
  int12cnt: any;
  schemeLis: [];
  id: any = null;
  id2: any = null;
  flag: any = false;
  cheBox = false;

  ngOnInit(): void {
    //this.scheme1;
    this.schemeList();

    this.makeChart();

  }





  vennChartElement: any;

  makeChart() {

    // const config = {
    //   type: 'venn',
    //   data: ChartVenn.extractSets(
    //     [
    //       { label: 'Soccer', values: ['alex', 'casey', 'drew', 'hunter'] },
    //       { label: 'Tennis', values: ['casey', 'drew', 'jade'] },
    //       { label: 'Volleyball', values: ['drew', 'glen', 'jade'] },
    //     ],
    //     {
    //       label: 'Sports',
    //     }
    //   ),
    //   options: {},
    // };




    this.vennChartElement = new Chart("myChart", {
      type: 'venn',
      data: {
        labels: [],
        datasets: [
          {
            label: '',
            data: [],
            backgroundColor: [
              'rgba(255, 99, 132,0.2)',
              'rgba(54, 162, 235, 0.2)',
              'rgba(255, 205, 86,0.2)',

            ],
            borderColor: [
              'rgb(255, 99, 132)',
              'rgb(54, 162, 235)',
              'rgb(255, 205, 86)',
            ],
            borderWidth: 3
          },
        ],
      },
      options: {
        aspectRatio: 3,
        layout: {
          padding: 10
        },
        plugins: {

          legend: {
            display: false
          }
        },

      }
    });
  }



  overlap() {
    if (this.flag != true) {
      this.reportService.getOverlapCount(this.scheme1, this.scheme2).subscribe((data) => {
        if (data.status) {
          console.log("this is overlap----->" + data.result);
          // this.tableList = data.result;    
          // console.log("CC=",this.tableList);          
          this.scheme1name = data.result.sc1name;
          this.scheme2name = data.result.sc2name;
          this.scheme1cnt = data.result.sc1Count;
          this.scheme2cnt = data.result.sc2Count;
          this.int12cnt = data.result.interCount;
          console.log("Intersection count is " + this.int12cnt);

          // const sets = [
          //   { sets: [this.scheme1name], size: this.scheme1cnt },
          //   { sets: [this.scheme2name], size: this.scheme2cnt },
          //   { sets: [this.scheme1name, this.scheme2name], size: this.int12cnt }
          // ];



          let vennData = [
            { sets: [this.scheme1name], value: this.scheme1cnt },
            { sets: [this.scheme2name], value: this.scheme2cnt },
            { sets: [this.scheme1name, this.scheme2name], value: this.int12cnt }
          ]

          console.log(vennData);



          this.vennChartJS.nativeElement.classList.remove("d-none");



          this.vennChartElement.data.labels = ['Records in ' + this.scheme1name, 'Records in ' + this.scheme2name, this.scheme2name + ' âˆ© ' + this.scheme1name]

          this.vennChartElement.data.datasets[0].data = vennData;

          this.vennChartElement.data.datasets[0].label = 'Common Beneficiaries';

          this.vennChartElement.update();



          this.cheBox = true;



          // const chart = venn.VennDiagram()
          //   .width(500)
          //   .height(500);

          // const div = d3.select(this.vennChart.nativeElement);
          // div.datum(sets).call(chart);

          this.common.successMessage(data.message);
        } else {
          this.common.errorMessage(data.message);
        }
      })
    }
  }


  printExcel() {
    this.common.info("File will be uploaded in today's timestamp folder through SFTP");
  }
  schemeList() {
    this.reportService.getSchemeList().subscribe((data) => {
      if (data.status) {
        this.schemeLis = data.result;
        this.scheme1 = data.result[0].id;
        console.log(this.schemeLis)
      }

    })
  }

  check() {

    // this.cheBox=true;
    if (this.scheme1 == this.scheme2) {
      this.flag = true;
      this.common.warn("Scheme name cannot be same");
    }
    else {
      this.flag = false;

    }
  }



  exportPdf() {
    var reportPageWidth = this.chartCanvas.nativeElement.width;
    var reportPageHeight = this.chartCanvas.nativeElement.height;
    this.context = this.chartCanvas.nativeElement.getContext('2d');
    var pdf = new jsPDF('p', 'px', "a4");
    var contentDataURL = this.chartCanvas.nativeElement.toDataURL('image/png', 1.0)
    var xOffset = pdf.internal.pageSize.width / 2;
    pdf.text('Cross Scheme Statistics', xOffset, 30, { align: 'center' });
    pdf.addImage(contentDataURL, 'PNG', 0, 50, 420, 140);

    pdf.setFontSize(10);
    pdf.text('Beneficiaries in ' + this.scheme1name + ' : ' + this.scheme1cnt, 20, 220, { align: 'left' });
    pdf.text('Beneficiaries in ' + this.scheme2name + ' : ' + this.scheme2cnt, 20, 240, { align: 'left' });
    pdf.text('Beneficiaries who are in both ' + this.scheme1name + ' and ' + this.scheme2name + ' : ' + this.int12cnt, 20, 260, { align: 'left' });
    pdf.save("CrossSchemeStatistics_" + this.scheme1name + '_' + this.scheme2name + ".pdf");
  }

 

}



















<div class="page-title">
  <h4 style="text-transform: capitalize;color: #158b40;font-weight: 800;">{{'rep.crossSchStat.title'|translate}}</h4>
  <div class="row">
  <div class="col-md-4">
    <div class="form-group">
        <label>{{'label.department'|translate}} <span class="required">*</span></label>
        <select [(ngModel)]="scheme1" class="form-control" style="font-weight: 800;color: black;" #required>
 
          <option *ngFor="let ag of schemeLis" value="{{ag?.id}}">{{ag?.name}}</option>
        </select>
    </div>
    </div>
 
    <div class="col-md-4">
      <div class="form-group">
          <label>{{'label.scheme'|translate}} <span class="required">*</span></label>
          <select [(ngModel)]="scheme2" class="form-control" style="font-weight: 800;color: black;" #required>
            <option value="-1" disabled>Select Scheme</option>
            <option *ngFor="let ag of schemeLis"  value="{{ag?.id}}">{{ag?.name}}</option>
          </select>
      </div>
    </div>
    <div class="col-md-4">
      <button class="btn btn-info button butcolor" style="margin-top:30px; color: #fafafa;" (click)="check();overlap()">{{'btn.showoverlap'|translate}}</button>
      <button class="btn btn-primary" style="margin-top:30px;" *ngIf="cheBox" (click)="exportPdf()"><i class="fa fa-file-pdf-o"></i> Export</button>
  </div>
</div>
 
 
 
</div>
 
<!-- <div class="row" *ngIf="scheme1 > 0 && scheme2 > 0 && int12cnt > 0" >
  <div class="col-md-4">{{scheme2name}} : {{scheme2cnt}}</div>
  <div class="col-md-4">{{scheme1name}} : {{scheme1cnt}}</div>
  <div class="col-md-4">Common Beneficiaries : {{int12cnt}}</div>
</div> -->
 
<!-- <div #vennChart></div> -->
 
<!--
<canvas id="vennChartJS" #VennchartJS></canvas> -->
 
<div id="divChart" style="width: 1000px; margin:20px auto 0;" class="d-none" #vennChartJS>
  <canvas id="myChart" #chartCanvas></canvas>
</div>
<div class="row">
<div class="col-12 col-lg-4 card-type" *ngIf="cheBox==true" >
  <a (click)="printExcel()">
  <div class="box red">
     <div class="leftbox">
       
       <h2>{{scheme1cnt}}</h2><h6>{{scheme1name}}</h6>
     </div>
     <div class="rightbox">
       <div class="icon"><i class="fa fa-book" aria-hidden="true"></i></div>
     </div>
   </div>
   </a>
</div>
<div class="col-12 col-lg-4  card-type" *ngIf="cheBox" >
  <a (click)="printExcel()">
  <div class="box orange">
     <div class="leftbox">
       <h2>{{int12cnt}}</h2><h6>{{'rep.crossSchStat.commonBen'|translate}}</h6>
     </div>
     <div class="rightbox">
       <div class="icon"><i class="fa fa-book" aria-hidden="true"></i></div>
     </div>
   </div>
   </a>
</div>
<div class="col-12 col-lg-4 card-type" *ngIf="cheBox" >
  <a (click)="printExcel()">
  <div class="box blue">
     <div class="leftbox">
       
       <h2>{{scheme2cnt}}</h2><h6>{{scheme2name}}</h6>
     </div>
     <div class="rightbox">
       <div class="icon"><i class="fa fa-book" aria-hidden="true"></i></div>
     </div>
   </div>
  </a>
</div>
</div>
