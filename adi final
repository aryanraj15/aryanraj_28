import React, { useEffect, useState, useRef } from "react";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Autocomplete from "@mui/material/Autocomplete";
import { styled } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import Grid from "@mui/material/Grid";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import Snackbar from '@mui/material/Snackbar';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { Card, CardContent, Link, Slide } from "@mui/material";
import useTitle from "../../hooks/useTitle";
import PageTitle from "../../layouts/PageTitle";
import { useNavigate } from 'react-router-dom';
import dayjs from 'dayjs';
import EventBusyIcon from '@mui/icons-material/EventBusy';
import { H3 } from "../../components/Typography";
import AlertConfirm from "react-alert-confirm";
import { useSnackbar } from "../../components/Snackbar";
import "react-alert-confirm/lib/style.css";
import Typography from '@mui/material/Typography';
import Alert from '@mui/material/Alert';
import Stack from '@mui/material/Stack';
import axios from 'axios';
import { useSelector } from "react-redux";
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import IconButton from '@mui/material/IconButton';
import AlarmIcon from '@mui/icons-material/Alarm';
import DateRangeIcon from '@mui/icons-material/DateRange';
import WorkHistoryIcon from '@mui/icons-material/WorkHistory';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import Cookies from "js-cookie";
function TransitionLeft(props) {
    return <Slide {...props} direction="left" />;
}
const today = dayjs();

const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
    ...theme.typography.body2,
    padding: theme.spacing(1),
    margin: 3,
    borderRadius: "10px",
    textAlign: 'center',
    color: theme.palette.text.secondary,
}));

const PersonalDetails = () => {
    const [prefixList, setPrefixList] = useState([]);
    const [genderList, setGenderList] = useState([]);
    const [openToast, setOpenToast] = useState(false);
    const [toastMessage, setToastMessage] = useState("");
    const [toastSeverity, setToastSeverity] = useState("info");
    const [value, setValue] = React.useState(dayjs());
    const [age, setAge] = React.useState(calculateAge(value));




    const validationSchema = Yup.object().shape({

        prefix: Yup.string().required("Leave is Required").nullable(),
        firstName: Yup.string().required("Leave is Required").nullable(),
        MiddleName: Yup.string().required("Leave is Required").nullable(),
        LastName: Yup.string().required("Leave is Required").nullable(),
        Gender: Yup.string().required("Leave is Required").nullable(),
        DateofBirth: Yup.string().required("Leave is Required").nullable(),
        Height: Yup.string().required("Leave is Required").nullable(),
        IdentificationMarks: Yup.string().required("Leave is Required").nullable(),
        FatherName: Yup.string().required("Leave is Required").nullable(),
        MotherName: Yup.string().required("Leave is Required").nullable(),
        MaritalStatus: Yup.string().required("Leave is Required").nullable(),
        spouseName: Yup.string().required("Leave is Required").nullable(),
        Disabled: Yup.string().required("Leave is Required").nullable(),

        // Leave: Yup.string().required("Leave is Required").nullable(),
        // // ApplyingDueToAnyEmergency: Yup.string().required("Applying Due To Any Emergency is Required").nullable(),
        // StationLeave: Yup.string().required("Station Leave is required").nullable(),
        // LeaveStartDate: Yup.string().required("Leave Start Date is required").nullable(),
        // LeavestartTime: Yup.string().required("Leave Start Time is required").nullable(),
        // LeaveEndDate: Yup.string().required("Leave End Date is required").nullable(),
        // LeaveEndTime: Yup.string().required("Leave End Time is required").nullable(),

        Description: Yup.string()
            .required("Description is required")
            .nullable()
            .test('word-count', 'Your word length is greater than 200 words', (value) => {
                if (!value) return true; // Skip validation if the value is empty or null
                const wordCount = value.trim().split(/\s+/).length;
                return wordCount <= 200;
            }),
    });

    const formik = useFormik({
        initialValues: {
            prefix: "",
            firstName: "",
            MiddleName: "",
            LastName: "",
            Gender: "",
            DateofBirth: "",
            Height: "",
            IdentificationMarks: "",
            FatherName: "",
            MotherName: "",
            MaritalStatus: "",
            spouseName: "",
            Disabled: ""

        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            console.log(values)
            // handleRedirect();
        },
    });

    const VisuallyHiddenInput = styled('input')({
        clip: 'rect(0 0 0 0)',
        clipPath: 'inset(50%)',
        height: 1,
        overflow: 'hidden',
        position: 'absolute',
        bottom: 0,
        left: 0,
        whiteSpace: 'nowrap',
        width: 1,
    });

    const ageValidator = (value) => {
        if (value != null || value != NaN) {
            const selectedDate = dayjs(value).format("YYYY-MM-DD");
            console.log(selectedDate);
            const age = calculateAge(value);
            console.log(age);
            let minAge = 18;
            // let maxAge = 50;
            if (
                age &&
                (age.years < minAge)
            ) {
                alert(
                    `Age should be greater than ${minAge}`
                );
                return;
            }
            formik.setFieldValue("dob", selectedDate);
            formik.setFieldValue(
                "age",
                age ? age.ageString : ""
            );
        }
    };
    function calculateAge(dateOfBirth) {
        const today = new Date();
        const birthDate = new Date(dateOfBirth);
        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();
        const dayDiff = today.getDate() - birthDate.getDate();
        if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
            age--;
        }
        let ageString = "";
        if (age > 0) {
            ageString += age === 1 ? "1 year" : `${age} years`;
        }
        if (monthDiff > 0) {
            if (ageString !== "") {
                ageString += ", ";
            }
            ageString += monthDiff === 1 ? "1 month" : `${monthDiff} months`;
        }
        if (dayDiff > 0) {
            if (ageString !== "") {
                ageString += ", ";
            }
            ageString += dayDiff === 1 ? "1 day" : `${dayDiff} days`;
        }
        return {
            years: age,
            months: monthDiff,
            days: dayDiff,
            ageString: ageString,
        };
    }

    const handleClose = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }

        setOpenToast(false);
    };


    const title = "Leave Application Form";
    useTitle(title);

    const navigate = useNavigate();

    const handleRedirect = () => {
        callConfirmDialog();
    }

    const { showSnackbar } = useSnackbar();


    const callConfirmDialogMessage = async (strMessage) => {
        AlertConfirm.config({
            okText: "Ok",
        });
        const [action] = await AlertConfirm.alert(<span><b>{strMessage}</b></span>);
        action && navigate("/addAbsence");
    };

    const callConfirmDialog = async () => {
        console.log('kp-confirm');
        const [action] = await AlertConfirm({
            title: "Confirm",
            desc: "Are you sure, you want to submit?",
        });
        AlertConfirm.config({
            okText: "Submit",
            cancelText: "Cancel",
        });
        if (action) {
            console.log('kp-saved');

            //   saveLeaveDetails();
        }

    };


    return (
        <>

            <Box>
                <form onSubmit={formik.handleSubmit}>
                    <div>
                        <Snackbar
                            open={openToast}
                            autoHideDuration={6000}
                            anchorOrigin={{ vertical: "top", horizontal: "right" }}
                            onClose={handleClose}
                            TransitionComponent={TransitionLeft}
                        >
                            <Alert onClose={handleClose} severity={toastSeverity}
                                sx={{
                                    width: '100%',
                                    padding: { sm: '15px', xs: '10px' },
                                    borderRadius: '15px',
                                    fontSize: { sm: '16px', xs: '14px' },
                                    boxShadow: "0 0 10px #999",
                                    marginTop: { sm: '25px', xs: '20px' }
                                }}>
                                {toastMessage}
                            </Alert>
                        </Snackbar>
                    </div>
                    <Card>
                        <CardContent>
                            <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf", marginBottom: "20px" }}>
                                <CalendarMonthIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                                <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Apply Leave</H3>
                            </div>

                            <Grid
                                container
                                direction="row"
                                rowSpacing={0}
                                columnSpacing={2}
                                justify="flex-end"
                                alignItems="center"
                                sx={{ mb: 1 }}
                            >
                                
                                    <Grid container direction="row" rowSpacing={0} columnSpacing={2} justify="flex-end" alignItems="center" sx={{ mb: 1 }}>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <Autocomplete
                                                disablePortal
                                                margin="normal"
                                                size="small"
                                                id="prefix"
                                                name="prefix"
                                                // options={prefixList}
                                                // value={prefixList.find(
                                                //     (option) => option.id === formik.values.prefix
                                                // ) || null}
                                                onChange={(e, value) => {
                                                    if (value === null) {
                                                        formik.setFieldValue("prefix", null)
                                                    }
                                                    else
                                                        formik.setFieldValue("prefix", value.id)
                                                }}
                                                getOptionLabel={(value) => value.label}
                                                sx={{ width: "100%", mt: 2 }}
                                                renderInput={(params) => (
                                                    <TextField {...params}
                                                        label="Prefix"
                                                        required
                                                        InputLabelProps={{ shrink: true }}
                                                        onBlur={formik.handleBlur}
                                                        helperText={formik.errors.prefix && formik.touched.prefix ? formik.errors.prefix : null}
                                                        error={formik.errors.prefix && formik.touched.prefix ? true : false}
                                                    />
                                                )}
                                            />
                                        </Grid>
                                    </Grid>
                                    <Grid
                                        container
                                        direction="row"
                                        rowSpacing={0}
                                        columnSpacing={2}
                                        justify="flex-end"
                                        alignItems="center"

                                    >
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="firstName"
                                                name="firstName"
                                                label="First Name"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.firstName}
                                                error={formik.touched.firstName && !!formik.errors.firstName}
                                                helperText={formik.touched.firstName && formik.errors.firstName}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="MiddleName"
                                                name="MiddleName"
                                                label="Middle Name"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.MiddleName}
                                                error={formik.touched.MiddleName && !!formik.errors.MiddleName}
                                                helperText={formik.touched.MiddleName && formik.errors.MiddleName}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="LastName"
                                                name="LastName"
                                                label="Last Name"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.LastName}
                                                error={formik.touched.LastName && !!formik.errors.LastName}
                                                helperText={formik.touched.LastName && formik.errors.LastName}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <Autocomplete
                                                disablePortal
                                                margin="normal"
                                                size="small"
                                                id="Gender"
                                                name="Gender"
                                                // options={genderList}
                                                // value={genderList.find(
                                                //     (option) => option.id === formik.values.Gender
                                                // ) || null}
                                                onChange={(e, value) => {
                                                    if (value === null) {
                                                        formik.setFieldValue("Gender", null)
                                                    }
                                                    else
                                                        formik.setFieldValue("Gender", value.id)
                                                }}
                                                getOptionLabel={(value) => value.label}
                                                sx={{ width: "100%", mt: 2 }}
                                                renderInput={(params) => (
                                                    <TextField {...params}
                                                        label="Gender"
                                                        required
                                                        InputLabelProps={{ shrink: true }}
                                                        onBlur={formik.handleBlur}
                                                        helperText={formik.errors.Gender && formik.touched.Gender ? formik.errors.Gender : null}
                                                        error={formik.errors.Gender && formik.touched.Gender ? true : false}
                                                    />
                                                )}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <LocalizationProvider
                                                dateAdapter={AdapterDayjs}
                                                adapterLocale={"en-gb"}
                                            >
                                                <DatePicker
                                                    label="Date of Birth"
                                                    inputFormat="DD-MM-YYYY"
                                                    maxDate={new Date()}
                                                    id="dob"
                                                    name="dob"
                                                    value={formik.values.dob}
                                                    InputLabelProps={{ shrink: true }}
                                                    onChange={(value) => { if (value === null) { formik.setFieldValue("age", "") } else { ageValidator(value) } }}
                                                    renderInput={(params) => (
                                                        <TextField
                                                            size="small"
                                                            fullWidth
                                                            margin="normal"
                                                            name="dob"
                                                            required
                                                            {...params}
                                                            error={formik.touched.dob && Boolean(formik.errors.dob)}
                                                            helperText={formik.touched.dob && formik.errors.dob}
                                                            onChange={formik.handleChange}
                                                            onBlur={formik.handleBlur}
                                                        />
                                                    )}
                                                />
                                            </LocalizationProvider>
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            {/* need to add radio button */}
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="IdentificationMarks"
                                                name="IdentificationMarks"
                                                label="Identification Marks"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.IdentificationMarks}
                                                error={formik.touched.IdentificationMarks && !!formik.errors.IdentificationMarks}
                                                helperText={formik.touched.IdentificationMarks && formik.errors.IdentificationMarks}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="FatherName"
                                                name="FatherName"
                                                label="Father Name"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.FatherName}
                                                error={formik.touched.FatherName && !!formik.errors.FatherName}
                                                helperText={formik.touched.FatherName && formik.errors.FatherName}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <TextField
                                                fullWidth
                                                id="MotherName"
                                                name="MotherName"
                                                label="Mother Name"
                                                size="small"
                                                margin="normal"
                                                required
                                                InputLabelProps={{ shrink: true }}
                                                onChange={formik.handleChange}
                                                onBlur={formik.handleBlur}
                                                value={formik.values.MotherName}
                                                error={formik.touched.MotherName && !!formik.errors.MotherName}
                                                helperText={formik.touched.MotherName && formik.errors.MotherName}
                                            />
                                        </Grid>
                                    </Grid>
                                    <Grid item xs={12} sm={4} md={4} lg={4}>
                                            <Autocomplete
                                                disablePortal
                                                margin="normal"
                                                size="small"
                                                id="MaritalStatus"
                                                name="MaritalStatus"
                                                // options={MaritalStatusList}
                                                // value={MaritalStatusList.find(
                                                //     (option) => option.id === formik.values.MaritalStatus
                                                // ) || null}
                                                onChange={(e, value) => {
                                                    if (value === null) {
                                                        formik.setFieldValue("MaritalStatus", null)
                                                    }
                                                    else
                                                        formik.setFieldValue("MaritalStatus", value.id)
                                                }}
                                                getOptionLabel={(value) => value.label}
                                                sx={{ width: "100%", mt: 2 }}
                                                renderInput={(params) => (
                                                    <TextField {...params}
                                                        label="Marital Status"
                                                        required
                                                        InputLabelProps={{ shrink: true }}
                                                        onBlur={formik.handleBlur}
                                                        helperText={formik.errors.MaritalStatus && formik.touched.MaritalStatus ? formik.errors.MaritalStatus : null}
                                                        error={formik.errors.MaritalStatus && formik.touched.MaritalStatus ? true : false}
                                                    />
                                                )}
                                            />
                                        </Grid>
                                

                            </Grid>

                        </CardContent>
                    </Card>
                </form>
            </Box>

        </>
    );
}

export default PersonalDetails;
