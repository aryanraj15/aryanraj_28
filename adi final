
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import CachedIcon from "@mui/icons-material/Cached";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import SaveAltIcon from "@mui/icons-material/SaveAlt";
import {
  Autocomplete,
  Box,
  Button,
  Card,
  CardContent,
  CircularProgress,
  Stack,
  TextField,
} from "@mui/material";
import Grid from "@mui/material/Unstable_Grid2";
import { useFormik } from "formik";
import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import * as yup from "yup";
import SearchTable from "../../components/SearchTableAlt";
import { useSnackbar } from "../../components/Snackbar";
import useTitle from "../../hooks/useTitle";
import PageTitle from "../../layouts/PageTitle";
import axiosClient from "../../utils/AxiosInterceptor";
import Loader from "../../components/Loader";
import { render } from "@testing-library/react";
import dayjs from "dayjs";
import "dayjs/locale/en-gb";
import Checkbox from "@mui/material/Checkbox";

const rowData = [
  {
    "Sr No.": 1,
    tiersNameEnglish: "Tier-1",
    tiersNameHindi: "टीयर 1",
    ratePercentage: 24,
    description: "Tier-1",
    effectiveFrom: "18-10-2023 13:12:47",
    effectiveTo: "18-11-2023 13:12:47",
  },
  {
    "Sr No.": 2,
    tiersNameEnglish: "Tier-2",
    tiersNameHindi: "टीयर 2",
    ratePercentage: 16,
    description: "Tier-2",
    effectiveFrom: "18-09-2023 13:12:47",
    effectiveTo: "10-11-2023 13:12:47",
  },
  {
    "Sr No.": 3,
    tiersNameEnglish: "Tier-3",
    tiersNameHindi: "टीयर 3",
    ratePercentage: 8,
    description: "Tier-3",
    effectiveFrom: "19-10-2023 13:12:47",
    effectiveTo: "20-11-2023 13:12:47",
  },
];

const HraRate = () => {
  const [rowss, setRowss] = useState([]);
  const [selectedRow, setSelectedRow] = useState(null);
  const [btnText, setBtnText] = useState("Save");
  const [isReadable, setIsReadable] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoader, setIsLoader] = useState(false);
  const { showSnackbar } = useSnackbar();
  const [editId, setEditId] = useState(null);
  const label = { inputProps: { "aria-label": "Checkbox demo" } };
  const userId = localStorage.getItem("userId");

  const title = "HRA Rate";
  useTitle(title);

  useEffect(() => {
    setIsLoader(true);
    axiosClient
      .get(`${process.env.REACT_APP_PAYROLL_API_URL}/getHraRates`)
      .then((response) => {
        if (response.data?.result?.length === 0)
          showSnackbar("No data found", "warning");

        let responseData = response.data?.result?.map((value, index) => {
          let rowData = { ...value, index: index + 1 };

          return rowData;
        });
        setRowss(responseData);
      })
      .catch((error) => {
        showSnackbar(
          error.response.data.message
            ? error.response.data.message
            : error.response.message,
          "error"
        );
        setRowss([]);
      })
      .finally(() => setIsLoader(false));
  }, []);

  const validationSchema = yup.object({
    tiersNameEnglish: yup
      .string()
      .required("Tiers Name In English is required"),
    tiersNameHindi: yup.string().required("Tiers Name In Hindi is required"),
    ratePercentage: yup.string().required("Rate Percentage is required"),
    description: yup.string().required("Description is required"),
    effectiveFrom: yup.date().nullable().required("Effective From is required"),
    effectiveFrom: yup.date().nullable().required("Effective To is required"),
  });

  const formik = useFormik({
    initialValues: {
      tiersNameEnglish: "",
      tiersNameHindi: "",
      ratePercentage: "",
      description: "",
      effectiveFrom: null,
      effectiveTo: null,
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      // console.log("Value", values);
      setSelectedRow(null);
      setIsSubmitted(true);
      if (selectedRow !== null) {
        setBtnText("Updating");
        let postData = {
          tierId: editId,
          tierName: values.tiersNameEnglish,
          tierNameRegLang: values.tiersNameHindi,
          ratePercentage: values.ratePercentage,
          description: values.description,
          effectiveFrom: values.effectiveFrom,
          effectiveTo: values.effectiveTo,
          isActive: true,
          userId: userId,
        };

        axiosClient
          .post(
            `${process.env.REACT_APP_PAYROLL_API_URL}/saveHraRates`,
            postData
          )

          .then((response) => {
            // console.log(response.data);
            if (response.data.statusCode === 200) {
              setRowss((prevValue) => {
                const updatedRows = [...prevValue];
                updatedRows[selectedRow] = {
                  ...updatedRows[selectedRow],
                  ...response.data?.result,
                };

                // setIsReadable(false);

                return updatedRows;
              });
              showSnackbar(response.data?.message, "success");
              setBtnText("Save");
              formik.resetForm();
            } else {
              setBtnText("Update");
              showSnackbar(response.data?.message, "error");
            }
          })
          .catch((error) => {
            console.log(error);
            setBtnText("Update");
            showSnackbar(
              error.response.data.message
                ? error.response.data.message
                : error.response.message,
              "error"
            );
          })
          .finally(() => {
            setIsSubmitted(false);
          });
      } else {
        // console.log(values);
        setBtnText("Saving");
        let postData = {
          tierId: null,
          tierName: values.tiersNameEnglish,
          tierNameRegLang: values.tiersNameHindi,
          ratePercentage: values.ratePercentage,
          description: values.description,
          effectiveFrom: values.effectiveFrom,
          effectiveTo: values.effectiveTo,
          isActive: true,
          userId: userId,
        };
        // console.log("Post Data",postData);
        axiosClient
          .post(
            `${process.env.REACT_APP_PAYROLL_API_URL}/saveHraRates`,
            postData
          )
          .then((response) => {
            // console.log(response.data);

            if (response.data.statusCode === 200) {
              const updatedRow = rowss.map((value) => ({
                ...value,
                index: value.index + 1,
              }));

              let newRow = response.data?.result;
              newRow = { index: 1, ...newRow };

              setRowss([newRow, ...updatedRow]);
              setBtnText("Saving");
              showSnackbar(response.data?.message, "success");
              formik.resetForm();
            } else {
              showSnackbar(response.data?.message, "error");
            }
          })
          .catch((error) => {
            showSnackbar(
              error.response.data.message
                ? error.response.data.message
                : error.response.message,
              "error"
            );
          })
          .finally(() => {
            setBtnText("Save");
            setIsSubmitted(false);
          });
      }
    },
  });

  const handleCancel = () => {
    setBtnText("Save");
    // setIsReadable(false);
    setSelectedRow(null);
    formik.resetForm();
  };

  const handleEdit = (index) => {
    setSelectedRow(index - 1);
    setEditId(rowss[index - 1].tierId);
    // console.log("id::",rowss[index - 1].tierId)
    let effectiveFrom = dayjs(rowss[index - 1].effectiveFrom, "YYYY-MM-DD");
    let effectiveTo = dayjs(rowss[index - 1].effectiveTo, "YYYY-MM-DD");
    setBtnText("Update");
    formik.setFieldValue("tiersNameEnglish", rowss[index - 1].tierName);
    formik.setFieldValue("tiersNameHindi", rowss[index - 1].tierNameRegLang);
    formik.setFieldValue("ratePercentage", rowss[index - 1].ratePercentage);
    formik.setFieldValue("description", rowss[index - 1].description);
    formik.setFieldValue("effectiveFrom", effectiveFrom);
    formik.setFieldValue("effectiveTo", effectiveTo);
  };
  const handleDelete = (index) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        let values = rowss[index - 1];

        axiosClient
          .delete(
            `${process.env.REACT_APP_PAYROLL_API_URL}/master/project/${values.projectId}`
          )
          .then((response) => {
            // console.log(response.data);
            if (response.data.statusCode === 200) {
              const updatedRow = rowss
                .filter((value) => value.index !== values.index)
                .map((value, index) => ({ ...value, index: index + 1 }));

              setRowss(updatedRow);
              showSnackbar(response.data?.message, "success");
            } else {
              showSnackbar(response.data?.message, "error");
            }
          })
          .catch((error) => {
            console.log(error);
            showSnackbar(
              error.response.data.message
                ? error.response.data.message
                : error.response.message,
              "error"
            );
          });
      }
    });
  };

  const columns = [
    {
      field: "index",
      headerName: "Sr No.",
      flex: 0.1,
      minWidth: 80,
      headerClassName: "super-app-theme--header",
    },
    {
      // field: "tiersNameEnglish",
      field: "tierName",
      headerName: "Tiers Name (English)",
      flex: 0.2,
      minWidth: 180,
      headerClassName: "super-app-theme--header",
    },
    {
      // field: "tiersNameHindi",
      field: "tierNameRegLang",
      headerName: "Tiers Name (Hindi)",
      flex: 0.2,
      minWidth: 180,
      headerClassName: "super-app-theme--header",
    },
    {
      // field: "ratePercentage",
      field: "ratePercentage",
      headerName: "Rate Percentage",
      flex: 0.2,
      minWidth: 150,
      headerClassName: "super-app-theme--header",
    },
    {
      // field: "description",
      field: "description",
      headerName: "Description",
      flex: 0.2,
      minWidth: 200,
      headerClassName: "super-app-theme--header",
    },
    {
      field: "effectiveFrom",
      headerName: "Effective From",
      flex: 0.2,
      minWidth: 180,
      headerClassName: "super-app-theme--header",
    },

    {
      field: "effectiveTo",
      headerName: "Effective To",
      flex: 0.2,
      minWidth: 180,
      headerClassName: "super-app-theme--header",
    },

    {
      field: "action",
      headerName: "Action",
      headerClassName: "super-app-theme--header",
      flex: 0.3,
      minWidth: 180,
      sortable: false,
      disableClickEventBubbling: true,
      renderCell: (params) => {
        return (
          <Stack direction="row" spacing={1}>
            <Button
              variant="contained"
              sx={{
                color: "black",
                backgroundColor: "white",
                ":hover": { color: "black", backgroundColor: "white" },
                borderRadius: "4px",
              }}
              endIcon={<EditIcon />}
              size="small"
              onClick={() => handleEdit(params.row.index)}
            >
              Edit
            </Button>

            {/* <Button variant="contained" sx={{ color: 'white', backgroundColor: '#286cb4', ":hover": { color: 'white', backgroundColor: '#286cb4' }, borderRadius: '4px' }} startIcon={<DeleteIcon />} size="small" onClick={() => handleDelete(params.row.index)}>Delete</Button> */}
          </Stack>
        );
      },
    },
  ];

  return (
    <>
      {isLoader && <Loader />}
      <Grid container>
        <Grid xs={12}>
          <Card sx={{ my: 2 }} elevation={5}>
            <CardContent>
              <PageTitle name={title} />
              <Box component="form" onSubmit={formik.handleSubmit}>
                <Grid container columnSpacing={3}>
                  <Grid xs={12} sm={4}>
                    <TextField
                      margin="normal"
                      fullWidth
                      type="text"
                      id="tiersNameEnglish"
                      name="tiersNameEnglish"
                      label="Tier Name in English"
                      size="small"
                      required
                      disabled={isReadable}
                      value={formik.values.tiersNameEnglish}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.tiersNameEnglish &&
                        !!formik.errors.tiersNameEnglish
                      }
                      helperText={
                        formik.touched.tiersNameEnglish &&
                        formik.errors.tiersNameEnglish
                      }
                    />
                  </Grid>

                  <Grid xs={12} sm={4}>
                    <TextField
                      margin="normal"
                      fullWidth
                      type="text"
                      id="tiersNameHindi"
                      name="tiersNameHindi"
                      label="Tiers Name In Hindi"
                      size="small"
                      disabled={isReadable}
                      value={formik.values.tiersNameHindi}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.tiersNameHindi &&
                        !!formik.errors.tiersNameHindi
                      }
                      helperText={
                        formik.touched.tiersNameHindi &&
                        formik.errors.tiersNameHindi
                      }
                    />
                  </Grid>
                  <Grid xs={12} sm={4}>
                    <TextField
                      margin="normal"
                      fullWidth
                      type="text"
                      id="ratePercentage"
                      name="ratePercentage"
                      label="Rate Percentage"
                      size="small"
                      required
                      disabled={isReadable}
                      value={formik.values.ratePercentage}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.ratePercentage &&
                        !!formik.errors.ratePercentage
                      }
                      helperText={
                        formik.touched.ratePercentage &&
                        formik.errors.ratePercentage
                      }
                    />
                  </Grid>
                  <Grid xs={12} sm={4}>
                    <TextField
                      margin="normal"
                      fullWidth
                      type="text"
                      id="description"
                      name="description"
                      label="Description"
                      size="small"
                      disabled={isReadable}
                      value={formik.values.description}
                      onChange={formik.handleChange}
                      onBlur={formik.handleBlur}
                      error={
                        formik.touched.description &&
                        !!formik.errors.description
                      }
                      helperText={
                        formik.touched.description && formik.errors.description
                      }
                    />
                  </Grid>
                  <Grid xs={12} sm={4}>
                    <LocalizationProvider
                      dateAdapter={AdapterDayjs}
                      adapterLocale={"en-gb"}
                    >
                      <DatePicker
                        id="effectiveFrom"
                        sx={{ width: "100%", mt: 2 }}
                        name="effectiveFrom"
                        disableFuture
                        format="DD/MM/YYYY"
                        value={formik.values.effectiveFrom}
                        required
                        onChange={(value) =>
                          formik.setFieldValue("effectiveFrom", value)
                        }
                        onBlur={formik.handleBlur}
                        label="Effective From"
                        slotProps={{ textField: { size: "small" } }}
                        renderInput={(params) => (
                          <TextField
                            size="small"
                            fullWidth
                            margin="0"
                            required
                            {...params}
                            error={
                              formik.touched.effectiveFrom &&
                              Boolean(formik.errors.effectiveFrom)
                            }
                            helperText={
                              formik.touched.effectiveFrom &&
                              formik.errors.effectiveFrom
                            }
                            onBlur={formik.handleBlur}
                          />
                        )}
                      />
                    </LocalizationProvider>
                  </Grid>
                  <Grid item xs={12} sm={4}>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                      <DatePicker
                        label="Effective To"
                        sx={{ width: "100%", mt: 2 }}
                        value={formik.values.effectiveTo}
                        slotProps={{ textField: { size: "small" } }}
                        onChange={(value) =>
                          formik.setFieldValue("effectiveTo", value)
                        }
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            fullWidth
                            size="small"
                            margin="0"
                            required
                            error={
                              formik.touched.effectiveTo &&
                              Boolean(formik.errors.effectiveTo)
                            }
                            helperText={
                              formik.touched.effectiveTo &&
                              formik.errors.effectiveTo
                            }
                          />
                        )}
                      />
                    </LocalizationProvider>
                  </Grid>
                </Grid>

                <Box spacing={2} sx={{ mt: 1, textAlign: "center" }}>
                  <Button
                    sx={{
                      minWidth: 100,
                      ml: 1,
                      mt: { xs: 1, md: 0 },
                    }}
                    disabled={isSubmitted}
                    variant="contained"
                    type="submit"
                  >
                    {btnText}
                    &nbsp;
                  </Button>
                  <Button
                    type="button"
                    sx={{ minWidth: 100, ml: 1, mt: { xs: 1, md: 0 } }}
                    onClick={handleCancel}
                    variant="outlined"
                  >
                    <CachedIcon />
                    &nbsp;RESET
                  </Button>
                </Box>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
      <Card>
        <CardContent>
          <Box component={"div"}>
            <SearchTable
              columns={columns}
              data={rowss}
              isCheckbox={false}
              isHideDensity={false}
              isHideExport={true}
              isHideFilter={true}
              isHideColumn={true}
              isHidePaging={false}
              name="villageName"
              id="villageName"
            />
          </Box>
        </CardContent>
      </Card>
    </>
  );
};

export default HraRate;


"disabilityDetails": [
        {
            "disabilityType": 209,
            "disabilityPercent": 10
        },
        {
            "disabilityType": 211,
            "disabilityPercent": 90
        }
    ]


<Autocomplete
    disablePortal
    margin="normal"
    size="small"
    id={`disabilityType-${index}`}
    name={`disabilityType-${index}`}
    options={availableDisabilities}
    value={disabilityList.find(option => option.id === disability.type) || null}
    onChange={(e, value) => handleDisabilityChange(index, value)}
    getOptionLabel={(value) => value.label}
    sx={{ width: "100%", mt: 2, mb: 1 }}
    renderInput={(params) => (
        <TextField
            {...params}
            label="Type of Disability"
            onBlur={formik.handleBlur}
            InputLabelProps={{ shrink: true }}
            helperText={formik.errors[`disabilityType-${index}`] || ''}
            error={!!formik.errors[`disabilityType-${index}`]}
        />
    )}
/>

const handleDisabilityChange = (index, value) => {
    const updatedDisabilities = [...disabilities];
    updatedDisabilities[index].type = value ? value.id : '';
    setDisabilities(updatedDisabilities);
    setAvailableDisabilities(disabilityList.filter(dis => !updatedDisabilities.some(d => d.type === dis.id)));
};
onChange={(e) => {
    formik.setFieldValue("physicallyHandicapped", e.target.value);
    if (e.target.value === 'false') {
        setDisabilities([{ type: '', percentage: '' }]);
        setAvailableDisabilities(disabilityList);
    }
}}












const [disabilityList, setTypeofDisabilityList] = useState([]);

 const [disabilityList, setDisabilityList] = useState([
        { id: '1', label: 'Visual Impairment' },
        { id: '2', label: 'Hearing Impairment' },
        { id: '3', label: 'Locomotor Disability' },
        { id: '4', label: 'Mental Illness' },
    ]);


import React, { useState, useEffect } from 'react';
import {
    Grid, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, FormHelperText,
    Autocomplete, TextField, IconButton, Button
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import { useFormik } from 'formik';

const DisabilityForm = ({ disabilityList = [] }) => {
    const [disabilities, setDisabilities] = useState([]);
    const [availableDisabilities, setAvailableDisabilities] = useState(disabilityList);

    const formik = useFormik({
        initialValues: {
            physicallyHandicapped: '',
        },
        validate: values => {
            const errors = {};
            if (values.physicallyHandicapped === 'true') {
                disabilities.forEach((disability, index) => {
                    if (!disability.type) {
                        errors[`disabilityType-${index}`] = 'Required';
                    }
                    if (!disability.percentage) {
                        errors[`disabilityPercentage-${index}`] = 'Required';
                    } else if (disability.percentage < 0 || disability.percentage > 100) {
                        errors[`disabilityPercentage-${index}`] = 'Disability Percentage should be between 0 and 100';
                    }
                });
            }
            return errors;
        },
        onSubmit: values => {
            console.log('Form data', values);
        }
    });

    useEffect(() => {
        if (formik.values.physicallyHandicapped === 'true' && disabilities.length === 0) {
            handleAddDisability();
        }
    }, [formik.values.physicallyHandicapped]);

    const handleAddDisability = () => {
        setDisabilities([...disabilities, { type: '', percentage: '' }]);
    };

    const handleRemoveDisability = (index) => {
        if (index === 0) return; // Prevent removing the first row
        const updatedDisabilities = [...disabilities];
        const removed = updatedDisabilities.splice(index, 1);
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities([...availableDisabilities, removed[0]]);
    };

    const handleDisabilityChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].type = value ? value.id : '';
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities(disabilityList.filter(dis => !updatedDisabilities.some(d => d.type === dis.id)));
    };

    const handlePercentageChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].percentage = value;
        setDisabilities(updatedDisabilities);
    };

    return (
        <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={3}>
                <Grid item xs={12} sm={4} md={4} lg={4}>
                    <FormControl>
                        <FormLabel id="demo-row-radio-buttons-group-label">
                            Disability (yes/no)
                        </FormLabel>
                        <RadioGroup
                            row
                            aria-labelledby="demo-row-radio-buttons-group-label"
                            name="physicallyHandicapped"
                            value={formik.values.physicallyHandicapped}
                            onChange={(e) => {
                                formik.setFieldValue("physicallyHandicapped", e.target.value);
                                if (e.target.value === 'false') {
                                    setDisabilities([]);
                                }
                            }}
                        >
                            <FormControlLabel
                                value="true"
                                control={<Radio />}
                                label="Yes" />
                            <FormControlLabel
                                value="false"
                                control={<Radio />}
                                label="No" />
                        </RadioGroup>
                        {formik.touched.physicallyHandicapped &&
                            formik.errors.physicallyHandicapped && (
                                <FormHelperText error>
                                    {formik.errors.physicallyHandicapped}
                                </FormHelperText>
                            )}
                    </FormControl>
                </Grid>
                {formik.values.physicallyHandicapped === 'true' && (
                    <React.Fragment>
                        {disabilities.map((disability, index) => (
                            <React.Fragment key={index}>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <Autocomplete
                                        disablePortal
                                        margin="normal"
                                        size="small"
                                        id={`disabilityType-${index}`}
                                        name={`disabilityType-${index}`}
                                        options={availableDisabilities}
                                        value={availableDisabilities.find(option => option.id === disability.type) || null}
                                        onChange={(e, value) => handleDisabilityChange(index, value)}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                label="Type of Disability"
                                                onBlur={formik.handleBlur}
                                                InputLabelProps={{ shrink: true }}
                                                helperText={formik.errors[`disabilityType-${index}`] || ''}
                                                error={!!formik.errors[`disabilityType-${index}`]}
                                            />
                                        )}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <TextField
                                        margin="normal"
                                        fullWidth
                                        type="number"
                                        id={`disabilityPercentage-${index}`}
                                        name={`disabilityPercentage-${index}`}
                                        label="Percentage of Disability"
                                        size="small"
                                        InputLabelProps={{ shrink: true }}
                                        onChange={(e) => handlePercentageChange(index, e.target.value)}
                                        onBlur={formik.handleBlur}
                                        value={disability.percentage}
                                        error={!!formik.errors[`disabilityPercentage-${index}`]}
                                        helperText={formik.errors[`disabilityPercentage-${index}`] || ''}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <IconButton onClick={() => handleRemoveDisability(index)} color="error" disabled={index === 0}>
                                        <DeleteIcon />
                                    </IconButton>
                                    <IconButton onClick={handleAddDisability} color="primary">
                                        <AddIcon />
                                    </IconButton>
                                </Grid>
                            </React.Fragment>
                        ))}
                    </React.Fragment>
                )}
            </Grid>
            <Button type="submit" variant="contained" color="primary">
                Submit
            </Button>
        </form>
    );
};

export default DisabilityForm;


import React, { useState, useEffect } from 'react';
import {
    Grid, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, FormHelperText,
    Autocomplete, TextField, IconButton, Button
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import { useFormik } from 'formik';

const DisabilityForm = ({ disabilityList = [] }) => {
    const [disabilities, setDisabilities] = useState([]);
    const [availableDisabilities, setAvailableDisabilities] = useState(disabilityList);

    const formik = useFormik({
        initialValues: {
            physicallyHandicapped: '',
        },
        validate: values => {
            const errors = {};
            if (values.physicallyHandicapped === 'true') {
                disabilities.forEach((disability, index) => {
                    if (!disability.type) {
                        errors[`disabilityType-${index}`] = 'Required';
                    }
                    if (!disability.percentage) {
                        errors[`disabilityPercentage-${index}`] = 'Required';
                    } else if (disability.percentage < 0 || disability.percentage > 100) {
                        errors[`disabilityPercentage-${index}`] = 'Disability Percentage should be between 0 and 100';
                    }
                });
            }
            return errors;
        },
        onSubmit: values => {
            console.log('Form data', values);
        }
    });

    useEffect(() => {
        if (formik.values.physicallyHandicapped === 'true' && disabilities.length === 0) {
            handleAddDisability();
        }
    }, [formik.values.physicallyHandicapped]);

    const handleAddDisability = () => {
        setDisabilities([...disabilities, { type: '', percentage: '' }]);
    };

    const handleRemoveDisability = (index) => {
        const updatedDisabilities = [...disabilities];
        const removed = updatedDisabilities.splice(index, 1);
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities([...availableDisabilities, removed[0]]);
    };

    const handleDisabilityChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].type = value ? value.id : '';
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities(disabilityList.filter(dis => !updatedDisabilities.some(d => d.type === dis.id)));
    };

    const handlePercentageChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].percentage = value;
        setDisabilities(updatedDisabilities);
    };

    return (
        <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={3}>
                <Grid item xs={12} sm={4} md={4} lg={4}>
                    <FormControl>
                        <FormLabel id="demo-row-radio-buttons-group-label">
                            Disability (yes/no)
                        </FormLabel>
                        <RadioGroup
                            row
                            aria-labelledby="demo-row-radio-buttons-group-label"
                            name="physicallyHandicapped"
                            value={formik.values.physicallyHandicapped}
                            onChange={(e) => {
                                formik.setFieldValue("physicallyHandicapped", e.target.value);
                                if (e.target.value === 'false') {
                                    setDisabilities([]);
                                }
                            }}
                        >
                            <FormControlLabel
                                value="true"
                                control={<Radio />}
                                label="Yes" />
                            <FormControlLabel
                                value="false"
                                control={<Radio />}
                                label="No" />
                        </RadioGroup>
                        {formik.touched.physicallyHandicapped &&
                            formik.errors.physicallyHandicapped && (
                                <FormHelperText error>
                                    {formik.errors.physicallyHandicapped}
                                </FormHelperText>
                            )}
                    </FormControl>
                </Grid>
                {formik.values.physicallyHandicapped === 'true' && (
                    <React.Fragment>
                        {disabilities.map((disability, index) => (
                            <React.Fragment key={index}>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <Autocomplete
                                        disablePortal
                                        margin="normal"
                                        size="small"
                                        id={`disabilityType-${index}`}
                                        name={`disabilityType-${index}`}
                                        options={availableDisabilities}
                                        value={availableDisabilities.find(option => option.id === disability.type) || null}
                                        onChange={(e, value) => handleDisabilityChange(index, value)}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                label="Type of Disability"
                                                onBlur={formik.handleBlur}
                                                InputLabelProps={{ shrink: true }}
                                                helperText={formik.errors[`disabilityType-${index}`] || ''}
                                                error={!!formik.errors[`disabilityType-${index}`]}
                                            />
                                        )}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <TextField
                                        margin="normal"
                                        fullWidth
                                        type="number"
                                        id={`disabilityPercentage-${index}`}
                                        name={`disabilityPercentage-${index}`}
                                        label="Percentage of Disability"
                                        size="small"
                                        InputLabelProps={{ shrink: true }}
                                        onChange={(e) => handlePercentageChange(index, e.target.value)}
                                        onBlur={formik.handleBlur}
                                        value={disability.percentage}
                                        error={!!formik.errors[`disabilityPercentage-${index}`]}
                                        helperText={formik.errors[`disabilityPercentage-${index}`] || ''}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <IconButton onClick={() => handleRemoveDisability(index)} color="error">
                                        <DeleteIcon />
                                    </IconButton>
                                </Grid>
                            </React.Fragment>
                        ))}
                    </React.Fragment>
                )}
            </Grid>
            <Button type="submit" variant="contained" color="primary">
                Submit
            </Button>
        </form>
    );
};

export default DisabilityForm;


TypeError: Cannot read properties of undefined (reading 'find')
import React, { useState } from 'react';
import {
    Grid, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, FormHelperText,
    Autocomplete, TextField, Button, IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import { useFormik } from 'formik';

const DisabilityForm = ({ disabilityList }) => {
    const [disabilities, setDisabilities] = useState([]);
    const [availableDisabilities, setAvailableDisabilities] = useState(disabilityList);

    const formik = useFormik({
        initialValues: {
            physicallyHandicapped: '',
            disabilityType: '',
            disabilityPercentage: ''
        },
        validate: values => {
            const errors = {};
            if (values.physicallyHandicapped === 'true') {
                if (!values.disabilityType) {
                    errors.disabilityType = 'Required';
                }
                if (!values.disabilityPercentage) {
                    errors.disabilityPercentage = 'Required';
                } else if (values.disabilityPercentage < 0 || values.disabilityPercentage > 100) {
                    errors.disabilityPercentage = 'Disability Percentage should be between 0 and 100';
                }
            }
            return errors;
        },
        onSubmit: values => {
            console.log('Form data', values);
        }
    });

    const handleAddDisability = () => {
        setDisabilities([...disabilities, { type: '', percentage: '' }]);
    };

    const handleRemoveDisability = (index) => {
        const updatedDisabilities = [...disabilities];
        const removed = updatedDisabilities.splice(index, 1);
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities([...availableDisabilities, removed[0]]);
    };

    const handleDisabilityChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].type = value.id;
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities(disabilityList.filter(dis => !updatedDisabilities.some(d => d.type === dis.id)));
    };

    const handlePercentageChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].percentage = value;
        setDisabilities(updatedDisabilities);
    };

    return (
        <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={3}>
                <Grid item xs={12} sm={4} md={4} lg={4}>
                    <FormControl>
                        <FormLabel id="demo-row-radio-buttons-group-label">
                            Disability (yes/no)
                        </FormLabel>
                        <RadioGroup
                            row
                            aria-labelledby="demo-row-radio-buttons-group-label"
                            name="physicallyHandicapped"
                            value={formik.values.physicallyHandicapped}
                            onChange={(e) => {
                                formik.setFieldValue("physicallyHandicapped", e.target.value);
                                if (e.target.value === 'false') {
                                    setDisabilities([]);
                                }
                            }}
                        >
                            <FormControlLabel
                                value="true"
                                control={<Radio />}
                                label="Yes" />
                            <FormControlLabel
                                value="false"
                                control={<Radio />}
                                label="No" />
                        </RadioGroup>
                        {formik.touched.physicallyHandicapped &&
                            formik.errors.physicallyHandicapped && (
                                <FormHelperText error>
                                    {formik.errors.physicallyHandicapped}
                                </FormHelperText>
                            )}
                    </FormControl>
                </Grid>
                {formik.values.physicallyHandicapped === 'true' && (
                    <React.Fragment>
                        {disabilities.map((disability, index) => (
                            <React.Fragment key={index}>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <Autocomplete
                                        disablePortal
                                        margin="normal"
                                        size="small"
                                        id={`disabilityType-${index}`}
                                        name={`disabilityType-${index}`}
                                        options={availableDisabilities}
                                        value={availableDisabilities.find(option => option.id === disability.type) || null}
                                        onChange={(e, value) => handleDisabilityChange(index, value)}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                label="Type of Disability"
                                                onBlur={formik.handleBlur}
                                                InputLabelProps={{ shrink: true }}
                                                helperText={formik.errors.disabilityType && formik.touched.disabilityType ? formik.errors.disabilityType : null}
                                                error={formik.errors.disabilityType && formik.touched.disabilityType ? true : false}
                                            />
                                        )}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <TextField
                                        margin="normal"
                                        fullWidth
                                        type="number"
                                        id={`disabilityPercentage-${index}`}
                                        name={`disabilityPercentage-${index}`}
                                        label="Percentage of Disability"
                                        size="small"
                                        InputLabelProps={{ shrink: true }}
                                        onChange={(e) => handlePercentageChange(index, e.target.value)}
                                        onBlur={formik.handleBlur}
                                        value={disability.percentage}
                                        error={formik.touched.disabilityPercentage && !!formik.errors.disabilityPercentage}
                                        helperText={formik.touched.disabilityPercentage && formik.errors.disabilityPercentage}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <IconButton onClick={() => handleRemoveDisability(index)} color="error">
                                        <DeleteIcon />
                                    </IconButton>
                                </Grid>
                            </React.Fragment>
                        ))}
                        <Grid item xs={12}>
                            <Button onClick={handleAddDisability} variant="contained" color="primary" startIcon={<AddIcon />}>
                                Add Disability
                            </Button>
                        </Grid>
                    </React.Fragment>
                )}
            </Grid>
            <Button type="submit" variant="contained" color="primary">
                Submit
            </Button>
        </form>
    );
};

export default DisabilityForm;


Cannot read properties of undefined (reading 'values')
import React, { useState } from 'react';
import {
    Grid, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, FormHelperText,
    Autocomplete, TextField, Button, IconButton
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';

const DisabilityForm = ({ formik, disabilityList }) => {
    const [disabilities, setDisabilities] = useState([]);
    const [availableDisabilities, setAvailableDisabilities] = useState(disabilityList);

    const handleAddDisability = () => {
        setDisabilities([...disabilities, { type: '', percentage: '' }]);
    };

    const handleRemoveDisability = (index) => {
        const updatedDisabilities = [...disabilities];
        const removed = updatedDisabilities.splice(index, 1);
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities([...availableDisabilities, removed[0]]);
    };

    const handleDisabilityChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].type = value;
        setDisabilities(updatedDisabilities);
        setAvailableDisabilities(disabilityList.filter(dis => !updatedDisabilities.includes(dis)));
    };

    const handlePercentageChange = (index, value) => {
        const updatedDisabilities = [...disabilities];
        updatedDisabilities[index].percentage = value;
        setDisabilities(updatedDisabilities);
    };

    return (
        <Grid container spacing={3}>
            <Grid item xs={12} sm={4} md={4} lg={4}>
                <FormControl>
                    <FormLabel id="demo-row-radio-buttons-group-label">
                        Disability (yes/no)
                    </FormLabel>
                    <RadioGroup
                        row
                        aria-labelledby="demo-row-radio-buttons-group-label"
                        name="physicallyHandicapped"
                        value={formik.values.physicallyHandicapped}
                        onChange={(e) => {
                            formik.setFieldValue("disabilityPercentage", "");
                            formik.setFieldValue("disabilityType", "");
                            formik.handleChange(e);
                            if (e.target.value === 'false') {
                                setDisabilities([]);
                            }
                        }}
                    >
                        <FormControlLabel
                            value="true"
                            control={<Radio />}
                            label="Yes" />
                        <FormControlLabel
                            value="false"
                            control={<Radio />}
                            label="No" />
                    </RadioGroup>
                    {formik.touched.physicallyHandicapped &&
                        formik.errors.physicallyHandicapped && (
                            <FormHelperText error>
                                {formik.errors.physicallyHandicapped}
                            </FormHelperText>
                        )}
                </FormControl>
            </Grid>
            {formik.values.physicallyHandicapped === 'true' && (
                <React.Fragment>
                    {disabilities.map((disability, index) => (
                        <React.Fragment key={index}>
                            <Grid item xs={12} sm={4} md={4} lg={4}>
                                <Autocomplete
                                    disablePortal
                                    margin="normal"
                                    size="small"
                                    id={`disabilityType-${index}`}
                                    name={`disabilityType-${index}`}
                                    options={availableDisabilities}
                                    value={availableDisabilities.find(option => option.id === disability.type) || null}
                                    onChange={(e, value) => handleDisabilityChange(index, value)}
                                    getOptionLabel={(value) => value.label}
                                    sx={{ width: "100%", mt: 2, mb: 1 }}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label="Type of Disability"
                                            onBlur={formik.handleBlur}
                                            InputLabelProps={{ shrink: true }}
                                            helperText={formik.errors.disabilityType && formik.touched.disabilityType ? formik.errors.disabilityType : null}
                                            error={formik.errors.disabilityType && formik.touched.disabilityType ? true : false}
                                        />
                                    )}
                                />
                            </Grid>
                            <Grid item xs={12} sm={4} md={4} lg={4}>
                                <TextField
                                    margin="normal"
                                    fullWidth
                                    type="text"
                                    id={`disabilityPercentage-${index}`}
                                    name={`disabilityPercentage-${index}`}
                                    label="Percentage of Disability"
                                    size="small"
                                    InputLabelProps={{ shrink: true }}
                                    onChange={(e) => handlePercentageChange(index, e.target.value)}
                                    onBlur={formik.handleBlur}
                                    value={disability.percentage}
                                    error={formik.touched.disabilityPercentage && !!formik.errors.disabilityPercentage}
                                    helperText={formik.touched.disabilityPercentage && formik.errors.disabilityPercentage}
                                />
                            </Grid>
                            <Grid item xs={12} sm={4} md={4} lg={4}>
                                <IconButton onClick={() => handleRemoveDisability(index)} color="error">
                                    <DeleteIcon />
                                </IconButton>
                            </Grid>
                        </React.Fragment>
                    ))}
                    <Grid item xs={12}>
                        <Button onClick={handleAddDisability} variant="contained" color="primary" startIcon={<AddIcon />}>
                            Add Disability
                        </Button>
                    </Grid>
                </React.Fragment>
            )}
        </Grid>
    );
};

export default DisabilityForm;







<Grid item xs={12} sm={4} md={4} lg={4}>
                                                <FormControl>
                                                    <FormLabel id="demo-row-radio-buttons-group-label">
                                                        Disability (yes/no)
                                                    </FormLabel>
                                                    <RadioGroup
                                                        row
                                                        aria-labelledby="demo-row-radio-buttons-group-label"
                                                        name="physicallyHandicapped"
                                                        value={formik.values.physicallyHandicapped}
                                                        onChange={(e) => {
                                                            formik.setFieldValue("disabilityPercentage", "");
                                                            formik.setFieldValue("disabilitype", "");
                                                            formik.handleChange(e);
                                                        }}
                                                    >
                                                        <FormControlLabel
                                                            value="true"
                                                            control={<Radio />}
                                                            label="Yes" />
                                                        <FormControlLabel
                                                            value="false"
                                                            control={<Radio />}
                                                            label="No" />
                                                    </RadioGroup>
                                                    {formik.touched.physicallyHandicapped &&
                                                        formik.errors.physicallyHandicapped && (
                                                            <FormHelperText error>
                                                                {formik.errors.physicallyHandicapped}
                                                            </FormHelperText>
                                                        )}
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={4}>
                                                <Autocomplete
                                                    disablePortal
                                                    margin="normal"
                                                    size="small"
                                                    id="disabilityType"
                                                    name="disabilityType"
                                                    options={disabilityList}
                                                    value={
                                                        disabilityList.find(
                                                            (option) =>
                                                                option.id ===
                                                                formik.values.disabilityType
                                                        ) || null
                                                    }
                                                    onChange={(e, value) => {
                                                        if (value === null) {
                                                            formik.setFieldValue("disabilityType", null);
                                                        } else formik.setFieldValue("disabilityType", value.id);
                                                    }}
                                                    getOptionLabel={(value) => value.label}
                                                    sx={{ width: "100%", mt: 2, mb: 1 }}
                                                    renderInput={(params) => (
                                                        <TextField
                                                            {...params}
                                                            label="Type of Disability"
                                                            //  required
                                                            onBlur={formik.handleBlur}
                                                            InputLabelProps={{ shrink: true }}
                                                            helperText={
                                                                formik.errors.disabilityType &&
                                                                    formik.touched.disabilityType
                                                                    ? formik.errors.disabilityType
                                                                    : null
                                                            }
                                                            error={
                                                                formik.errors.disabilityType &&
                                                                    formik.touched.disabilityType
                                                                    ? true
                                                                    : false
                                                            }
                                                        />
                                                    )}
                                                />
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={4}>
                                                <TextField
                                                    margin="normal"
                                                    //  required
                                                    fullWidth
                                                    type="text"
                                                    id="disabilityPercentage"
                                                    name="disabilityPercentage"
                                                    label="Percentage of Disability"
                                                    size="small"
                                                    InputLabelProps={{ shrink: true }}
                                                    onChange={(e) => {
                                                        if (e.target.value < 0 || e.target.value > 100) {
                                                            alert("Disability Percentage should be between 0 and 100")
                                                            formik.setFieldValue("disabilityPercentage", "")
                                                            return;
                                                        }
                                                        else {
                                                            formik.setFieldValue("disabilityPercentage", e.target.value)
                                                        }
                                                    }}
                                                    onBlur={formik.handleBlur}
                                                    value={formik.values.disabilityPercentage}
                                                    error={formik.touched.disabilityPercentage && !!formik.errors.disabilityPercentage}
                                                    helperText={formik.touched.disabilityPercentage && formik.errors.disabilityPercentage}
                                                />
                                            </Grid>
