import { Box, Button, Card, CardContent, Checkbox, FormControlLabel, Stack, TextField } from '@mui/material';
import React, { useState } from 'react'
import * as yup from "yup";
import { H3 } from '../Components/Typography';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import { useFormik } from 'formik';
import SearchTable from "../../src/Components/SearchTable";
import Grid from "@mui/material/Unstable_Grid2";
import useTitle from '../hooks/useTitle';

const StateMaster = () => {
    const [rowss, setRowss] = useState([]);
    const [index, setIndex] = useState(1);
    const [selectedRow, setSelectedRow] = useState(null);
    const title="State Master"
    useTitle(title);

    const validationSchema = yup.object({
        State: yup.string().required("State Name is required"),

    });

    const formik = useFormik({
        initialValues: {
            
            State: "",
            isActive: false
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            // console.log(values);
            setSelectedRow(null);
            if (selectedRow !== null) {
                setRowss((prevValue) => {
                    const updatedRows = [...prevValue];

                    updatedRows[selectedRow].State = values.State;
                   
                    updatedRows[selectedRow].isActive = values.isActive.toString().toUpperCase();
                    return updatedRows;
                });
            } else {
                setRowss((prevValue) => [
                    ...prevValue,
                    { 
                        index, 
                        State: values.State, 
                        isActive: values.isActive.toString().toUpperCase() 
                    },
                ]);
                setIndex((prevValue) => prevValue + 1);
            }
            formik.resetForm();
        },
    });

    const handleCancel = () => {
        setSelectedRow(null);
        formik.resetForm();
    };

    const handleEdit = (index) => {
        setSelectedRow(index - 1);

        formik.setFieldValue("State", rowss[index - 1].State);
     
        formik.setFieldValue("isActive", JSON.parse(rowss[index - 1].isActive.toLowerCase()));
    };


    const columns = [
        {
            field: "index",
            headerName: "S.No",
            flex: 0.1,
            minWidth: 150,
            headerClassName: "super-app-theme--header",
        },
     
        {
            field: "State",
            headerName: "STATE NAME",
            flex: 0.6,
            minWidth: 200,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "isActive",
            headerName: "IS ACTIVE",
            flex: 0.3,
            minWidth: 150,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "action",
            headerName: "ACTION",
            headerClassName: "super-app-theme--header",
            flex: 0.3,
            minWidth: 150,
            sortable: false,
            disableClickEventBubbling: true,
            renderCell: (params) => {
                return (
                    <Stack direction="row" spacing={2}>

                        <Button
                            variant="outlined"
                            color="inherit"
                            size="small"
                            onClick={() => handleEdit(params.row.index)}
                        >
                            EDIT
                        </Button>
                    </Stack>
                );
            },
        }
       
    ];

    return (
        <>
            <Grid container>
                <Grid xs={12} >
                    <Card sx={{ my: 2 }} elevation={5}>
                        <CardContent>
                            <H3 lineHeight={2.2} sx={{ textAlign: 'center' }}>
                                {title}
                            </H3>
                            <Box component="form" onSubmit={formik.handleSubmit}>
                                <Grid container columnSpacing={2}>
                                    <Grid xs={12} sm={4} smOffset={2} md={6} mdOffset={3}>
                                     
                                        <TextField
                                            margin="normal"
                                            fullWidth
                                            type="text"
                                            id="State"
                                            name="State"
                                            label="State Name"
                                            value={formik.values.State}
                                            onChange={formik.handleChange}
                                            onBlur={formik.handleBlur}
                                            error={formik.touched.State && !!formik.errors.State}
                                            helperText={formik.touched.State && formik.errors.State}
                                        />

                                    </Grid>
                                    <Grid xs={12} sm={8} smOffset={2} md={6} mdOffset={3}>
                                        <FormControlLabel
                                            control={
                                                <Checkbox
                                                    checked={formik.values.isActive}
                                                />}
                                            name='isActive'
                                            id="isActive"
                                            onChange={formik.handleChange}
                                            onBlur={formik.handleBlur}
                                            label="is Active"
                                        />
                                    </Grid>

                                </Grid>
                                <Box
                                    spacing={2}
                                    sx={{ mt: 1, textAlign: 'center' }}
                                >
                                    <Button
                                        sx={{
                                            minWidth: 100, ml: 1, mt: { xs: 1, md: 0 }
                                        }}
                                        variant="contained"
                                        type="submit"
                                    >
                                        SAVE
                                        <SaveAltIcon sx={{ ml: 0.2 }}></SaveAltIcon>
                                    </Button>
                                    <Button
                                        type="button"
                                        sx={{ minWidth: 100, ml: 1, mt: { xs: 1, md: 0 } }}
                                        onClick={handleCancel}
                                        variant="outlined"
                                    >
                                        CANCEL
                                    </Button>
                                </Box>
                            </Box>

                            <Box component={"div"} >
                                <SearchTable
                                    columns={columns}
                                    data={rowss}
                                    isCheckbox={false}
                                    isHideDensity={false}
                                    isHideExport={true}
                                    isHideFilter={true}
                                    isHideColumn={true}
                                    isHidePaging={false}
                                    name="StateMaster"
                                    id="StateMaster"
                                />
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </>
    );
}

export default StateMaster;
