
import React, { useState, useRef, useEffect } from 'react';
import { DayPilot, DayPilotCalendar, DayPilotNavigator } from "@daypilot/daypilot-lite-react";
import "./CalendarStyles.css";
import axios from 'axios';
import { useSelector } from "react-redux";
import Cookies from "js-cookie";

const styles = {
  wrap: {
    display: "flex"
  },
  left: {
    marginRight: "10px"
  },
  main: {
    flexGrow: "1"
  }
};

const Calendar = () => {
  const calendarRef = useRef();
  const user = useSelector((state) => state.loginReducer);

  const [calendarConfig, setCalendarConfig] = useState({
    durationBarVisible: false,
    timeRangeSelectedHandling: "Enabled",
    headerDateFormat: "dd/M/yyyy",

    onBeforeEventRender: args => {
      args.data.areas = [];
    }
  });

  const [events, setEvents] = useState([]);
  const [startDate, setStartDate] = useState(DayPilot.Date.today());
  const [endDate, setEndDate] = useState(DayPilot.Date.today().addDays(6));

  const handleEventMove = (args) => {
    args.preventDefault();
  };

  const fetchCalendarData = async () => {
    const rqstFrom = startDate.toString("yyyy-MM-dd");
    const rqstTo = endDate.toString("yyyy-MM-dd");

    try {
      const response = await axios.post(
        "http://141.148.194.18:8095/leavemanagement/calendar-view",
        { 
          userId: user.data.userdetails.user.userId,
          rqstFrom,
          rqstTo
        },
        { headers: { Authorization: `Bearer ${Cookies.get("token")}` } }
      );

      if (response.data.statusCode === 200) {
        setEvents(response.data.result);
      }
    } catch (error) {
      console.error("Error fetching user details:", error);
    }
  };

  useEffect(() => {
    fetchCalendarData();
  }, [startDate, endDate]);

  useEffect(() => {
    if (calendarRef.current) {
      calendarRef.current.control.update({ startDate, events });
    }
  }, [events]);

  return (
    <div style={styles.wrap}>
      <div style={styles.left}>
        <DayPilotNavigator
          selectMode={"Week"}
          onTimeRangeSelected={args => {
            setStartDate(args.start);
            setEndDate(args.end.addDays(-1)); // Adjusting to get the correct end date
          }}
        />
      </div>
      <div style={styles.main}>
        <DayPilotCalendar
          viewType={"Week"}
          businessBeginsHour={9}
          businessEndsHour={18}
          {...calendarConfig}
          ref={calendarRef}
          onEventMove={handleEventMove}
          onEventResize={handleEventMove}
        />
      </div>
    </div>
  );
};

export default Calendar;









Uncaught (in promise) 
TypeError: Cannot read properties of null (reading 'concat')

  const saveLeaveApproveDetails = async (prop) => {

    let formattedStartDate = null;
    let formattedEndDate = null;


    if (approvedToDate === null && approvedFromDate === null) {

      if (!formik.values.LeaveStartDate || !formik.values.LeaveEndDate) {

        formattedStartDate = requestStartDate;
        formattedEndDate = requestEndDate;
        // dayjs(requestStartDate).format(
        //   "YYYY-MM-DD"
        // );

        // dayjs(requestEndDate).format(
        //   "YYYY-MM-DD"
        // );

      }
      else {
        formattedStartDate = dayjs(formik.values.LeaveStartDate).format(
          "YYYY-MM-DD"
        );
        formattedEndDate = dayjs(formik.values.LeaveEndDate).format(
          "YYYY-MM-DD"
        );
      }

    }
    else {
      if (!formik.values.LeaveStartDate || !formik.values.LeaveEndDate) {
        formattedStartDate = approvedFromDate;
        formattedEndDate = approvedToDate;


      }
      else {
        formattedStartDate = dayjs(formik.values.LeaveStartDate).format(
          "YYYY-MM-DD"
        );
        formattedEndDate = dayjs(formik.values.LeaveEndDate).format(
          "YYYY-MM-DD"
        );
      }

    }

    if (formik.values.LeaveStartDate) {
      formattedStartDate = dayjs(formik.values.LeaveStartDate).format("YYYY-MM-DD");
    }
    if (formik.values.LeaveEndDate) {
      formattedEndDate = dayjs(formik.values.LeaveEndDate).format("YYYY-MM-DD");
    }

    let approvedTimeTo = null;
    if (!formik.values.two) {
      approvedTimeTo = endTime;
    } else {
      approvedTimeTo = formik.values.two;
    }

    let approvedTimeFrom = null;
    if (!formik.values.one) {
      approvedTimeFrom = startTime;
    } else {
      approvedTimeFrom = formik.values.one;
    }

    if (prop === "Reject") {
      // Set specific parameters to null
      formattedStartDate = null;
      formattedEndDate = null;
      approvedTimeFrom = null;
      approvedTimeTo = null;
    }

    const resultones = formattedStartDate.concat("T", approvedTimeFrom);
      const resulttwos = formattedEndDate.concat("T", approvedTimeTo);


    try {
      const body = {
        rqstId: data,
        approvedFrom: resultones,
        approvedTo: resulttwos,
        updBy: user.data.userdetails.user.userId,
        status: prop === "Approve" ? stepId.approve : stepId.reject,
        finalRemarks: formik.values.remarks,
      };

      console.log("the saved details  body", body);
      const res = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/update-status`,
        body,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      console.log("the saved details  areeeeee", res);
      if (res.data.statusCode === 200) {
        console.log("the result ", res.data.result);
        callConfirmDialogMessage(res.data.message);

        // setOpenToast(true);
        // showSnackbar("Saved Successfully", "success");

      } else if (res.data.statusCode === 204) {
        setToastMessage(res.data.message)
        setToastSeverity("error");
        setOpenToast(true);
      }
    } catch (error) {

      alert("Data has not saved", error);
      console.log(error.message);
    }
  };













const onhalfValuesChange = (e) => {
  const selectedTime = ishalfTimecheck.find(item => item.showTime === e.target.value);
  if (selectedTime) {
    formik.setFieldValue('radiohalfvalue', selectedTime.showTime);
    formik.setFieldValue('timeStart', selectedTime.timeStart);
    formik.setFieldValue('timeEnd', selectedTime.timeEnd);
  }
};

<Grid item xs={12} sm={6} md={6} lg={6} >
  <FormControl component="fieldset">
    <RadioGroup
      row
      aria-label="startTime"
      name="radiohalfvalue"
      value={formik.values.radiohalfvalue}
      onChange={onhalfValuesChange}
    >
      {ishalfTimecheck.map((item, index) => (
        <FormControlLabel
          key={index}
          value={item.showTime}
          control={<Radio />}
          label={item.showTime}
        />
      ))}
    </RadioGroup>
  </FormControl>
</Grid>




  const onhalfValuesChange = (e) => {
    console.log(e.target.value);
    formik.setFieldValue('radiohalfvalue', e.target.value);
  };
                  <Grid item xs={12} sm={6} md={6} lg={6} >
                    <FormControl component="fieldset" >
                      <RadioGroup
                        row
                        aria-label="startTime"
                        name="radiohalfvalue"
                        value={formik.values.radiohalfvalue}
                        onChange={onhalfValuesChange}

                      >
                        {ishalfTimecheck.map((item, index) => (

                          <FormControlLabel
                            key={index}
                            value={item.time}
                            control={<Radio />}
                            label={item.showTime}
                          />
                        ))}
                      </RadioGroup>
                    </FormControl>
                  </Grid>


{
    "status": true,
    "message": "Half Day Sessions Calculated Successfully",
    "result": [
        {
            "typeId": 1,
            "timeStart": "10:00:00",
            "timeEnd": "14:00:00",
            "showTime": "10:00 AM - 02:00 PM"
        },
        {
            "typeId": 2,
            "timeStart": "14:00:00",
            "timeEnd": "18:00:00",
            "showTime": "02:00 PM - 06:00 PM"
        }
    ],
    "statusCode": 200
}












import * as React from 'react';
import { useFormik } from 'formik';
import Checkbox from '@mui/material/Checkbox';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import FormLabel from '@mui/material/FormLabel';

const FormControlLabelPosition = () => {
  const formik = useFormik({
    initialValues: {
      end: false,
    },
    onSubmit: values => {
      console.log(values);
    },
  });

  return (
    <form onSubmit={formik.handleSubmit}>
      <FormControl component="fieldset">
        <FormLabel component="legend">Label placement</FormLabel>
        <FormGroup aria-label="position" row>
          <FormControlLabel
            control={
              <Checkbox
                name="end"
                checked={formik.values.end}
                onChange={formik.handleChange}
              />
            }
            label="End"
            labelPlacement="end"
          />
        </FormGroup>
        <button type="submit">Submit</button>
      </FormControl>
    </form>
  );
}

export default FormControlLabelPosition;
















const filterEndTimeValues = (startTimeId) => {
    const { LeaveStartDate, LeaveEndDate } = formik.values;
    const formatLeaveStartDate = dayjs(LeaveStartDate, "MM-DD-YYYY").format("DD/MM/YYYY");
    const formatLeaveEndDate = dayjs(LeaveEndDate, "MM-DD-YYYY").format("DD/MM/YYYY");

    const is14AndSameDate = startTimeId === "14:00:00" && 
                            (LeaveStartDate === LeaveEndDate || 
                             formatLeaveStartDate === LeaveEndDate || 
                             LeaveStartDate === formatLeaveEndDate || 
                             formatLeaveStartDate === formatLeaveEndDate);

    if (is14AndSameDate) {
      console.log("manasa");
      return endTimeList.filter((value) => value.time !== "14:00:00");
    }
    
    return endTimeList;
};

  const filterEndTimeValues = (startTimeId) => {
    console.log(typeof(startTimeId));
    console.log(startTimeId ==="14:00:00" );
    console.log(formik.values.LeaveStartDate);
    console.log(formik.values.LeaveEndDate);
    const formatLeaveEndDate = dayjs(formik.values.LeaveEndDate ,"MM-DD-YYYY").format("DD/MM/YYYY");
  const formatLeaveStartDate = dayjs(formik.values.LeaveStartDate ,"MM-DD-YYYY").format("DD/MM/YYYY");

    console.log(formik.values.LeaveStartDate === formik.values.LeaveEndDate );
    console.log (startDate === endDate);
    console.log (startDate );
    console.log (endDate );
    console.log ( !formik.values.LeaveStartDate);
    console.log (formatLeaveStartDate === startDate);
    console.log (endDate === formatLeaveEndDate);


    
    if (
       startTimeId === "14:00:00" && startDate === endDate
    ) {
      console.log("manasa")
      return endTimeList.filter((value) => value.time !== "14:00:00");
    }
    if (
      (!formik.values.LeaveStartDate === false)  &&  (!formik.values.LeaveEndDate === false) && startTimeId === "14:00:00" && formik.values.LeaveStartDate === formik.values.LeaveEndDate
    ) {
      console.log("manasa")
      return endTimeList.filter((value) => value.time !== "14:00:00");
    }

    if (
startTimeId === "14:00:00" && formatLeaveStartDate === endDate
    ) {
      console.log("manasa")
      return endTimeList.filter((value) => value.time !== "14:00:00");
    }

    if (
startTimeId === "14:00:00" &&  startDate === formatLeaveEndDate
    ) {
      console.log("manasa")
      return endTimeList.filter((value) => value.time !== "14:00:00");
    }
    return endTimeList; // Otherwise, return the original time2 array
  };










const halfstartTimeData = async () => {
  try {
    const formatStartDate = dayjs(startDate, "DD/MM/YYYY").format("YYYY-MM-DD");
    const response = await axios.post(
      "http://141.148.194.18:8095/leavemanagement/half-time-cal",
      {
        userId: fetchuserId,
        startTime: formatStartDate,
        typeId: 1
      },
      {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`
        }
      }
    );
    console.log(response);
    if (response.data.statusCode === 200) {
      // setStartTimecheck(response.data.result);
    }
  } catch (error) {
    // Handle errors
    console.error("Error fetching user details:", error);
  }
};


  const halfstartTimeData = async () => {
    try {
      const formatStartDate = dayjs(startDate).format("YYYY-MM-DD");
      const response = await axios.post(
        "http://141.148.194.18:8095/leavemanagement/half-time-cal",
        {
          userId:fetchuserId,
          startTime:formatStartDate,
          typeId: 1
        },
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
          }
        }
      );
           console.log(response);
      if (response.data.statusCode === 200) {
        // setStartTimecheck(response.data.result);

      }

    } catch (error) {
      // Handle errors
      console.error("Error fetching user details:", error);
    }
  };







import React, { useState } from 'react';
import { Box, Card, Grid, Typography, Avatar } from '@mui/material';

const style = {
  transition: 'opacity 0.3s ease-in-out',
  opacity: 0,
  visibility: 'hidden',
  position: 'absolute',
  top: '100%',
  left: 0,
  right: 0,
  backgroundColor: 'white',
  zIndex: 1,
};

const visibleStyle = {
  ...style,
  opacity: 1,
  visibility: 'visible',
};

const LeaveBalanceCard = ({ leaveBalance, availableLeaves, availedLeaves, balanceLeaves }) => {
  const [hover, setHover] = useState(false);

  return (
    <Card>
      <Box sx={{ flexGrow: 1, mt: 1, position: 'relative' }}>
        <Grid container spacing={2} columns={16}>
          <Grid item xs={5}>
            <Box
              onMouseEnter={() => setHover(true)}
              onMouseLeave={() => setHover(false)}
            >
              <Grid container spacing={2}>
                <Grid item xs={12} sm container>
                  <Grid item xs container direction="column" spacing={2}>
                    <Grid item xs>
                      <Typography gutterBottom component="div">
                        Available Leaves
                      </Typography>
                      <Typography variant="h6" gutterBottom>
                        {availableLeaves} DAYS
                      </Typography>
                    </Grid>
                  </Grid>
                  <Grid item>
                    <Avatar />
                  </Grid>
                </Grid>
              </Grid>
            </Box>
          </Grid>
          <Grid item xs={5}>
            <Box>
              <Grid container spacing={2}>
                <Grid item xs={12} sm container>
                  <Grid item xs container direction="column" spacing={2}>
                    <Grid item xs>
                      <Typography gutterBottom component="div">
                        Availed Leaves
                      </Typography>
                      <Typography variant="h6" gutterBottom>
                        {availedLeaves} DAYS
                      </Typography>
                    </Grid>
                  </Grid>
                  <Grid item>
                    <Avatar />
                  </Grid>
                </Grid>
              </Grid>
            </Box>
          </Grid>
          <Grid item xs={5}>
            <Box>
              <Grid container spacing={2}>
                <Grid item xs={12} sm container>
                  <Grid item xs container direction="column" spacing={2}>
                    <Grid item xs>
                      <Typography gutterBottom component="div">
                        Balance Leaves
                      </Typography>
                      <Typography variant="h6" gutterBottom>
                        {balanceLeaves} DAYS
                      </Typography>
                    </Grid>
                  </Grid>
                  <Grid item>
                    <Avatar />
                  </Grid>
                </Grid>
              </Grid>
            </Box>
          </Grid>
        </Grid>

        <Box sx={hover ? visibleStyle : style}>
          <Grid container spacing={2} columns={16}>
            {leaveBalance.map((value, index) => (
              <LeadgerCard resData={value} key={index} />
            ))}
          </Grid>
        </Box>
      </Box>
    </Card>
  );
};

export default LeaveBalanceCard;
























const [hover, setHover] = useState(false);
 {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


<Card >
                        <Box sx={{ flexGrow: 1, mt: 1, elevation: "0" }}>
                            <Grid container spacing={2} columns={16}>
                                <Grid item xs={5}>
                                    <Item  
                                    onMouseEnter={() => setHover(true)}
                                    onMouseLeave={() => setHover(false)}>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Available Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availableLeaves}DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Availed Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availedLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Balance Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {balanceLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                            </Grid>


                            {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


                        </Box>

                    </Card>






import React, { useState, useEffect, useRef } from 'react'
import SearchTable from '../../../components/SearchTableAlt';
import { Box, Card, CardContent, IconButton, Stack, Button, Link, Dialog, DialogContent, TextField, DialogActions } from '@mui/material';
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import WalletIcon from '@mui/icons-material/Wallet';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns'
import Loader from '../../../components/Loader';
import GpsFixedIcon from '@mui/icons-material/GpsFixed';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import dayjs from 'dayjs';
import Cookies from "js-cookie";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import CachedIcon from "@mui/icons-material/Cached";
import SearchIcon from "@mui/icons-material/Search";
import SummarizeIcon from '@mui/icons-material/Summarize';
import swal from "sweetalert";
import { useLocation } from "react-router";
import { useSnackbar } from "../../../components/Snackbar";
import LeadgerCard from './LedgerCard';
import { Grid, Typography, Avatar, Paper } from '@mui/material';
import { styled } from "@mui/material/styles";
const FileLeave = () => {


    const title = 'Leave Applications';
    const title2 = 'Search Parameters';

    useTitle(title);


    const navigate = useNavigate();
    const { showSnackbar } = useSnackbar();
    const user = useSelector((state) => state.loginReducer);
    console.log(user.data.userdetails.user.userId);
    const userId = user.data.userdetails.user.userId;
    const [tableData, setTableData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [leaveBalance, setLeaveBalalnce] = useState([]);
    const [availableLeaves, setAvailableLeaves] = useState();
    const [availedLeaves, setAvailedLeaves] = useState();
    const [balanceLeaves, setBalanceLeaves] = useState();
    const [open, setOpen] = React.useState(false);
    const [requestStatus, setRequestStatus] = useState(null);
    const [reqRemarks, setReqRemarks] = useState(null);
    const [dubby, setDubby] = useState();
    const [selectAllApplications, setSelectAllApplications] = useState(false);
    const resetCheck = useRef();
    const location = useLocation();
    const [hover, setHover] = useState(false);

    const Item = styled(Paper)(({ theme }) => ({
        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
        ...theme.typography.body2,
        padding: theme.spacing(1),
        margin: 3,
        borderRadius: "10px",
        textAlign: 'center',
        color: theme.palette.text.secondary,
    }));
    const style = {
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 700,
        bgcolor: 'background.paper',
        border: '05 px solid #000',
        boxShadow: 24,
        p:2
       
      };


    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };



    const handleNavigation = () => {
        console.log('called');
        navigate('/leave')
    }




    const fetchDataOnLeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            }

            const response = await axios.post(`http://141.148.194.18:8052/leavemanagement/leave-balance-dropdown`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            let sortedLeaveBallenceData = response.data.result.map((value) => {
                return value;
            })

            setLeaveBalalnce(sortedLeaveBallenceData);
            console.log(sortedLeaveBallenceData);


            //   if (response.status === 200) {


            //   }
        } catch (error) {
            console.error(error)
        }

    }

    const LeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            }

            const response = await axios.post(`http://141.148.194.18:8095/leavemanagement/leave-balances`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            if (response.data.statusCode === 200) {
                setAvailableLeaves(response.data?.result.availableLeaves);
                setAvailedLeaves(response.data?.result.availedLeaves);
                setBalanceLeaves(response.data?.result.balanceLeaves);

            }

            console.log(response);


        } catch (error) {
            console.error(error)
        }

    }


    useEffect(() => {

        setIsLoading(true);
        fetchDataOnLeaveBalance();
        LeaveBalance();
    }, [])



    const validationSchema = Yup.object().shape({

        LeaveStartDate: Yup.string().required("Leave Start Date is required").nullable(),
        LeaveEndDate: Yup.string().required("Leave End Date is required").nullable(),
    });


    const formik = useFormik({
        initialValues: {

            LeaveStartDate: null,
            LeaveEndDate: null,

        },
        validationSchema: validationSchema,
        enableReinitialize: true,
        onSubmit: (values) => {
            console.log(values)

        },
    });
    console.log(formik.values.LeaveStartDate);
    console.log(formik.values.LeaveEndDate);



    const handleResetForm = () => {

        swal({
            title: "Do you want to reset the search?",
            buttons: { cancel: "Cancel", confirm: "Confirm" },
        }).then((userClickedConfirm) => {
            if (userClickedConfirm) {
                console.log(userClickedConfirm)
                formik.setFieldValue("LeaveStartDate", null);
                formik.setFieldValue("LeaveEndDate", null);
                resetCheck.current = true
                // setTableData([]);
                handleFetchData();

            }

        })

    };

    const handleFetchData = async () => {

        try {
            const payload = {
                userId: userId,
                rqstFrom: resetCheck.current ? null : formik.values.LeaveStartDate,
                rqstTo: resetCheck.current ? null : formik.values.LeaveEndDate
            }

            const response = await axios.post("http://141.148.194.18:8052/leavemanagement/leave-applied-leaves", payload,
                {
                    headers: {
                        Authorization: `Bearer ${Cookies.get("token")}`
                    }
                });
            const formattedData = response.data.result.map((item, index) => {
                const fromDate = item.rqstFromDate + ":" + item.rqstFromTime;
                const toDate = item.rqstToDate + ":" + item.rqstToTime;
                return {
                    ...item,
                    index: index + 1,
                    fromDate: fromDate,
                    toDate: toDate,
                };

            });

            setTableData(formattedData);
            console.log('kp-tableDataResponse', response.data);



            // setTableData(response.data.result);
            if (response.data.status === true) {

                console.log('kparyan', tableData);
                console.log('kp-tableData2', tableData);
                showSnackbar("Data fetched successfully", "success");

            }
        } catch (error) {

            console.error(error);
        }
        finally {
            setIsLoading(false);
            resetCheck.current = false
        }
    }

    useEffect(() => {
        handleFetchData();
        setIsLoading(true);
    }, [])

    console.log('kp-tableDataAfter', tableData)
    const columns = [
        {
            field: "index", //keep this fixed, index should be present for all tables
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "rqstId",
            headerName: "Leave ID",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link
                    sx={{ cursor: "pointer" }}
                    onClick={() => {
                        const requestId = params.row.rqstId;
                        navigate("/leaveapplicationview", { state: { requestId } });
                    }}
                >
                    {params.value}
                </Link>
            ),
        },
        {
            field: "leaveTypeDesc",
            headerName: "Leave Type",
            flex: 0.3,
            minWidth: 160,
            headerClassName: "super-app-theme--header",
        },



        {
            field: "fromDate",
            headerName: "Leave Start",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "toDate",
            headerName: "Leave End",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "daysOfLeave",
            headerName: "Leave Duration",
            flex: 0.3,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstStatusDesc",
            headerName: "Leave Current Status",
            flex: 0.3,
            minWidth: 240,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "requestStatus",
            headerName: "Track Status",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link onClick={() => {
                    setReqRemarks(params.row.remarks);
                    setRequestStatus(params.value);
                    handleClickOpen();
                    setDubby(params.row.rqstId);
                }}>
                    <GpsFixedIcon color='primary' />
                </Link>
            )
        },


    ];




    console.log('kp-tabledata3', tableData)
    return (
        <>
            {
                isLoading && <Loader />
            }
            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <WalletIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Leave Balance</H3>
                    </div>
                    <Card >
                        <Box sx={{ flexGrow: 1, mt: 1, elevation: "0" }}>
                            <Grid container spacing={2} columns={16}>
                                <Grid item xs={5}>
                                    <Item  
                                    onMouseEnter={() => setHover(true)}
                                    onMouseLeave={() => setHover(false)}>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Available Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availableLeaves}DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Availed Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availedLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Balance Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {balanceLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    {/* Render the dynamically chosen icon */}
                                                    <Avatar >

                                                    </Avatar>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                            </Grid>


                            {hover && (
                                <Box sx={style}>
                            <Grid container spacing={2} columns={16}>
                                {leaveBalance.map((value, index) => (<LeadgerCard resData={value} key={index} />))}

                            </Grid>
                            </Box>
                            )}


                        </Box>

                    </Card>
                    <Grid sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                        <Button sx={{ float: 'right', borderRadius: '4px' }} variant={'contained'} onClick={handleNavigation}>Apply for a new leave</Button>
                    </Grid>

                </CardContent>
            </Card>


            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>

                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <SummarizeIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end"> Leave Applications</H3>
                    </div>
                    <Box component={"div"} >

                        <SearchTable
                            columns={columns}
                            data={tableData}
                            isCheckbox={false}
                            isHideDensity={false}
                            isHideExport={true}
                            isHideFilter={true}
                            isHideColumn={true}
                            isHidePaging={false}
                            name="abc"
                            id="hjjh"
                        />
                    </Box>
                </CardContent>
            </Card>
            <Dialog
                fullWidth
                maxWidth={'md'}
                open={open}
                onClose={handleClose}
            >
                <DialogContent >
                    <TrackLeaveRequestStatus rqstId={dubby} />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Close</Button>

                </DialogActions>
            </Dialog>
        </>
    )
}

//aryan
export default FileLeave
