import * as React from "react";
import Avatar from "@mui/material/Avatar";
import Button from "@mui/material/Button";
import CssBaseline from "@mui/material/CssBaseline";
import TextField from "@mui/material/TextField";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import Link from "@mui/material/Link";
import Paper from "@mui/material/Paper";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import LockOutlinedIcon from "@mui/icons-material/LockOutlined";
import Typography from "@mui/material/Typography";
import { Routes, Route, useNavigate } from "react-router-dom";
import { sha256 } from 'js-sha256';

import logo_left from "../../assets/images/logo_left.png";
import logo_right from "../../assets/images/logo_right.png";
import { TextFields } from "@mui/icons-material";
import blue_bg from "../../assets/images/BLUE_BG.jpg";
import { border } from "@mui/system";
import { grey } from '@mui/material/colors';
import { useRef } from "react";
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { loginUser } from "../../redux/actions/LoginAction";
import {styled} from "@mui/material"
import { Newapplicant,ExistingApplicant } from "../../Schema/Validationschema";
import { useFormik } from "formik";
import Snackbar from '@mui/material/Snackbar';
import "react-alert-confirm/lib/style.css";
import AlertConfirm, { Button1 } from "react-alert-confirm";
import {

  Slide, Alert,


} from "@mui/material";
import {
  Card,
  CardContent,
  Autocomplete,

  RadioGroup,
  Radio,
  FormControl,
} from "@mui/material";
import FormLabel from "@mui/material/FormLabel";
const drawerWidth = 280;

const Footer = styled('div', {

    shouldForwardProp: (prop) => prop !== 'open',

})(({ theme, open }) => ({

    transition: theme.transitions.create(['margin', 'width'], {

        easing: theme.transitions.easing.sharp,

        duration: theme.transitions.duration.leavingScreen,

    }),

    width: '100%',

    position: 'fixed',

    top: 'unset',

    bottom: 0,

    color: 'white',

    backgroundColor: 'black',

    textAlign: 'center',

    size: '8px',

    ...(open && {

        width: `calc(100% - ${drawerWidth}px)`,

        marginLeft: `${drawerWidth}px`,

        transition: theme.transitions.create(['margin', 'width'], {

            easing: theme.transitions.easing.easeOut,

            duration: theme.transitions.duration.enteringScreen,

        }),

    }),

}));

function Copyright(props) {
  return (
    <Typography
      variant="body2"
      color="text.secondary"
      align="center"
      {...props}
    >
      {"Copyright Â© "}
      <Link
        color="inherit"
        href="https://www.ysraarogyasri.ap.gov.in/"
        target="_blank"
      >
        Dr.YSR Aarogyasri Health Care Trust
      </Link>{" "}
      {new Date().getFullYear()}
      {"."}
    </Typography>
  );
}

export default function Login() {

  const navigate = useNavigate();

  const formik = useFormik({
    initialValues: {
name:"",
email:"",
aadharNum:"",
mobileNumber:""
    },
    enableReinitialize: true,
    validationSchema: Newapplicant,
    onSubmit: (values, { resetForm }) => {
      saveRegisterPatient();
    },
  });

  const formik2 = useFormik({
    initialValues: {
applicantid:"",
otp:""
    },
    enableReinitialize: true,
    validationSchema: ExistingApplicant,
    onSubmit: (values, { resetForm }) => {
      saveexistanceapplicant();
    },
  });
  const [visible, setVisible] = useState(false);
  const [visible2, setVisible2] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [openToast, setOpenToast] = useState(false);
  const [toastSeverity, setToastSeverity] = useState("info");
  const[otpfield,setotpfield]=useState(false)
  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
        return;
    }

    setOpenToast(false);
};
function TransitionLeft(props) {
  return <Slide {...props} direction="left" />;
}
  const navigateToHome = () => {
    navigate("/BasicEmploymentForm");
  };
  const saveRegisterPatient = (event) => {
    event.preventDefault();
    const touched = Object.keys(formik.initialValues).reduce((result, item) => {
      result[item] = true;
      return result;
    }, {});
    // Touch all fields without running validations
    formik.setTouched(touched, false);
    formik.setSubmitting(true);

    formik
      .validateForm()
      .then((formErrors) => {
        if (Object.keys(formErrors).length > 0) {
          setToastMessage("Please Enter Required Fields")
          setToastSeverity("error");
          setOpenToast(true);

          //showSnackbar("Please enter all required fields", "error");
        } else {
         callConfirmDialog();
        }
      })
      .catch((err) => {
        formik.setSubmitting(false);
      });
  };

  const saveexistanceapplicant = (eventt) => {
    eventt.preventDefault();
    const touched = Object.keys(formik2.initialValues).reduce((result, item) => {
      result[item] = true;
      return result;
    }, {});
    // Touch all fields without running validations
    formik2.setTouched(touched, false);
    formik2.setSubmitting(true);

    formik2
      .validateForm()
      .then((formErrors) => {
        if (Object.keys(formErrors).length > 0) {
          setToastMessage("Please Enter Required Fields")
          setToastSeverity("error");
          setOpenToast(true);

          //showSnackbar("Please enter all required fields", "error");
        } else {
          setotpfield(true)
         Applicationvalidation();
        }
      })
      .catch((err) => {
        formik2.setSubmitting(false);
      });
  };

  const callConfirmDialog = async () => {
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to submit your application!",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });
    if (action) {
      registerPatient();
    } else {
      
    }
  };
  const registerPatient = async (data) => {
    console.log("submit", );
        callConfirmDialogMessage("Applicantion Id is : 12345");
  };
  const callConfirmDialogMessage = async (strMessage) => {
    AlertConfirm.config({
      okText: "Ok",
    });
    const [action] = await AlertConfirm.alert(
      <span>{strMessage}</span>
    );
    action &&  navigate("/BasicEmploymentForm");
  };
  const Applicationvalidation = async ()=>{
    console.log("one")
    setotpfield(true)
  }
  const handleSubmit = (e) => {
console.log("hii")
  };


  return (
    <Grid container component="main" sx={{ height: "100vh" }}>
      <Grid
        item
        xs={12}
        sm={12}
        lg={12}
        md={12}
        sx={{
          // backgroundImage: `url(${blue_bg})`,
          backgroundRepeat: "no-repeat",
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        <Grid display='flex' justifyContent='center' alignItems='center' height='100vh'>
          <Grid container xs={12} sm={10} lg={10} md={10} m={8}  >
            <Grid
              item
              xs={8}
              md={5}
              sx={{
                // height: "80vh", //remove
                spacing: 0,
                backgroundColor: "#F1F8FF",
                // borderRight: "1px solid #CDE6FF",
                borderRadius: "5px 0 0 5px",
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                // paddingRight: 2
              }}
            >

            </Grid>
            <Grid
              item
              xs={8}
              md={7}
              sx={{
                // height: "80vh",//rem
                spacing: 0,
                backgroundColor: "#F1F8FF",
                borderRight: "1px solid #CDE6FF",
                borderRadius: "0 5px 5px 0"
              }}
            >
              <Box component="form" onSubmit={formik.handleSubmit} noValidate>
               
              <div>
                    <Snackbar
                        open={openToast}
                        autoHideDuration={6000}
                        anchorOrigin={{ vertical: "top", horizontal: "right" }}
                        onClose={handleClose}
                        TransitionComponent={TransitionLeft}
                    >
                        <Alert onClose={handleClose} severity={toastSeverity} sx={{ width: '100%', padding: { sm: '15px', xs: '10px' }, borderRadius: '15px', fontSize: { sm: '16px', xs: '14px' }, boxShadow: "0 0 10px #999", marginTop: { sm: '25px', xs: '20px' } }}>
                            {toastMessage}
                        </Alert>
                    </Snackbar>
                </div>
                <Grid m={4}>
                <Grid
                container
                direction="row"
                rowSpacing={0}
                columnSpacing={2}
                justify="flex-end"
                alignItems="center"
              >
                
                <Grid item>
                  <FormControl>
                    <RadioGroup
                      row
                      aria-labelledby="demo-row-radio-buttons-group-label"
                      name="options"
                      required
                    
                      //onBlur={formik.handleBlur}
                    >
                      <FormControlLabel
                        value="true"
                        type="radio"
                        control={<Radio />}
                        label="New Applicant"
                        onClick={() => { setVisible(true)
                          setVisible2(false)
                      
            
                        }}
                      />

                      <FormControlLabel
                        value="false"
                        type="radio"
                        control={<Radio />}
                        label="Existing Applicant"
                        onClick={() => { setVisible(false)
                          setVisible2(true)
                      
            
                        }}
                      />
                    </RadioGroup>
                  </FormControl>
                </Grid>
             
            
              </Grid>
              {visible && (
                <>
                 <Grid container direction="row" rowSpacing={2} columnSpacing={2}>
                 <Grid item xs={12} sm={6} md={6} lg={6}>
                  <TextField
                    id="name"
                    label="Name"
                    size="small"
                    name="name"   
                    sx={{ width: "100%", mt: 1 }}
                    value={formik.values.name}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.name && Boolean(formik.errors.name)
                    }
                    helperText={formik.touched.name && formik.errors.name}
                   
               
                  />
                </Grid>
                <Grid item xs={12} sm={6} md={6} lg={6}>
                  <TextField
                    id="email"
                    label="Email"
                    size="small"
                    name="email"
                    sx={{ width: "100%", mt: 1 }}
                    value={formik.values.email}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.email && Boolean(formik.errors.email)
                    }
                    helperText={formik.touched.email && formik.errors.email}
      
                  />
                </Grid>
                <Grid item xs={12} sm={6} md={6} lg={6}>
                  <TextField
                    id="mobileNumber"
                    label="Mobile Number"
                    size="small"
                    name="mobileNumber"
                    inputProps={{
                      maxLength: 10,
                    }}
                    type="number"
                    sx={{ width: "100%", mt: 1 }}
                    value={formik.values.mobileNumber}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.mobileNumber && Boolean(formik.errors.mobileNumber)
                    }
                    helperText={formik.touched.mobileNumber && formik.errors.mobileNumber}
      
                  />
                </Grid>
                <Grid item xs={12} sm={6} md={6} lg={6}>
                  <TextField
                    id="aadharNum"
                    label="Aadhar Number"
                    size="small"
                    name="aadharNum"
                    inputProps={{
                      maxLength: 12,
                    }}
                    type="number"
                    sx={{ width: "100%", mt: 1 }}
                    value={formik.values.aadharNum}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.aadharNum && Boolean(formik.errors.aadharNum)
                    }
                    helperText={formik.touched.aadharNum && formik.errors.aadharNum}
      
      
                  />
                </Grid>
                </Grid>

                <Box
                    spacing={2}
                    sx={{ mt: 1, textAlign: 'center' }}
                >
                    <Button
                        sx={{
                            minWidth: 100, ml: 1, mt: { xs: 1, md: 0 }
                        }}
                        variant="contained"
                        type="submit"
                        onClick={saveRegisterPatient}
                    >
                        SUBMIT
                        
                    </Button>

                </Box>

</>
              )}
              </Grid>
              </Box>


              <Box component="form" onSubmit={formik2.handleSubmit} noValidate>
              {visible2 && (
                <>
              <Grid m={4}>
                <Grid
                container
                direction="row"
                rowSpacing={0}
                columnSpacing={2}
                justify="flex-end"
                alignItems="center"
              >
           
               
                 <Grid container direction="row" rowSpacing={2} columnSpacing={2}>
                 <Grid item xs={12} sm={6} md={6} lg={6}>
                  <TextField
                    id="applicantid"
                    label="Enter Application Number"
                    size="small"
                    name="applicantid"
                    sx={{ width: "100%", mt: 1 }}
                    value={formik2.values.applicantid}
                    onChange={formik2.handleChange}
                    error={
                      formik2.touched.applicantid && Boolean(formik2.errors.applicantid)
                    }
                    helperText={formik2.touched.applicantid && formik2.errors.applicantid}
      
                  />
                </Grid>
           {otpfield &&(
              
              <Grid item xs={12} sm={6} md={6} lg={6}>
              <TextField
                id="otp"
                label="Enter OTP"
                size="small"
                name="otp"
                sx={{ width: "100%", mt: 1 }}
                value={formik2.values.otp}
                onChange={formik2.handleChange}
                // error={
                //   formik2.touched.otp && Boolean(formik2.errors.otp)
                // }
                // helperText={formik2.touched.otp && formik2.errors.otp}
  
              />
            </Grid>
           )}
                    
                </Grid>

                <Box
                    spacing={2}
                    sx={{ mt: 1, textAlign: 'center' }}
                >
                    <Button
                        sx={{
                            minWidth: 100, ml: 1, mt: { xs: 1, md: 0 }
                        }}
                        variant="contained"
                        type="submit"
                        onclick={saveexistanceapplicant}
                    >
                        SUBMIT
                        
                    </Button>

                </Box>


              
              

              </Grid>
                </Grid>
                </>
                )}

              </Box>


           
            </Grid>
          </Grid>
        </Grid>
      </Grid>
      <Footer position='fixed' >

                <Typography noWrap component="div">

                    {/* CMS {location.pathname} */}

                    &copy; Site maintained by KPMG Advisory Services Pvt. Ltd. The contents are owned by Govt. Of AP , India.

                </Typography>

            </Footer>
    </Grid>
  );
}

