
import React, { useEffect, useState } from "react";
import axios from "axios";
import Cookies from "js-cookie";
import SearchTable from "../../components/SearchTableAlt";
import { useNavigate, useLocation } from "react-router";
import {
    Card,
    CardContent,
    TextField,
    Autocomplete,
    Grid,
    Box,
    Button,
    Radio,
    RadioGroup,
    FormControl,
    FormLabel,
    FormControlLabel,
    Link,
    Stack,
    Checkbox,
} from "@mui/material";
import swal from "sweetalert";
import { useFormik } from "formik";
//Icons
import CachedIcon from "@mui/icons-material/Cached";
import SearchIcon from "@mui/icons-material/Search";

import useTitle from '../../hooks/useTitle';
import PageTitle from '../../layouts/PageTitle';

import FaceBookCircularProgress from "../../components/FaceBookCircularProgress";
import { useSnackbar } from "../../components/Snackbar";
import { applicationSubmittedId } from "./constants";
export const initValues = {
    userName: "",
    loginName: "",
    empCode: null,
    enrollmentStatus: null,

};

const SearchApplication = () => {
    //export default function SearchApplication() {
    useTitle("Employee Enrollment Forms ");
    const title = "Search Parameters";
    const title1 = "Form Details";

    const { showSnackbar } = useSnackbar();
    const [rows, setRows] = useState([]);
    const navigate = useNavigate();
    const [selectAllApplications, setSelectAllApplications] = useState(false);
    const [actionForIds, setActionForIds] = useState(null); //Applicant Ids
    const [loading, setLoading] = useState(false);
    const location = useLocation();
    const [searchedValues, setSearchedValues] = useState(
        location.state?.searchValues ? location.state?.searchValues : initValues
    );

    const handleCheckboxChange = (index) => {
        const updatedRows = rows.map((row) =>
            row.index === index
                ? { ...row, checkboxChecked: !row.checkboxChecked }
                : row
        );
        setRows(updatedRows);
        //Checking if all the checkboxes are selected now
        const allSelected = updatedRows.every((row) => row.checkboxChecked);
        setSelectAllApplications(allSelected);
    };

    const handleSelectAllApplications = (event) => {
        setSelectAllApplications(event.target.checked);
        const updatedRows = rows.map((row) => ({
            ...row,
            //checkboxChecked: event.target.checked,
            checkboxChecked:
                row.statusId === applicationSubmittedId ? event.target.checked : null,
        }));
        setRows(updatedRows);
    };

    const isAtleastOneApplicationSelected = rows.some(
        (row) => row.checkboxChecked
    );

    const noOfApplicationsSelected = rows.filter(
        (row) => row.checkboxChecked
    ).length;

    const isAtleastOneIsSubmitted = rows.some(
        (row) => row.statusId === applicationSubmittedId
    );

    const [empCode, setEmpCode] = useState([]);
    const [Enrollstatus, setEnrollstatus] = useState([]);

    const [actionDialogOpen, setActionDialogOpen] = useState(false);


    useEffect(() => {


        axios.get(`${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/emp-code-dropdown`, {
            headers: {
                Authorization: `Bearer ${Cookies.get("token")}`
            }
        }).then(response => {
            let sortedEmpCode = response.data.result.map((value) => {
                value = value
                return value;

            })
            console.log(sortedEmpCode);
            setEmpCode(sortedEmpCode)

        })
            .catch(error => {
                setEmpCode([]);
                console.log(error);
            });


        axios
            .get(
                `${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/enrollment-status-dropdown`,
                {
                    headers: {
                        Authorization: `Bearer ${Cookies.get("token")}`
                    },

                }
            )
            .then((response) => {
                let sortedEnrollmentStatus;
                if (
                    Object.keys(response.data).includes("result") &&
                    Array.isArray(response.data.result)
                ) {
                    sortedEnrollmentStatus = response.data.result.map((value) => ({
                        label: value.label,
                        id: value.id,
                    }));
                    setEnrollstatus(sortedEnrollmentStatus);
                }
                console.log("Status List: ", sortedEnrollmentStatus);
            })
            .catch((error) => {
                setEnrollstatus([]);
                console.log(error);
            });


    }, []);

    useEffect(() => {
        handleFetchApplicants(formik.values, false);
    }, []);

    const handleFetchApplicants = async (values, reset) => {
        setLoading(true);
        try {
            console.log("Fetching applicants details for:", values);
            const payload = {
                
                loginName: values.loginName,
                userName: values.userName,
                empCode: values.empCode,
                enrollmentStatusId: values.enrollmentStatus,

            };
            console.log("Payload for fetching applicants:", payload);

            const response = await axios.post(
                `${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/user-details-admin`,
                payload,
                {
                    headers: {
                        Authorization: `Bearer ${Cookies.get("token")}`
                    },
                }
            );
            console.log("Applicants data:", response.data.result);
            // if(Object.keys(response.data)   Array.isArray(response.data.result)) {
            setLoading(false);
            if (response.data.statusCode === 200) {
                setRows(
                    response.data.result.map((item, index) =>
                        createData(
                            // false,
                            index + 1,
                            item.loginName,
                            item.username,
                            item.enrollmentStatus,
                            item.dob,
                            item.empCode,
                            item.emailId

                        )
                    )
                );

                if (reset) {
                    showSnackbar("Reset successful", "info");
                } else {
                    showSnackbar("Data fetched successfully", "success");
                }
            } else if (response.data.statusCode === 404) {
                setRows([]);
                if (reset) {
                    showSnackbar("Form reset successful,no data found", "info");
                } else {
                    showSnackbar("No data found", "info");
                }
            } else {
                setRows([]);
                showSnackbar("An error occurred", "error");
            }
        } catch (error) {
            console.error("An error occurred:", error);
            setRows([]);
            setLoading(false);
            showSnackbar("Opps, something went wrong", "error");
        }
    };

    // For table
    function createData(
        index,
        loginName,
        username,
        enrollmentStatus,
        dob,
        empCode,
        emailId,


    ) {
        return {
            index,
            loginName,
            username,
            enrollmentStatus,
            dob,
            empCode,
            emailId,

        };
    }
    const columns = [

        {
            field: "index",
            headerName: "S.No",
            flex: 0.1,
            minWidth: 40,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => params.row.index + ")",
        },
        {
            field: "loginName",
            headerName: "Login Name",
            flex: 0.2,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "username",
            headerName: "User Name",
            flex: 0.2,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "enrollmentStatus",
            headerName: "Enrollment Status",
            flex: 0.1,
            minWidth: 200,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "dob",
            headerName: "D.O.B.",
            flex: 0.2,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "empCode",
            headerName: "Emp Code",
            flex: 0.2,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "emailId",
            headerName: "Email ID",
            flex: 0.1,
            minWidth: 150,
            headerClassName: "super-app-theme--header",
        },



    ];
    const updatedColumns = columns.filter(
        (column) => column.field !== "selectId" && column.field !== "action"
    );

    const formik = useFormik({
        initialValues: searchedValues,
        enableReinitialize: false,
        validateOnChange: true,
        //validateOnBlur: true,

        onSubmit: (values) => {
            console.log("onSubmit Start");
            handleFetchApplicants(values, false);
            setSearchedValues(values);
            //navigate(location.pathname, { state: { searchValues: values } });
        },
    });

    const handleResetForm = () => {
        swal({
            title: "Do you want to reset the search?",
            buttons: { cancel: "Cancel", confirm: "Confirm" },
        }).then((userClickedConfirm) => {
            if (userClickedConfirm) {
                setSelectAllApplications(false);

                const updatedValues = { ...initValues, status: null };
                formik.resetForm({ values: updatedValues });
                handleFetchApplicants(updatedValues, true);
                navigate(location.pathname, {});
            }
        });
    };

    //
    const handleAction = (applicantId) => {
        setActionForIds([applicantId]);
    };
    const handleBulkAction = () => {
        const idsList = rows
            .filter((row) => row.checkboxChecked)
            .map((row) => row.applicantId);
        setActionForIds(idsList);
    };

    return (
        <>
            <Card sx={{ mx: 5, my: 2 }}>
                <CardContent>
                    <PageTitle name={title} />
                    <Box component="form" onSubmit={formik.handleSubmit} noValidate>
                        {/* <form onSubmit={formik.handleSubmit}> */}
                        <Grid
                            container
                            //rowSpacing={1}
                            columnSpacing={2}
                        >
                            <Grid item xs={12} sm={4} md={3} lg={3}>
                                <TextField
                                    id="username"
                                    name="username"
                                    label="User Name."
                                    size="small"
                                    fullWidth
                                    inputProps={{
                                        maxLength: 50,
                                    }}
                                    value={formik.values.username}
                                    onChange={formik.handleChange}

                                />
                            </Grid>
                            <Grid item xs={12} sm={4} md={3} lg={3}>
                                <TextField
                                    id="loginName"
                                    name="loginName"
                                    label="Login Name"
                                    size="small"
                                    fullWidth
                                    inputProps={{
                                        maxLength: 50,
                                    }}
                                    value={formik.values.loginName}
                                    onChange={formik.handleChange}

                                />
                            </Grid>

                            <Grid item xs={12} sm={4} md={3} lg={3}>
                                <Autocomplete
                                    size="small"
                                    fullWidth
                                    id="employeeCode"
                                    options={empCode}
                                    value={formik.values.empCode}
                                    onChange={(e, value) => {
                                        formik.setFieldValue("empCode", value ?? null);
                                    }}
                                    getOptionLabel={(value) => value}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label="Employee Code"
                                            name="empCode"
                                            InputProps={{
                                                ...params.InputProps,
                                                inputProps: {
                                                    ...params.inputProps,
                                                    maxLength: 50,
                                                },
                                            }}
                                        />
                                    )}
                                />
                            </Grid>
                            <Grid item xs={12} sm={4} md={3} lg={3}>
                                <Autocomplete
                                    size="small"
                                    fullWidth
                                    id="enrollmentStatus"
                                    options={Enrollstatus}
                                    value={
                                        Enrollstatus.find(
                                            (option) => option.id === formik.values.enrollmentStatus
                                        ) || null
                                    }
                                    onChange={(e, value) => {
                                        formik.setFieldValue("enrollmentStatus", value?.id ?? null);
                                    }}
                                    getOptionLabel={(value) => value.label}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            label="Erollment Status"
                                            name="enrollmentStatus"
                                            InputProps={{
                                                ...params.InputProps,
                                                inputProps: {
                                                    ...params.inputProps,
                                                    maxLength: 50,
                                                },
                                            }}

                                        />
                                    )}
                                />
                            </Grid>



                        </Grid>
                        <Stack
                            direction="row"
                            spacing={2}
                            justifyContent="center"
                        //mt={2}
                        >
                            <Button
                                variant="contained"
                                //onClick={handleFetchApplicants}
                                type="submit"
                            >
                                <SearchIcon />
                                &nbsp;SEARCH
                            </Button>
                            <Button
                                variant="outlined"

                                onClick={handleResetForm}
                            >
                                <CachedIcon />
                                &nbsp;RESET
                            </Button>
                        </Stack>
                        {/* </form> */}
                    </Box>
                </CardContent>
            </Card>

            {Array.isArray(rows) && rows.length >= 1 && (
                <Card sx={{ mx: 5 }} elevation={3}>
                    <CardContent>
                        <PageTitle name={title1} />
                        <Box component={"div"}>

                            <SearchTable
                                initialNoOfRows={10}
                                // disablePrint={rows.length > 100 ? true : false}
                                disablePrint={true}
                                //columns={isAtleastOneIsSubmitted ? columns : updatedColumns}
                                columns={columns}
                                data={rows}
                                isCheckbox={false}
                                isHideDensity={false}
                                isHideExport={true}
                                isHideFilter={true}
                                isHideColumn={true}
                                isHidePaging={false}
                                //selectRowsOption={true}
                                //handleApplications={handleApplications}
                                name="applicantDetails"
                                id="applicantDetails"
                            />
                        </Box>
                    </CardContent>
                </Card>
            )}

            {loading && <FaceBookCircularProgress />}
        </>
    );
};

export default SearchApplication;
