import BadgeIcon from "@mui/icons-material/Badge";
import PaymentsIcon from "@mui/icons-material/Payments";
import {
  Alert, AlertTitle,Box,Card, CardContent, Divider,Grid, Modal, Slide, TextField,Typography,
} from "@mui/material";
import Autocomplete from "@mui/material/Autocomplete";
import Button from "@mui/material/Button";
import Snackbar from "@mui/material/Snackbar";
import { styled } from "@mui/material/styles";
import { makeStyles } from "@mui/styles";
import axios from "axios";
import { useFormik } from "formik";
import Cookies from "js-cookie";
import React, { useEffect, useRef, useState } from "react";
import AlertConfirm from "react-alert-confirm";
import "react-alert-confirm/lib/style.css";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import * as Yup from "yup";
import { useSnackbar } from "../../components/Snackbar";
import { H3 } from "../../components/Typography";
function TransitionLeft(props) {
  return <Slide {...props} direction="left" />;
}
const styleAlertOpenSave = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  // width: 600,
  bgcolor: "background.paper",
  // border: '2px solid #000',
  boxShadow: 24,
  // p: 4,
};
const useStyles = makeStyles({
  cookieAlert: {
    position: "absolute",
    bottom: 0,
    right: 0,
    margin: "20px",
    width: "300px",
  },
});
const useAlertSaveStyles = makeStyles({
  cookieAlert: {
    "& .MuiAlert-icon": {
      fontSize: 40,
    },
  },
});
const PayEntitlement = ({ formData, setFormData, prevData, onButtonClick, view }) => {
  const classes = useAlertSaveStyles();
  const { showSnackbar } = useSnackbar();
  const user = useSelector((state) => state.loginReducer);
  const navigate = useNavigate();
  const [bankName, setBankName] = useState("");
  const [lengthdesabled, setLengthdesabled] = useState();
  const [branchName, setBranchName] = useState("");
  const [enteredValue, setEnteredValue] = useState("");
  const [accountList, setAccountList] = useState([]);
  const [hratierList, setHratierList] = useState([]);
  const [percentages, setPercentages] = useState([]);
  const [npsOpted, setNpsOpted] = useState([]);
  const [medicalStop, setMedicalStop] = useState([]);
  const [daStop, setDaStop] = useState([]);
  const [ctaAllowanceApplicable, setCtaAllowanceApplicable] = useState([]);
  const [openToast, setOpenToast] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [toastSeverity, setToastSeverity] = useState("info");
  const [resultList, setResultList] = useState([]);
  const [ctaentitlementList, setCtaentitlementList] = useState([]);
  const [updatedDeductionAmounts, setUpdatedDeductionAmounts] = useState({});
  const [entitlementDetails, setEntitlementDetails] = useState([]);
  const [deductionDetails, setDeductionDetails] = useState([]);
  const [updatedAmounts, setUpdatedAmounts] = useState({});
  const [passbookUploadedFile, setPassbookUploadedFile] = useState(null);
  const [requirePassbook, setRequirePassbook] = useState(false);
  const [checkboxChecked, setCheckboxChecked] = useState(false);
  const [istableDisabled, setIsTableDisabled] = useState(false);
  const [isSubmitDisabled, setIsSubmitDisabled] = useState(false);
  const [openAlertSave, setOpenAlertSave] = React.useState(false);
  const [showNext, setShowNext] = useState(view);
  const [isOtpButtonDisabled, setIsOtpButtonDisabled] = useState(
    prevData?.disableAadhar || false
  );
  const [showOtpField, setShowOtpField] = useState(
    prevData?.showOtpField || false
  );
  const [disableAadhar, setDisableAadhar] = useState(false);
  const [showLink, setShowLink] = useState(true);
  const [payCommissionList, setPayCommissionList] = useState([]);
  const [payScaleList, setPayScaleList] = useState([]);
  //const [isSubmitButtonDisabled,setIsSubmitButtonDisabled] =useState(true);
  const [txn, setTxn] = useState("");
  const handleAlertSaveOpen = () => setOpenAlertSave(true);
  const handleAlertSaveClose = () => setOpenAlertSave(false);
  const fileInputRef = useRef(null);
  const handleButtonClick = () => {
    fileInputRef.current.click();
  };
  const handleAmountChange = (index, value) => {
    setUpdatedAmounts((prev) => ({
      ...prev,
      [index]: value,
    }));
  };
  const handleDeductionAmountChange = (index, value) => {
    setUpdatedDeductionAmounts((prev) => ({
      ...prev,
      [index]: value,
    }));
  };
  const calculateNetDeduction = () => {
    return deductionDetails.reduce((total, detail, index) => {
      const amount = parseFloat(detail.amount) || 0;
      const updatedAmount = parseFloat(updatedDeductionAmounts[index]) || 0;
      return total + (updatedAmount > 0 ? updatedAmount : amount);
    }, 0);
  };
  const calculateNetEarning = () => {
    return entitlementDetails.reduce((total, detail, index) => {
      const amount = parseFloat(detail.amount) || 0;
      const updatedAmount = parseFloat(updatedAmounts[index]) || 0;
      return total + (updatedAmount > 0 ? updatedAmount : amount);
    }, 0);
  };
  const calculateNetSalary = () => {
    return calculateNetEarning() - calculateNetDeduction();
  };
  let selectedFile = [];
  const isSubmitButtonDisabled = !(checkboxChecked && isOtpButtonDisabled);
  console.log(checkboxChecked);
  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }
    setOpenToast(false);
  };
  const validationSchema = Yup.object().shape({
    DAStop: Yup.string().required("DA Stop is required").nullable(),
    MedicalStop: Yup.string().required("Medical Stop is required").nullable(),
    NPSOpted: Yup.string().required("NPS Opted is required").nullable(),
    GPFPRANType: Yup.string().required("GPF/PRAN Type is required").nullable(),
    CTAAllowanceApplicable: Yup.string()
      .required("CTA Allowance Applicable is required")
      .nullable(),
    GovtQuarterOccupied: Yup.string()
      .required("Govt Quarter Occupied is required")
      .nullable(),
    BasicPay: Yup.string().required("Basic Pay is required").nullable(),
    PayScale: Yup.string().required("Pay Scale is required").nullable(),
    PayCommission: Yup.string()
      .required("Pay Commission is required")
      .nullable(),
  });
  const formik = useFormik({
    initialValues: {
      DAStop: "",
      MedicalStop: "",
      NPSOpted: "",
      GPFPRANType: "",
      CTAEntitlement: "",
      CTAAllowanceApplicable: "",
      HRATier: "",
      GovtQuarterOccupied: "",
      BasicPay: "",
      PayScale: "",
      PayCommission: "",
      serviceId: "",
      // Add initial values for other fields
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      // Handle form submission or API integration here
    },
  });
  console.log(formik.values.serviceId);
  const VisuallyHiddenInput = styled("input")({
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    overflow: "hidden",
    position: "absolute",
    bottom: 0,
    left: 0,
    whiteSpace: "nowrap",
    width: 1,
  });
  const handleTextfield = (e) => {
    const newValue = e.target.value;
    setEnteredValue(newValue);
  };
  const checkValid = async () => {
    formik
      .validateForm()
      .then((formErrors) => {
        if (Object.keys(formErrors).length > 0) {
          console.log(Object.keys(formErrors));
          //alert(Object.keys(formErrors))
          setToastMessage("Please fill all the required * fields");
          setToastSeverity("error");
          setOpenToast(true);
        } else {
          getEarningDetails();
          getDeductionDetails();
        }
      })
      .catch((err) => {
        formik.setSubmitting(false);
      });
  };
  useEffect(() => {
    if (formik.values.serviceId) {
      axios
        .get(
          `http://141.148.194.18:8052/payroll/employee/dropdown/pay-commission/${formik.values.serviceId}`,
          {
            headers: {
              Authorization: `Bearer ${Cookies.get("token")}`,
            },
          }
        )
        .then((response) => {
          if (response.status === 200) {
            setPayCommissionList(response.data);
          }
          console.log(response);
        })
        .catch((error) => {
          console.log(error);
        });
    }
  }, [formik.values.serviceId]);
  useEffect(() => {
    //checkEnrollmentStatus()
    entitlmentDetails();
    axios
      .get(
        `http://141.148.194.18:8052/payroll/employee/dropdown/cta-entitlement`,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      )
      .then((response) => {
        if (response.status === 200) {
          setCtaentitlementList(response.data);
        }
        //console.log(sortedAccountData);
      })
      .catch((error) => {
        setCtaentitlementList([]);
        console.log(error);
      });
    axios
      .get(`http://141.148.194.18:8052/payroll/employee/dropdown/hra-tier`, {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      })
      .then((response) => {
        if (response.status === 200) {
          setHratierList(response.data);
        }
        console.log(response);
        // setHratierList(sortedHratierData);
      })
      .catch((error) => {
        setHratierList([]);
        console.log(error);
      });
    axios
      .get(
        `http://141.148.194.18:8052/payroll/employee/entitlement/dropdown-init`,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      )
      .then((response) => {
        if (response.status === 200) {
          setNpsOpted(response.data.npsOpted);
          setMedicalStop(response.data.medicalStop);
          setDaStop(response.data.daStop);
          setCtaAllowanceApplicable(response.data.ctaAllowanceApplicable);
        }
        console.log(response);
        // setHratierList(sortedHratierData);
      })
      .catch((error) => {
        setHratierList([]);
        console.log(error);
      });
  }, []);
  const getEarningDetails = async (data) => {
    try {
      const response = await axios.post(
        "http://141.148.194.18:8052/payroll/employee/entitlement-details/payment",
        {
          basicPay: formik.values.BasicPay,
          payCommissionId: formik.values.PayCommission,
          grpId: resultList?.group?.id,
          serviceTypeId: resultList?.serviceType?.id,
          payLevelId: formik.values.PayScale,
          departmentId: resultList?.department.id,
          designationId: resultList?.designation?.id,
          ctaEntitlement: formik.values.CTAEntitlement || null,
          hraTier: formik.values.HRATier || null,
        },
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      setEntitlementDetails(response.data);
      setIsSubmitDisabled(true);
      setIsTableDisabled(true);
      console.log("aryznnn", response);
    } catch (error) {
      // setOpenAlertSave(true);
      setToastMessage(
        "Something went wrong while Saving the details, please try again."
      );
      setToastSeverity("error");
      setOpenToast(true);
    }
  };
  const getDeductionDetails = async (data) => {
    try {
      const response = await axios.post(
        "http://141.148.194.18:8052/payroll/employee/entitlement-details/deduction",
        {
          basicPay: formik.values.BasicPay,
          payCommissionId: formik.values.PayCommission,
          grpId: resultList?.group?.id,
          serviceTypeId: resultList?.serviceType?.id,
          payLevelId: formik.values.PayScale,
          departmentId: resultList?.department.id,
          designationId: resultList?.designation?.id,
          ctaEntitlement: formik.values.CTAEntitlement || null,
          hraTier: formik.values.HRATier || null,
        },
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      setDeductionDetails(response.data);
    } catch (error) {
      setToastMessage(
        "Something went wrong while Saving the details, please try again."
      );
      setToastSeverity("error");
      setOpenToast(true);
    }
  };
  const entitlmentDetails = async (data) => {
    try {
      let body = {
        refNo: localStorage.getItem("refNo"),
        //refNo: "BRD0000000000061",
      };
      console.log("the saved details  body", body);
      const res = await axios.post(
        `http://141.148.194.18:8052/payroll/employee/entitlement-data`,
        body,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      console.log("the saved details  areeeeee", res);
      if (res.status == 200) {
        console.log("the aryan ", res.data);
        // console.log("the length ", res.data.disability.length);
        setResultList(res.data);
        setLengthdesabled(res.data.disability.length);
        formik.setFieldValue("Disabled", res.data?.disability);
        formik.setFieldValue("GovtQuarterOccupied", res.data?.govtQuarterType);
        formik.setFieldValue("GPFPRANType", res.data?.gpfPranType?.label);
        formik.setFieldValue("serviceId", res.data?.serviceType?.id);
        // formik.setFieldValue(
        //   "PercentageofDisability",
        //   res.data.disability[0].percentage
        // );
        const percentages = res.data.disability.map(item => item.percentage);
        // Store the percentages in the state
        setPercentages(percentages);
      }
    } catch (error) {
      //alert("No refNo found", error);
      console.log(error.message);
    }
  };
  // console.log(formik.values.Disabled.length)
  const handleSave = async () => {
    const payEntitlementList = [];
    Object.keys(updatedAmounts).forEach((key) => {
      const index = parseInt(key);
      const amount = parseFloat(updatedAmounts[key]);
      if (amount > 0) {
        payEntitlementList.push({
          payheadId: entitlementDetails[index].payheadId,
          payheadValue: amount,
          payheadConfigId: entitlementDetails[index].payheadConfigId,
          payheadName: entitlementDetails[index].payheadName,
        });
      }
    });
    Object.keys(updatedDeductionAmounts).forEach((key) => {
      const index = parseInt(key);
      const amount = parseFloat(updatedDeductionAmounts[key]);
      if (amount > 0) {
        payEntitlementList.push({
          payheadId: deductionDetails[index].payheadId,
          payheadValue: amount,
          payheadConfigId: deductionDetails[index].payheadConfigId,
          payheadName: deductionDetails[index].payheadName,
        });
      }
    });

    entitlementDetails.forEach((item, index) => {
      if (!updatedAmounts[index]) {
        payEntitlementList.push({
          payheadId: item.payheadId,
          payheadValue: parseFloat(item.amount) || 0,
          payheadConfigId: item.payheadConfigId,
          payheadName: item.payheadName,
        });
      }
    });

    deductionDetails.forEach((item, index) => {
      if (!updatedDeductionAmounts[index]) {
        payEntitlementList.push({
          payheadId: item.payheadId,
          payheadValue: parseFloat(item.amount) || 0,
          payheadConfigId: item.payheadConfigId,
          payheadName: item.payheadName,
        });
      }
    });


    const payload = {
      //refNo: "BRD0000000000061",
      refNo: localStorage.getItem("refNo"),
      hraTier: formik.values.HRATier,
      basicPay: formik.values.BasicPay,
      isCtaApplicable: formik.values.CTAAllowanceApplicable === 329,
      ctaEntitlement: formik.values.CTAEntitlement || null,
      paylevel: formik.values.PayScale,
      pcId: formik.values.PayCommission,
      isNpsOpted: formik.values.NPSOpted === 333,
      isMedicalStop: formik.values.MedicalStop === 325,
      isDaStop: formik.values.DAStop === 327,
      payEntitlementList,
    };
    try {
      const response = await axios.post(
        "http://141.148.194.18:8052/payroll/employee/pay-entitlement",
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      console.log("Save response:", response.data);
      showSnackbar(response.data.message, "success");
      setShowNext(true);
      setOpenToast(true);
      setShowNext(true);
      onButtonClick("pagesix");
    } catch (error) {
      console.error("Error saving pay entitlement details", error);
    }
  };
  const callConfirmDialog = async () => {
    console.log('kp-confirm');
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to submit?",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });
    if (action) {
      console.log('kp-saved');
      handleSave();
    }
  };


          {istableDisabled && (
            <Card>
              <CardContent>
                <Grid
                  container
                  direction="row"
                  rowSpacing={0}
                  columnSpacing={2}
                  justify="flex-end"
                  alignItems="center"
                  sx={{ mb: 2 }}
                >
                  <div style={{ display: "flex", justifyContent: "center" }}>
                    <Grid container spacing={2}>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <div style={{ border: "0.5px solid black"}}>
                          <h6 style={{
                            padding: "6px",
                            textAlign: 'center',
                            backgroundColor: '#F0F8FF'
                          }}>Earning</h6>
                          <table
                            style={{
                              width: "100%",
                              borderCollapse: "collapse",
                              border: "1px solid #ccc",
                            }}
                          >
                            <thead>
                              <tr>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Sr. No
                                </th>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Payhead Name
                                </th>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Amount
                                </th>
                              </tr>
                            </thead>
                            <tbody>
                              {entitlementDetails.map((detail, index) => (
                                <tr key={index}>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {index + 1}
                                  </td>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {detail.payheadName}
                                  </td>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {detail.amount === "0" ? (
                                      <TextField
                                        fullWidth
                                        variant="outlined"
                                        onChange={(e) =>
                                          handleAmountChange(
                                            index,
                                            e.target.value
                                          )
                                        }
                                      />
                                    ) : (
                                      detail.amount
                                    )}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                          {/* <div
                          style={{
                            textAlign: "right",
                            padding: "8px",
                            borderTop: "1px solid #ccc",
                          }}
                        >
                          <strong>Net Earning:</strong> {calculateNetEarning()}
                        </div> */}
                        </div>
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                      <div style={{ border: "0.5px solid black"}}>
                          <h6 style={{
                            padding: "6px",
                            textAlign: 'center',
                            backgroundColor: '#F0F8FF'
                          }}>Deduction</h6>
                          <table
                            style={{
                              width: "100%",
                              borderCollapse: "collapse",
                              border: "1px solid #ccc",
                            }}
                          >
                            <thead>
                              <tr>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Sr. No
                                </th>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Payhead Name
                                </th>
                                <th
                                  style={{
                                    border: "1px solid #ccc",
                                    padding: "8px",
                                  }}
                                >
                                  Amount
                                </th>
                              </tr>
                            </thead>
                            <tbody>
                              {deductionDetails.map((detail, index) => (
                                <tr key={index}>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {index + 1}
                                  </td>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {detail.payheadName}
                                  </td>
                                  <td
                                    style={{
                                      border: "1px solid #ccc",
                                      padding: "8px",
                                    }}
                                  >
                                    {detail.amount === "0" ? (
                                      <TextField
                                        fullWidth
                                        variant="outlined"
                                        onChange={(e) =>
                                          handleDeductionAmountChange(
                                            index,
                                            e.target.value
                                          )
                                        }
                                      />
                                    ) : (
                                      detail.amount
                                    )}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                          {/* <div
                          style={{
                            textAlign: "right",
                            padding: "8px",
                            borderTop: "1px solid #ccc",
                          }}
                        >
                          <strong>Net Deduction:</strong>{" "}
                          {calculateNetDeduction()}
                        </div> */}
                        </div>
                        {/* <div style={{ textAlign: "center", padding: "16px" }}>
                        <strong>Net Salary:</strong> {calculateNetSalary()}
                      </div> */}
                      </Grid>
                    </Grid>
                  </div>
                  <table
                    style={{
                      width: "100%",
                      marginTop: "16px",
                      border: "1px solid #ccc",
                    }}
                  >
                    <tbody>
                      <tr>
                        <td
                          style={{
                            textAlign: "center",
                            padding: "8px",
                            border: "1px solid #ccc",
                          }}
                        >
                          <strong>Net Earning:</strong> {calculateNetEarning()}
                        </td>
                        <td
                          style={{
                            textAlign: "center",
                            padding: "8px",
                            border: "1px solid #ccc",
                          }}
                        >
                          <strong>Net Deduction:</strong>{" "}
                          {calculateNetDeduction()}
                        </td>
                        <td
                          style={{
                            textAlign: "center",
                            padding: "8px",
                            border: "1px solid #ccc",
                          }}
                        >
                          <strong>Net Salary:</strong> {calculateNetSalary()}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </Grid>
                {isSubmitDisabled && (
                  <div style={{ textAlign: "center", padding: "16px" }}>
                    {view !== true && (
                      <Button
                        variant="contained"
                        color="primary"
                        onClick={() => {
                          // handleSave();
                          callConfirmDialog()
                          //setOpenAlertSave(true);
                        }}
                      >
                        Save Pay Entitlement
                      </Button>
                    )}
                    <Button
                      sx={{
                        minWidth: 100,
                        ml: 1,
                        mt: { xs: 1, md: 0 },
                      }}
                      variant="outlined"
                      //type="submit"
                      disabled={!showNext}
                      onClick={() => {
                        onButtonClick("pagesix");
                      }}
                    >
                      NEXT &nbsp;
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
