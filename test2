
const columns = [
  {
    field: "id",
    headerClassName: "super-app-theme--header",
    headerName: "S No.",
    width: 60,
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    hide: true
  },
  {
    width: 250,
    headerName: "Name",
    field: "name",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
  },
  {
    width: 200,
    headerName: "Relationship",
    field: "relationshipId",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    renderCell: (params) => {
      const relationship = getValueFromList(relationList, params.row.relationshipId);
      return relationship ? relationship.label : '';
    }
  },
  {
    width: 200,
    headerName: "Gender",
    field: "genderId",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    renderCell: (params) => {
      const gender = getValueFromList(genderList, params.row.genderId);
      return gender ? gender.label : '';
    }
  },
  {
    width: 200,
    headerName: "Marital Status",
    field: "maritalStatusId",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    renderCell: (params) => {
      const maritalStatus = getValueFromList(maritalStatusList, params.row.maritalStatusId);
      return maritalStatus ? maritalStatus.label : '';
    }
  },
  {
    width: 200,
    headerName: "Date of Birth",
    field: "dob",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
  },
  {
    width: 200,
    headerName: "Nominee",
    field: "isNominee",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
    renderCell: (params) => {
      return params.row.isNominee ? "Yes" : "No";
    }
  },
  {
    width: 200,
    headerName: "Nominee (%)",
    field: "nominationPercent",
    headerClassName: "super-app-theme--header",
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
  },
  {
    field: "actiondelete",
    headerName: "Action",
    width: 140,
    headerClassName: "super-app-theme--header",
    renderCell: (params) => {
      return (
        <Button
          variant="outlined"
          color="error"
          sx={{ mb: 1 }}
          onClick={() => handleDeleteRow(params.row.id)}
        >
          Delete
        </Button>
      );
    },
    sortable: false,
    filterable: false,
    disableColumnMenu: true,
  },
];














const fetchData = () => {
  axios.get(`http://141.148.194.18:8052/payroll/employee/family-details/${formData.empRefNo}`, {
      headers: {
          Authorization: `Bearer ${Cookies.get("token")}`
      }
  }).then(response => {
    console.log(response);
    if (response.data.status && response.data.result) {
      setRows(response.data.result.map(item => ({
        id: item.id,
        empId: item.empId,
        relationshipId: item.relationshipId ? item.relationshipId.id : '',
        relationshipLabel: item.relationshipId ? item.relationshipId.label : '',
        name: item.name,
        genderId: item.gender ? item.gender.id : '',
        genderLabel: item.gender ? item.gender.label : '',
        maritalStatus: item.maritalStatus ? item.maritalStatus.label : '',
        isDisabled: item.isDisabled,
        disabilityPercent: item.disabilityPercent || '',
        isDependant: item.isDependant,
        dependantIncome: item.dependantIncome || '',
        isEmployed: item.isEmployed,
        isNominee: item.isNominee,
        nominationPercent: item.nominationPercent || '',
        isActive: item.isActive,
        status: item.status || '',
        crtBy: item.crtBy ? item.crtBy.label : '',
        crtOn: item.crtOn || '',
        updBy: item.updBy ? item.updBy.label : '',
        updOn: item.updOn || ''
      })));
    }
  });
};













{
    "status": true,
    "message": "Family Details fetched successfully",
    "result": [
        {
            "id": 18,
            "empId": 66,
            "relationshipId": {
                "id": 195,
                "label": "Sister"
            },
            "name": "mahathi",
            "gender": {
                "id": 2,
                "label": "Female"
            },
            "maritalStatus": {
                "id": 2,
                "label": "Female"
            },
            "isDisabled": false,
            "disabilityPercent": null,
            "isDependant": true,
            "dependantIncome": 50000,
            "isEmployed": true,
            "isNominee": true,
            "nominationPercent": 30,
            "isActive": true,
            "status": null,
            "crtBy": {
                "id": 1,
                "label": "raj18"
            },
            "crtOn": "18-07-2024 05:06 PM",
            "updBy": null,
            "updOn": "18-07-2024 05:06 PM"
        }
    ],
    "statusCode": 200
}




      const fetchData = () => {
        axios.get(`http://141.148.194.18:8052/payroll/employee/family-details/${formData.empRefNo}`, {
            headers: {
                Authorization: `Bearer ${Cookies.get("token")}`
            }
        }) .then(response => {
          console.log(response)
          
        })
    }


    const columns = [
        {
            field: "id",
            headerClassName: "super-app-theme--header",
            headerName: "S No.",
            width: 60,
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
            hide: true
        },
        {
            width: 250,
            headerName: "Name",
            field: "name",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
        },
        {
            width: 200,
            headerName: "Relationship",
            field: "relationship",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
            renderCell: (params) => {
                return (
                    getValueFromList(relationlist, params.row.relationship).label
                )
            }
        },
        {
            width: 200,
            headerName: "Gender",
            field: "gender",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
            renderCell: (params) => {
                return (
                    getValueFromList(genderList, params.row.gender).label
                )
            }
        },
        {
            width: 200,
            headerName: "Date of Birth",
            field: "dob",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
        },
        {
            width: 200,
            headerName: "Nominee",
            field: "nominee",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
            renderCell: (params) => {
                return (
                    params.row.nominee === "true" ? "Yes" : "No"
                )
            }
        },
        {
            width: 200,
            headerName: "Nominee (%)",
            field: "nomineePercent",
            headerClassName: "super-app-theme--header",
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
        },
        {
            field: "actiondelete",
            headerName: "Action",
            width: 140,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => {
                return (
                    <Button
                        variant="outlined"
                        color="error"
                        sx={{ mb: 1 }}
                        //  value={params.value}
                        onClick={() => handleDeleteRow(params.row.id)}
                    >
                        Delete
                    </Button>
                );
            },
            sortable: false,
            filterable: false,
            disableColumnMenu: true,
        },
    ];
