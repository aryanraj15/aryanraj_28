import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import CachedIcon from '@mui/icons-material/Cached';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import { Autocomplete, Box, Button, Card, CardContent, CircularProgress, Stack, TextField } from '@mui/material';
import Grid from "@mui/material/Unstable_Grid2";
import { useFormik } from 'formik';
import React, { useEffect, useState } from 'react';
import Swal from 'sweetalert2';
import * as yup from "yup";
import SearchTable from "../../components/SearchTableAlt";
import { useSnackbar } from '../../components/Snackbar';
import useTitle from '../../hooks/useTitle';
import PageTitle from '../../layouts/PageTitle';
import axiosClient from "../../utils/AxiosInterceptor";
import Loader from '../../components/Loader';
import dayjs from 'dayjs';
import 'dayjs/locale/en-gb';

const ProjectMaster = () => {
    const [rowss, setRowss] = useState([]);
    const [selectedRow, setSelectedRow] = useState(null);
    const [btnText, setBtnText] = useState("Save");
    const [isReadable, setIsReadable] = useState(false);
    const [isSubmitted, setIsSubmitted] = useState(false);
    const [isLoader, setIsLoader] = useState(false);
    const { showSnackbar } = useSnackbar();
   
    const title = "Project Master";
    useTitle(title);

    useEffect(() => {
        setIsLoader(true);
        axiosClient.get(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/master/project`)
            .then(response => {
                if (response.data?.result?.length === 0)
                    showSnackbar("No data found", "warning");

                let responseData = response.data?.result?.map((value, index) => {
                    let rowData = { ...value, index: index + 1 };
                    return rowData;
                })
                setRowss(responseData);
            })
            .catch(error => {
                showSnackbar(error.response.data.message ? error.response.data.message : error.response.message, 'error');
                setRowss([]);
            })
            .finally(() => setIsLoader(false));
    }, [showSnackbar]);

    const validationSchema = yup.object({
        projectCode: yup.string().required("Project Code is required"),
        projectName: yup.string().required("Project Name is required"),
        auditDate: yup.date().nullable().required("Audit Date is required"),
    });

    const formik = useFormik({
        initialValues: {
            projectCode: "",
            projectName: "",
            auditDate: null,
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            setSelectedRow(null);
            setIsSubmitted(true);
            if (selectedRow !== null) {
                setBtnText("Updating");
                let postData = { ...values, projectCode: values.projectCode, projectName: values.projectName, auditDate: values.auditDate };
                axiosClient.put(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/master/project/${rowss[selectedRow].projectId}`, postData)
                    .then(response => {
                        if (response.data.statusCode === 200) {
                            setRowss((prevValue) => {
                                const updatedRows = [...prevValue];
                                updatedRows[selectedRow] = { ...updatedRows[selectedRow], ...response.data?.result };
                                return updatedRows;
                            });
                            showSnackbar(response.data?.message, "success");
                            setBtnText("Save");
                            formik.resetForm();
                        } else {
                            setBtnText("Update");
                            showSnackbar(response.data?.message, "error");
                        }
                    })
                    .catch(error => {
                        setBtnText("Update");
                        showSnackbar(error.response.data.message ? error.response.data.message : error.response.message, 'error');
                    })
                    .finally(() => {
                        setIsSubmitted(false);
                    });
            } else {
                setBtnText("Saving");
                let postData = { ...values, projectCode: values.projectCode, projectName: values.projectName, auditDate: values.auditDate };
                axiosClient.post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/master/project`, postData)
                    .then(response => {
                        if (response.data.statusCode === 200) {
                            const updatedRow = rowss.map(value => ({ ...value, index: value.index + 1 }));
                            let newRow = response.data?.result;
                            newRow = { index: 1, ...newRow };
                            setRowss([newRow, ...updatedRow]);
                            setBtnText("Saving");
                            showSnackbar(response.data?.message, "success");
                            formik.resetForm();
                        } else {
                            showSnackbar(response.data?.message, "error");
                        }
                    })
                    .catch(error => {
                        showSnackbar(error.response.data.message ? error.response.data.message : error.response.message, 'error');
                    })
                    .finally(() => {
                        setBtnText("Save");
                        setIsSubmitted(false);
                    });
            }
        },
    });

    const handleCancel = () => {
        setBtnText("Save");
        setSelectedRow(null);
        formik.resetForm();
    };

    const handleEdit = (index) => {
        setSelectedRow(index - 1);
        let auditDate = dayjs(rowss[index - 1].auditDate, "YYYY-MM-DD");
        setBtnText("Update");
        formik.setFieldValue("projectCode", rowss[index - 1].projectCode);
        formik.setFieldValue("projectName", rowss[index - 1].projectName);
        formik.setFieldValue("auditDate", auditDate);
    };

    const handleDelete = (index) => {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                let values = rowss[index - 1];
                axiosClient.delete(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/master/project/${values.projectId}`)
                    .then(response => {
                        if (response.data.statusCode === 200) {
                            const updatedRow = rowss.filter(value => value.index !== values.index).map((value, index) => ({ ...value, index: index + 1 }));
                            setRowss(updatedRow);
                            showSnackbar(response.data?.message, "success");
                        } else {
                            showSnackbar(response.data?.message, "error");
                        }
                    })
                    .catch(error => {
                        showSnackbar(error.response.data.message ? error.response.data.message : error.response.message, 'error');
                    });
            }
        });
    }

    const columns = [
        {
            field: "index",
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "projectCode",
            headerName: "Project Code",
            flex: 0.2,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "projectName",
            headerName: "Project Name",
            flex: 0.2,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "auditDate",
            headerName: "Audit Date",
            flex: 0.2,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "action",
            headerName: "Action",
            headerClassName: "super-app-theme--header",
            flex: 0.3,
            minWidth: 180,
            sortable: false,
            disableClickEventBubbling: true,
            renderCell: (params) => {
                return (
                    <Stack direction="row" spacing={1}>
                        <Button variant="contained" sx={{ color: 'black', backgroundColor: 'white', ":hover": { color: 'black', backgroundColor: 'white' }, borderRadius: '4px' }} endIcon={<EditIcon />} size="small" onClick={() => handleEdit(params.row.index)}>Edit</Button>
                        <Button variant="contained" sx={{ color: 'white', backgroundColor: '#286cb4', ":hover": { color: 'white', backgroundColor: '#286cb4' }, borderRadius: '4px' }} startIcon={<DeleteIcon />} size="small" onClick={() => handleDelete(params.row.index)}>Delete</Button>
                    </Stack>
                )
            },
        },
    ];

    return (
        <Grid container spacing={3}>
            {isLoader ? <Loader /> : (
                <>
                    <Grid item xs={12}>
                        <PageTitle title="Project Master" />
                    </Grid>
                    <Grid item xs={12}>
                        <Card>
                            <CardContent>
                                <form onSubmit={formik.handleSubmit}>
                                    <Grid container spacing={2}>
                                        <Grid item xs={12} sm={6} md={4}>
                                            <TextField
                                                fullWidth
                                                id="projectCode"
                                                name="projectCode"
                                                label="Project Code"
                                                value={formik.values.projectCode}
                                                onChange={formik.handleChange}
                                                error={formik.touched.projectCode && Boolean(formik.errors.projectCode)}
                                                helperText={formik.touched.projectCode && formik.errors.projectCode}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={6} md={4}>
                                            <TextField
                                                fullWidth
                                                id="projectName"
                                                name="projectName"
                                                label="Project Name"
                                                value={formik.values.projectName}
                                                onChange={formik.handleChange}
                                                error={formik.touched.projectName && Boolean(formik.errors.projectName)}
                                                helperText={formik.touched.projectName && formik.errors.projectName}
                                            />
                                        </Grid>
                                        <Grid item xs={12} sm={6} md={4}>
                                            <LocalizationProvider dateAdapter={AdapterDayjs}>
                                                <DatePicker
                                                    label="Audit Date"
                                                    value={formik.values.auditDate}
                                                    onChange={(value) => formik.setFieldValue("auditDate", value)}
                                                    renderInput={(params) => <TextField
                                                        {...params}
                                                        fullWidth
                                                        error={formik.touched.auditDate && Boolean(formik.errors.auditDate)}
                                                        helperText={formik.touched.auditDate && formik.errors.auditDate}
                                                    />}
                                                />
                                            </LocalizationProvider>
                                        </Grid>
                                        <Grid item xs={12} sm={6} md={4}>
                                            <Button
                                                color="primary"
                                                variant="contained"
                                                fullWidth
                                                type="submit"
                                                disabled={isSubmitted}
                                            >
                                                {btnText}
                                            </Button>
                                        </Grid>
                                        <Grid item xs={12} sm={6} md={4}>
                                            <Button
                                                color="secondary"
                                                variant="contained"
                                                fullWidth
                                                onClick={handleCancel}
                                                disabled={isSubmitted}
                                            >
                                                Cancel
                                            </Button>
                                        </Grid>
                                    </Grid>
                                </form>
                            </CardContent>
                        </Card>
                    </Grid>
                    <Grid item xs={12}>
                        <SearchTable
                            rows={rowss}
                            columns={columns}
                        />
                    </Grid>
                </>
            )}
        </Grid>
    );
};

export default ProjectMaster;
