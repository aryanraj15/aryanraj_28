import {
  Typography,
  Button,
  Card,
  CardContent,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Accordian from "./Accordion"; // Make sure the file is renamed to Accordion.js
import axiosClient from "../../utils/AxiosInterceptor";
import { useState, useEffect, useCallback, useMemo } from "react";
import { useSnackbar } from "../../components/Snackbar";
import useTitle from "../../hooks/useTitle";
import { useLocation } from "react-router-dom";

const AccordionParent = () => {
  const [expanded, setExpanded] = useState(null);
  const [globalCount, setGlobalCount] = useState(0);
  const [phaseData, setPhaseData] = useState([]);
  const { showSnackbar } = useSnackbar();
  const title = "Process Compliance Checklist";
  const location = useLocation();
  const selectedProjectId = location.state?.id;
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const projectId = parsedData.map((item) => item.project.id);
  const projectsId = selectedProjectId ? selectedProjectId : projectId[0];

  useTitle(title);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axiosClient.get(
          `${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/compliance/${projectsId}`
        );
        const responseData = response.data?.result || [];
        if (responseData.length === 0) {
          showSnackbar("No Data Found", "warning");
        } else {
          setPhaseData([
            { name: "Project Initiation and Planning", arr: responseData["Project Initiation and Planning"] || [] },
            { name: "Project Monitoring and Control", arr: responseData["Project Monitoring and Control"] || [] },
            { name: "Engineering", arr: responseData["Engineering"] || [] },
            { name: "Support", arr: responseData["Support"] || [] },
            { name: "Project Closure", arr: responseData["Project Closure"] || [] },
          ]);
        }
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, [projectsId, showSnackbar]);

  const handleChange = useCallback((panel) => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : null);
  }, []);

  const memoizedPhaseData = useMemo(() => phaseData, [phaseData]);

  return (
    <Card>
      <Typography
        component="h4"
        variant="h6"
        sx={{ color: "#2169b3", textAlign: "center" }}
      >
        Process Compliance Checklist
      </Typography>
      <CardContent>
        {memoizedPhaseData.map((phase, index) => (
          <Accordion
            key={index}
            expanded={expanded === `panel${index}`}
            onChange={handleChange(`panel${index}`)}
          >
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls={`panel${index}-content`}
              id={`panel${index}-header`}
            >
              <Typography
                component="h4"
                variant="h6"
                sx={{ color: "#737272" }}
              >
                {phase.name}
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              {expanded === `panel${index}` && (
                <Accordian
                  arr={phase.arr}
                  title={phase.name}
                  globalCount={globalCount}
                  setGlobalCount={setGlobalCount}
                />
              )}
            </AccordionDetails>
          </Accordion>
        ))}
        <div style={{ display: "flex", margin: "20px" }}>
          <Button variant="contained" sx={{ mr: "5px", ml: "auto" }}>
            Submit
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default React.memo(AccordionParent);








import {
  Autocomplete,
  Button,
  Card,
  CardContent,
  Paper,
  Snackbar,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
} from "@mui/material";
import { useState, useEffect, useMemo, useCallback } from "react";
import Loader from "../../components/Loader";
import axiosClient from "../../utils/AxiosInterceptor";
import { useNavigate } from "react-router-dom";
import AlertConfirm from "react-alert-confirm";
import { useSnackbar } from "../../components/Snackbar";
import "react-alert-confirm/lib/style.css";

const Accordion = ({ arr, title }) => {
  const [openEdit, setOpenEdit] = useState(false);
  const [edit, setEdit] = useState(true);
  const [formData, setFormData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [alertData, setAlertData] = useState(false);
  const [indexArray, setIndexArray] = useState([]);
  const [finalPostArray, setFinalPostArray] = useState([]);
  const [dropdownList, setDropDownList] = useState([]);
  const { showSnackbar } = useSnackbar();

  const handleRedirect = () => {
    callConfirmDialog();
  };

  const callConfirmDialog = async () => {
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to save?",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });

    if (action) {
      showSnackbar("Saved Successfully", "success");
    } else {
      showSnackbar("Did not save!", "error");
    }
  };

  useEffect(() => {
    setFormData(arr);
    setIsLoading(false);
  }, [arr]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axiosClient.get(
          `${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/master/response-value/dropdown`
        );
        const responseData = response.data?.result || [];
        if (responseData.length === 0) {
          showSnackbar("No Data Found", "warning");
        } else {
          const dropList = responseData.map((item) => ({
            id: item.id,
            label: item.value,
          }));
          setDropDownList(dropList);
        }
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  const handleEditClick = () => {
    setOpenEdit(true);
    setEdit(false);
  };

  const handleEditClose = (event, reason) => {
    if (reason === "clickaway") return;
    setOpenEdit(false);
  };

  const handleChange = useCallback((index, field, value) => {
    setFormData((prevFormData) => {
      const updatedFormData = [...prevFormData];
      updatedFormData[index][field] = value;

      if (
        updatedFormData[index]["evidence"] &&
        updatedFormData[index]["remarks"] &&
        updatedFormData[index]["selectVal"]
      ) {
        setAlertData(false);
        if (!indexArray.includes(index)) {
          setIndexArray((prevIndexArray) => [...prevIndexArray, index]);
        }
      } else {
        setAlertData(true);
      }

      return updatedFormData;
    });
  }, [indexArray]);

  const handleSave = () => {
    if (alertData) {
      showSnackbar("Complete all the fields before saving");
    } else {
      const updatedArray = indexArray.map((indexNo) => {
        const changedValue = formData[indexNo];
        return {
          questionId: changedValue.questionId,
          valueId: changedValue.selectValId,
          remarks: changedValue.remarks,
          evidence: changedValue.evidence,
        };
      });

      const dataChanged = {
        projectId: 1,
        questionResponseList: updatedArray,
      };

      axiosClient
        .post(
          `${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/compliance/`,
          dataChanged
        )
        .then((response) => {
          if (response.data.statusCode === 200) {
            showSnackbar(response.data.message);
          }
        })
        .catch((error) => {
          console.error(error);
          showSnackbar("One started filling fields cannot be cleared!");
        })
        .finally(() => {
          setFinalPostArray([]);
          setIndexArray([]);
        });
    }
    setEdit(true);
  };

  const getSelectedItem = useCallback(
    (item) => dropdownList.find((opt) => opt.label === item.selectVal) || null,
    [dropdownList]
  );

  if (isLoading) {
    return <Loader />;
  }

  return (
    <Card>
      <CardContent>
        <TableContainer
          component={Paper}
          sx={{ borderLeft: "1px solid black", m: "10px 0" }}
        >
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#2369b3" }}>
                <TableCell sx={{ color: "#fff", textAlign: "center" }}>S.NO</TableCell>
                <TableCell sx={{ color: "#fff", textAlign: "center" }}>{title}</TableCell>
                <TableCell sx={{ color: "#fff", textAlign: "center" }}>Select</TableCell>
                <TableCell sx={{ color: "#fff", textAlign: "center" }}>Remarks</TableCell>
                <TableCell sx={{ color: "#fff", textAlign: "center" }}>Evidence</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {formData.map((item, index) => (
                <TableRow key={index}>
                  <TableCell style={{ border: "1px solid black" }}>{index + 1}</TableCell>
                  <TableCell style={{ border: "1px solid black", width: "30%" }}>
                    <TextField
                      variant="standard"
                      InputProps={{ disableUnderline: true, readOnly: true }}
                      multiline
                      minRows={3}
                      maxRows={4}
                      defaultValue={item.question}
                      fullWidth
                    />
                  </TableCell>
                  <TableCell style={{ border: "1px solid black" }}>
                    <Autocomplete
                      readOnly={edit}
                      value={getSelectedItem(item)}
                      options={dropdownList}
                      getOptionLabel={(option) => option.label}
                      renderInput={(params) => <TextField {...params} label="Select" />}
                      onChange={(e, newValue) =>
                        handleChange(index, "selectVal", newValue ? newValue.label : "")
                      }
                    />
                  </TableCell>
                  <TableCell style={{ border: "1px solid black", width: "30%" }}>
                    <TextField
                      variant="standard"
                      InputProps={{ disableUnderline: true, readOnly: edit }}
                      multiline
                      minRows={3}
                      maxRows={4}
                      defaultValue={item.remarks}
                      fullWidth
                      onChange={(e) => handleChange(index, "remarks", e.target.value)}
                    />
                  </TableCell>
                  <TableCell style={{ border: "1px solid black", width: "30%" }}>
                    <TextField
                      variant="standard"
                      InputProps={{ disableUnderline: true, readOnly: edit }}
                      multiline
                      minRows={3}
                      maxRows={4}
                      defaultValue={item.evidence}
                      fullWidth
                      onChange={(e) => handleChange(index, "evidence", e.target.value)}
                    />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <div style={{ display: "flex", margin: "20px" }}>
          <Button variant="contained" sx={{ mr: "5px", ml: "auto" }} onClick={handleSave}>
            Save
          </Button>
          <Button variant="contained" onClick={handleEditClick}>
            Edit
          </Button>
        </div>
        <Snackbar
          open={openEdit}
          autoHideDuration={5000}
          onClose={handleEditClose}
          message="Updated Successfully"
          ContentProps={{ sx: { background: "green" } }}
        />
      </CardContent>
    </Card>
  );
};

export default Accordion;







import {
  Typography,
  Button,
  Card,
  CardContent,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Accordian from "./Accordian"; // Make sure the file is renamed to Accordion.js
import axiosClient from "../../utils/AxiosInterceptor";
import { useState, useEffect } from "react";
import { useSnackbar } from "../../components/Snackbar";
import useTitle from "../../hooks/useTitle";
import { useLocation } from "react-router-dom";

const AccordionParent = () => {
  const [expanded, setExpanded] = useState('panel0');
  const [globalCount, setGlobalCount] = useState(0);
  const [phaseData, setPhaseData] = useState([]);
  const { showSnackbar } = useSnackbar();
  const title = "Process Compliance Checklist";
  const location = useLocation();
  const selectedProjectId = location.state?.id;
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const projectId = parsedData.map((item) => item.project.id);
  const projectsId = selectedProjectId ? selectedProjectId : projectId[0];

  useTitle(title);
  useEffect(() => {
    axiosClient
      .get(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/compliance/${projectsId}`)
      .then((response) => {
        const responseData = response.data?.result || [];
        if (responseData.length === 0) {
          showSnackbar("No Data Found", "warning");
        } else {
          setPhaseData([
            { name: "Project Initiation and Planning", arr: responseData["Project Initiation and Planning"] || [] },
            { name: "Project Monitoring and Control", arr: responseData["Project Monitoring and Control"] || [] },
            { name: "Engineering", arr: responseData["Engineering"] || [] },
            { name: "Support", arr: responseData["Support"] || [] },
            { name: "Project Closure", arr: responseData["Project Closure"] || [] },
          ]);
        }
      })
      .catch((error) => {
        console.error(error);
      })
  }, [projectsId]);

  const handleChange = (panel) => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : '');
  };


  return (
    <Card>
      <Typography
        component="h4"
        variant="h6"
        sx={{ color: "#2169b3", textAlign: "center" }}
      >
        Process Compliance Checklist
      </Typography>
      <CardContent>
        {phaseData.map((phase, index) => (
          <Accordion
            key={index}
            expanded={expanded === `panel${index}`}
            onChange={handleChange(`panel${index}`)}
          >
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              aria-controls={`panel${index}-content`}
              id={`panel${index}-header`}
            >
              <Typography
                component="h4"
                variant="h6"
                sx={{ color: "#737272" }}
              >
                {phase.name}
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Accordian arr={phase.arr} title={phase.name} globalCount={globalCount} setGlobalCount={setGlobalCount} />
            </AccordionDetails>
          </Accordion>
        ))}
        <div style={{ display: "flex", margin: "20px" }}>
          <Button variant="contained" sx={{ mr: "5px", ml: "auto" }}>
            Submit
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default AccordionParent;
