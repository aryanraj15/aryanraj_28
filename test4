import React, { useEffect, useState, useRef } from "react";
import * as Yup from "yup";
import { useFormik } from "formik";
import axios from "axios";
import {
  Grid,
  TextField,
  Box,
  Card,
  FormControl,
  FormLabel,
  RadioGroup,
  InputLabel,
  FormControlLabel,
  Radio,
  Tooltip,
  Divider,
  CardContent,
  CardHeader,
  Checkbox,
  Typography,
  Slide,
  FormHelperText,
  Alert,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import Button from "@mui/material/Button";
import Autocomplete from "@mui/material/Autocomplete";
import dayjs from "dayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import AccordionDetails from "@mui/material/AccordionDetails";
import PersonAdd from "@mui/icons-material/PersonAdd";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import AccountCircleTwoToneIcon from "@mui/icons-material/AccountCircleTwoTone";
import ImageUploadCard from "./ImageUploadCard";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import SaveIcon from "@mui/icons-material/Save";
import Snackbar from "@mui/material/Snackbar";
import { useSelector } from "react-redux";

function TransitionLeft(props) {
  return <Slide {...props} direction="left" />;
}

const validationSchema = Yup.object().shape({
  // Name: Yup
  // .string("Enter a valid Name")
  // .required("Name is required")
  // .nullable(),
  Name: Yup.string()
    .matches(
      /^[A-Za-z]+$/,
      "Only Alphabetical characters are allowed in the Name"
    )
    .required("Name is required")
    .nullable(),
  // employeeid: Yup.string().required('Employee ID is required'),
  fatherName: Yup.string().required("Father Name is required").nullable(),
  motherName: Yup.string().required("Mother Name is required").nullable(),
  // dob: Yup.string()
  //     .matches(
  //         /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19|20)\d\d$/,
  //         "Invalid Date of Birth. Please enter a valid date in DD-MM-YYYY format."
  //     )
  //     .required("Date of Birth is required")
  //     .nullable(),
  // id: Yup.string().required('id is required'),
  identificationMarks: Yup.string().required(
    "Identification Marks is required"
  ),
  identificationMarks2: Yup.string().required(
    "Identification Marks is required"
  ),
  // subCaste: Yup.string().required('Sub Caste is required'),
  houseNumberCard: Yup.string().required("House Number is required"),
  addressCard: Yup.string().required("address is required"),
  pincodeCard: Yup.string("Enter a valid Pincode")
    .required("Pincode is required")
    .matches(/^[0-9]+$/, "Invalid Pincode")
    .min(6, "Pincode must have 6 digits")
    .max(6, "Pincode must not exceed 6 digits")
    .nullable(),
  houseNumberComm: Yup.string().required("House Number is required"),
  addresscomm: Yup.string().required("address is required"),
  pincodecomm: Yup.string("Enter a valid Pincode")
    .required("Pincode is required")
    .matches(/^[0-9]+$/, "Invalid Pincode")
    .min(6, "Pincode must have 6 digits")
    .max(6, "Pincode must not exceed 6 digits")
    .nullable(),
  contactNumber: Yup.string("Enter a valid Contact Number")
    .matches(/^[0-9]+$/, "Invalid Contact number")
    .required("Mobile Number is required")
    .min(10, "Mobile Number Must be 10 digits")
    .max(10, "Mobile Number must not exceed 10 digits")
    .nullable(),
  emergencyContact: Yup.string("Enter a valid Contact Number")
    .matches(/^[0-9]+$/, "Invalid Emergency Mobile number")
    .required("Mobile Number is required")
    .min(10, "Mobile Number Must be 10 digits")
    .max(10, "Mobile Number must not exceed 10 digits")
    .nullable(),
  officialemailid: Yup.string()
    .email("Enter a valid email address")
    .required("Email ID is required"),
  personalemail: Yup.string()
    .email("Enter a valid email address")
    .required("Personal Email ID is required"),
  Aadhaar: Yup.string()
    .matches(/^\d{12}$/, "Enter a valid Aadhaar number")
    .required("Aadhaar Card is required"),
  physicallyHandicapped: Yup.string().required("Physically Handicapped is required").nullable(),

  disabilityPercentage: Yup
    .string()
    .when("physicallyHandicapped", {
      is: (value) => value === "true",
      then: Yup.string().required("Disability Percentage is required").nullable(),
    })
    .nullable(),

  // pancard: Yup.string()
  //     .matches(/^[A-Z]{5}\d{4}[A-Z]$/, 'Enter a valid PAN number')
  //     .required('PAN number is required'),
  // caste: Yup
  //   .string("Select Caste")
  //   .required("Caste is required")
  //   .nullable(),

  // Add validation for other fields
});

const PageOne = (props) => {
  const {
    formData,
    setFormData,
    prevData,
    onButtonClick,
    applicationid,
    onFormChange,
  } = props;
  const user = useSelector((state) => state.loginReducer);
  console.log(user);

  const [value, setValue] = React.useState(dayjs());
  const [age, setAge] = React.useState(calculateAge(value));
  const [checked, setChecked] = React.useState(false);
  const [disableoption, setDisableoption] = useState(false);
  const [genderList, setGenderList] = useState([]);
  const [religionList, setReligionList] = useState([]);
  const [nationalityList, setNationalityList] = useState([]);
  const [maritalStatusList, setMaritalStatusList] = useState([]);

  const [mandalList, setMandalList] = useState([]);
  const [mandaloneList, setMandaloneList] = useState([]);
  const [stateList, setstateList] = useState([]);
  const [stateonelist, setstateoneList] = useState([]);
  const [districtList, setDistrictList] = useState([]);
  const [districtoneList, setDistrictoneList] = useState([]);
  const [isReadable, setIsReadable] = useState(false);
  const [isDistrictDisabled, setIsDistrictDisabled] = useState(true);
  const [expertise, setExpertise] = useState([]);
  const [hasphysicalHand, setHasphysicalHand] = useState("no");
  const [selectedDate, setSelectedDate] = useState(null);
  const [isMandalDisabled, setIsMandalDisabled] = useState(true);
  const [villageList, setVillageList] = useState([]);
  const [villageoneList, setVillageoneList] = useState([]);
  const [casteList, setCasteList] = useState([]);
  const [subcasteList, setSubCasteList] = useState([]);
  const [isVillageDisabled, setIsVillageDisabled] = useState(true);
  const [casteUploadedFile, setCasteUploadedFile] = useState(null);
  const [aadharUploadedFile, setAadharUploadedFile] = useState(null);
  const [panUploadedFile, setPanUploadedFile] = useState(null);
  const [pwdUploadedFile, setPwdUploadedFile] = useState(null);
  const [imageUploadedFile, setImageUploadedFile] = useState(null);
  const [openToast, setOpenToast] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [toastSeverity, setToastSeverity] = useState("info");
  const [uplodedImage, setUploadedImage] = useState(null);
  // const [attachmentId,setAttachmentId] = useState()
  const [casteVirtualPath, setCasteVirtualPath] = useState("");
  const [aadharVirtualPath, setAadharVirtualPath] = useState("");
  const [panVirtualPath, setPanVirtualPath] = useState("");
  const [imageVirtualPath, setImageVirtualPath] = useState("");
  const [pwdVirtualPath, setPwdVirtualPath] = useState("");
  const [showSubCaste, setShowSubCaste] = useState(false);
  const [employeeType, setEmployeeType] = useState([]);
  // const { showSnackbar } = useSnackbar()

  const formik = useFormik({
    initialValues: {
      // Name: user.data.userdetails.user.fullname,
      // employeeid: user.data.userdetails.user.empCode,
      Name: prevData ? prevData.employeeType : "",
      employeeType: prevData ? prevData.employeeType : "",
      fatherName: prevData ? prevData.fatherName : "",
      motherName: prevData ? prevData.motherName : "",
      dob: prevData ? prevData.dob : "",
      Age: prevData ? prevData.Age : "",
      Gender: prevData ? prevData.Gender : "",
      identificationMarks: prevData ? prevData.identificationMarks : "",
      identificationMarks2: prevData ? prevData.identificationMarks2 : "",
      caste: prevData ? prevData.caste : "",
      subcaste: prevData ? prevData.subcaste : "",
      presentAddress: "",
      permanentAddress: "",
      //contactNumber: user.data.userdetails.user.mobileNo,
      emergencyContact: prevData ? prevData.emergencyContact : "",
      //emailid: user.data.userdetails.user.email,
      personalemail: prevData ? prevData.personalemail : "",
      Aadhaar: prevData ? prevData.Aadhaar : "",
      // pancard: user.data.userdetails.user.pancard,
      houseNumberCard: prevData ? prevData.houseNumberCard : "",
      addressCard: prevData ? prevData.addressCard : "",
      // stateId: prevData ? prevData.stateId : '',
      mandalId: prevData ? prevData.mandalId : "",
      distId: prevData ? prevData.distId : "",
      villageId: prevData ? prevData.villageId : "",
      officialemailid: "",
      contactNumber: "",
      nationality: "",
      isCommAddrsSame: prevData ? prevData.isCommAddrsSame : false,
      houseNumberComm: prevData ? prevData.houseNumberComm : "",
      addresscomm: prevData ? prevData.addresscomm : "",
      distIdcommunication: prevData ? prevData.distIdcommunication : "",
      stateIdcommunication: prevData ? prevData.stateIdcommunication : "",
      mandalIdcommunication: prevData ? prevData.mandalIdcommunication : "",
      villageIdcommunication: prevData ? prevData.villageIdcommunication : "",
      pincodeCard: prevData ? prevData.pincodeCard : "",
      pincodecomm: prevData ? prevData.pincodecomm : "",
      label: "",
      physicallyHandicapped: prevData ? prevData.physicallyHandicapped : "",
      disabilityPercentage: prevData ? prevData.disabilityPercentage : "",
      // Add initial values for other fields
    },
    validationSchema: validationSchema,
    onSubmit: (values) => {
      // Handle form submission or API integration here
      setFormData((prevFormData) => ({
        ...prevFormData,
        pageone: values,
      }));
    },
  });

  useEffect(() => { 

    axios.get(`${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/personalDetails/${34}`).then(response => {
        

        console.log("one",response.data.result)
        //   console.log(response.data.result[1].branchId.branchName)
          formik.setFieldValue("Name",response.data.result.fullName)
          formik.setFieldValue("motherName",response.data.result.motherName)
          formik.setFieldValue("religion",response.data.result.religionId.typeName)
          formik.setFieldValue("fatherName",response.data.result.fatherName)
         formik.setFieldValue("Age",response.data.result.fullName)
         formik.setFieldValue("identificationMarks",response.data.result.identificationMarks1)
         formik.setFieldValue("identificationMarks2",response.data.result.identificationMarks2)
         formik.setFieldValue("contactNumber",response.data.result.contactNumber)
         formik.setFieldValue("emergencyContact",response.data.result.alternateNumber)
         formik.setFieldValue("officialemailid",response.data.result.officialEmail)
         formik.setFieldValue("personalemail",response.data.result.personalEmail)
         formik.setFieldValue("houseNumberCard",response.data.result.presentHouseNo)
         formik.setFieldValue("houseNumberComm",response.data.result.permanentHouseNo)
         formik.setFieldValue("pincodeCard",response.data.result.presentPincode)
         formik.setFieldValue("pincodecomm",response.data.result.permanentPincode)
         formik.setFieldValue("Aadhaar",response.data.result.aadhaarNo)
         formik.setFieldValue("nationality",response.data.result.nationalityId.typeId)

         console.log(response.data.result.nationalityId)
        })
            .catch(error => {
            //    setBranchName("")
            //    setBankName("")
                console.log(error);
            });
         

    axios
      .get(`${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/caste`)
      .then((response) => {
        let sortedCasteData = response.data.result.map((value) => {
          value.label = value.label;
          return value;
        });

        setCasteList(sortedCasteData);
        console.log(sortedCasteData);
      })
      .catch((error) => {
        setCasteList([]);
        console.log(error);
      });

    axios
      .get(`${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/gender`)
      .then((response) => {
        let sortedGenderData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        setGenderList(sortedGenderData);
        console.log(sortedGenderData);
      })
      .catch((error) => {
        setGenderList([]);
        console.log(error);
      });

    axios
      .get(
        `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/religion`
      )
      .then((response) => {
        let sortedReligionData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        setReligionList(sortedReligionData);
        console.log(sortedReligionData);
      })
      .catch((error) => {
        setReligionList([]);
        console.log(error);
      });

    axios
      .get(
        `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/nationality`
      )
      .then((response) => {
        let sortedNationalityData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        setNationalityList(sortedNationalityData);
        console.log(sortedNationalityData);
      })
      .catch((error) => {
        setNationalityList([]);
        console.log(error);
      });

    axios
      .get(
        `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/maritalStatus`
      )
      .then((response) => {
        let sortedmaritalStatusData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        setMaritalStatusList(sortedmaritalStatusData);
        console.log(sortedmaritalStatusData);
      })
      .catch((error) => {
        setMaritalStatusList([]);
        console.log(error);
      });

    axios
      .get(`${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/state`)
      .then((response) => {
        let sortedStateData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        sortedStateData = sortedStateData.sort((a, b) =>
          a.label.localeCompare(b.label)
        );

        setstateList(sortedStateData);
        console.log(sortedStateData);
      })
      .catch((error) => {
        setstateList([]);
        console.log(error);
      });

    axios
      .get(`${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/state`)
      .then((response) => {
        let sortedStateoneData = response.data.result.map((value) => {
          value.label = value.label.toUpperCase();
          return value;
        });

        sortedStateoneData = sortedStateoneData.sort((a, b) =>
          a.label.localeCompare(b.label)
        );

        setstateoneList(sortedStateoneData);
        console.log(sortedStateoneData);
      })
      .catch((error) => {
        setstateoneList([]);
        console.log(error);
      });
  }, []);

  const checkValid = () => {
    formik
      .validateForm()
      .then((formErrors) => {
        if (Object.keys(formErrors).length > 0) {
          console.log(Object.keys(formErrors));
          setToastMessage(
            "Please fill all the required * fields and upload attachments"
          );
          setToastSeverity("error");
          setOpenToast(true);
        } else {
          savePersonalDetails();
          saveAllAttachment();
        }
      })
      .catch((err) => {
        formik.setSubmitting(false);
      });
  };

  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }

    setOpenToast(false);
  };

  const handlephysicalhand = (event) => {
    setHasphysicalHand(event.target.value);
  };

  const copyAddress = (e) => {
    setChecked(e.target.checked);
    formik.setFieldValue("isCommAddrsSame", e.target.checked);
    console.log("the chekced value", checked);
    console.log("the chekced value", e.target.checked);
    if (e.target.checked) {
      formik.setFieldValue("houseNumberComm", formik.values.houseNumberCard);
      formik.setFieldValue("addresscomm", formik.values.addressCard);
      formik.setFieldValue("stateIdcommunication", formik.values.stateId);
      formik.setFieldValue("mandalIdcommunication", formik.values.mandalId);
      formik.setFieldValue("villageIdcommunication", formik.values.villageId);
      formik.setFieldValue("distIdcommunication", formik.values.distId);
      formik.setFieldValue("pincodecomm", formik.values.pincodeCard);
      setDisableoption(true);
    } else {
      // setDistrictoneList(districtList);
      // setMandaloneList(mandalList);
      // setVillageoneList(villageList);
      formik.setFieldValue("houseNumberComm", "");
      formik.setFieldValue("addresscomm", "");
      formik.setFieldValue("stateIdcommunication", "");
      formik.setFieldValue("mandalIdcommunication", "");
      formik.setFieldValue("villageIdcommunication", "");
      formik.setFieldValue("distIdcommunication", "");
      formik.setFieldValue("pincodecomm", "");
      setDisableoption(false);
    }
  };

  const CardTitle = styled((props) => (
    <Typography component="span" {...props} />
  ))(() => ({
    fontWeight: 600,
    display: "flex",
    alignItems: "center",
  }));

  const VisuallyHiddenInput = styled("input")({
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    overflow: "hidden",
    position: "absolute",
    bottom: 0,
    left: 0,
    whiteSpace: "nowrap",
    width: 1,
  });

  function calculateAge2(dateOfBirth) {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);

    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    const dayDiff = today.getDate() - birthDate.getDate();

    if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
      age--;
    }

    let ageString = "";

    if (age > 0) {
      ageString += age === 1 ? "1 year" : `${age} years`;
    }

    if (monthDiff > 0) {
      if (ageString !== "") {
        ageString += ", ";
      }
      ageString += monthDiff === 1 ? "1 month" : `${monthDiff} months`;
    }

    if (dayDiff > 0) {
      if (ageString !== "") {
        ageString += ", ";
      }
      ageString += dayDiff === 1 ? "1 day" : `${dayDiff} days`;
    }

    return ageString;
  }

  function calculateAge(dateOfBirth) {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);

    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    const dayDiff = today.getDate() - birthDate.getDate();

    if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
      age--;
    }

    let ageString = "";

    if (age > 0) {
      ageString += age === 1 ? "1 year" : `${age} years`;
    }

    if (monthDiff > 0) {
      if (ageString !== "") {
        ageString += ", ";
      }
      ageString += monthDiff === 1 ? "1 month" : `${monthDiff} months`;
    }

    if (dayDiff > 0) {
      if (ageString !== "") {
        ageString += ", ";
      }
      ageString += dayDiff === 1 ? "1 day" : `${dayDiff} days`;
    }

    return {
      years: age,
      months: monthDiff,
      days: dayDiff,
      ageString: ageString,
    };
  }

  const fileInputRef = useRef(null);
  const fileInputRef2 = useRef(null);
  const fileInputRef3 = useRef(null);
  const fileInputRefPwd = useRef(null);
  const fileInputRefImg = useRef(null);

  const handleButtonClick = () => {
    fileInputRef.current.click();
  };

  const handleButtonClick2 = () => {
    fileInputRef2.current.click();
  };

  const handleButtonClickPwd = () => {
    fileInputRefPwd.current.click();
  };

  const handleButtonClickImg = () => {
    fileInputRefImg.current.click();
  };

  // console.log(uplodedImage)

  let selectedFile = null;
  let attachmentId = null;

  const handleFileChange = (event) => {
    const file = event.target.files[0];

    if (!file) {
      return;
    }

    const fileSizeKB = file.size / 1024;

    if (fileSizeKB > 200) {
      console.error("File size exceeded");
      alert("Attachment should be less than 200KB");
      setCasteUploadedFile(null);
      return;
    }

    // Check if the file format is allowed (JPG, PNG, or PDF)
    const allowedFormats = ["image/jpeg", "image/png", "application/pdf"];
    if (!allowedFormats.includes(file.type)) {
      console.error("Invalid file format");
      alert("Invalid file format. Please choose JPG, PNG, or PDF.");
      setCasteUploadedFile(null);
      return;
    }

    console.log(file.name);
    selectedFile = file;
    // Set the selected file and perform further actions
    attachmentId = 102
    setCasteUploadedFile(selectedFile);
    // setAttachmentId(102)

    console.log(file)
    if (file) {
      uploadAttachment();
    }
  };

  const handleFileChange2 = (event) => {
    const file = event.target.files[0];

    if (!file) {
      return;
    }

    const fileSizeKB = file.size / 1024;

    if (fileSizeKB > 200) {
      console.error("File size exceeded");
      alert("Attachment should be less than 200KB");
      setAadharUploadedFile(null);
      return;
    }

    const allowedFormats = ["image/jpeg", "image/png", "application/pdf"];
    if (!allowedFormats.includes(file.type)) {
      console.error("Invalid file format");
      alert("Invalid file format. Please choose JPG, PNG, or PDF.");
      setAadharUploadedFile(null);
      return;
    }

    console.log(file.name);
    selectedFile = file;
    attachmentId = 97;
    setAadharUploadedFile(selectedFile);

    if (selectedFile) {
      uploadAttachment();
    }
  };

  const handleFileChangePwd = (event) => {
    const file = event.target.files[0];

    if (!file) {
      return;
    }

    const fileSizeKB = file.size / 1024;

    if (fileSizeKB > 200) {
      console.error("File size exceeded");
      alert("Attachment should be less than 200KB");

      const allowedFormats = ["image/jpeg", "image/png", "application/pdf"];
      if (!allowedFormats.includes(file.type)) {
        console.error("Invalid file format");
        alert("Invalid file format. Please choose JPG, PNG, or PDF.");
        setPwdUploadedFile(null); // Corrected from setCasteUploadedFile(null)
        return;
      }

      setPwdUploadedFile(null);
      return;
    }

    console.log(file.name);
    selectedFile = file;
    attachmentId = 101;
    setPwdUploadedFile(selectedFile);

    if (selectedFile) {
      uploadAttachment();
    }
  };

  const handleFileChange3 = (event) => {
    const File = event.target.files[0];
    if (!File) {
      return;
    }
    const fileSizeKB = File.size / 1024;
    if (fileSizeKB > 200) {
      console.error("Fie size exceeded");
      alert("Attachment should be less than 200KB");
      // setToastSeverity("error");

      // setToastMessage("error")
      const allowedFormats = ["image/jpeg", "image/png", "application/pdf"];
      if (!allowedFormats.includes(File.type)) {
        console.error("Invalid file format");
        alert("Invalid file format. Please choose JPG, PNG, or PDF.");
        setCasteUploadedFile(null);
        return;
      }
      setPanUploadedFile(null);
      return;
    }
    console.log(File.name);
    //  setSelectedFile(File)

    selectedFile = event.target.files[0];
    // setAttachmentId(98)
    attachmentId = 98;
    setPanUploadedFile(selectedFile);
    if (selectedFile) {
      uploadAttachment();
    }
  };

  const handleFileChangeImg = (file) => {
    // const File = event.target.files[0];
    // console.log(File.name)
    //  setSelectedFile(File)

    selectedFile = file;
    setImageUploadedFile(selectedFile);
    //  setAttachmentId(96)
    attachmentId = 96;
    if (selectedFile) {
      uploadAttachment();
    }
  };

  const uploadAttachment = async () => {
    const config = { headers: { "Content-Type": "multipart/form-data" } };
    var bodyFormData = new FormData();
    console.log(selectedFile);
    bodyFormData.append("file", selectedFile);

    try {
      const res = await axios.post(
        "http://10.48.158.197:8054/jobapi/recruitment/uploadAttachment",
        bodyFormData,
        config
      );
      console.log(res);
      console.log(res.data.result[selectedFile.name]);

      if (res.data.statusCode == 200) {
        console.log("uploaded successfully");

        setToastMessage("File Uploaded Successfully");
        setToastSeverity("success");
        setOpenToast(true);
        if (attachmentId === 102) {
          console.log(102);
          setCasteVirtualPath(res.data.result[selectedFile.name]);
        }
        if (attachmentId === 97) {
          setAadharVirtualPath(res.data.result[selectedFile.name]);
        }
        if (attachmentId === 98) {
          setPanVirtualPath(res.data.result[selectedFile.name]);
        }
        if (attachmentId === 96) {
          setImageVirtualPath(res.data.result[selectedFile.name]);
        }
        if (attachmentId === 101) {
          setPwdVirtualPath(res.data.result[selectedFile.name]);
        }
        // console.log(openToast)

        //   showSnackbar(res.data.message,"success");
        // callConfirmDialogMessage("Uplosded Successfully");
        // alert("successfully uploaded");
        // handleResult("Success");
        // onFileUpload(res.data.result.filePath);
        //onFileUpload(files, uploadedFiles[0].name)
      } else {
        console.log("bad request");
        setToastMessage("File Uploaded Successfully");
      }
    } catch (error) {
      // setLoadingInd(false);

      console.log(error.message);
    }
  };

  console.log(casteVirtualPath);
  console.log(panVirtualPath);
  console.log(formik.values.caste?.id);

  const saveAllAttachment = async () => {
    if (aadharVirtualPath && imageVirtualPath === null) {
      alert("Please Upload Aadhar and Applicant form")
      return
    }
    if (formik.values.physicallyHandicapped) {
      alert("Please Upload Handicaped Photo")
      return
    }
    try {
      let body = {};
      if (formik.values.physicallyHandicapped === "true") {
        if (formik.values.caste?.id == "11") {
          body = {
            paths: [
              {
                applicantId: applicationid,
                "attachmentId": 5,
                "filePath": casteVirtualPath,
              },
              {
                applicantId: applicationid,
                "attachmentId": 8,
                "filePath": aadharVirtualPath,

              },
              {
                applicantId: applicationid,
                "attachmentId": 7,
                "filePath": imageVirtualPath,

              },
              {
                applicantId: applicationid,
                "attachmentId": 9,
                "filePath": pwdVirtualPath,

              }
            ]

          }
        }
        else {

          body = {
            paths: [

              {

                "attachmentId": 8,
                "filePath": aadharVirtualPath,
                applicantId: applicationid,
              },
              {
                applicantId: applicationid,
                "attachmentId": 7,
                "filePath": imageVirtualPath,

              },
              {

                "attachmentId": 9,
                "filePath": pwdVirtualPath,
                applicantId: applicationid,
              }
            ]

          }

        }
      }
      else {
        if (formik.values.caste?.id === 11) {
          body = {

            paths: [
              {
                applicantId: applicationid,
                "attachmentId": 5,
                "filePath": casteVirtualPath,

              },
              {
                applicantId: applicationid,
                "attachmentId": 8,
                "filePath": aadharVirtualPath,

              },
              {
                applicantId: applicationid,
                "attachmentId": 7,
                "filePath": imageVirtualPath,

              }
            ]
          }
        }
        else {
          body = {

            paths: [

              {
                applicantId: applicationid,
                "attachmentId": 8,
                "filePath": aadharVirtualPath,
              },
              {
                applicantId: applicationid,
                "attachmentId": 7,
                "filePath": imageVirtualPath,

              }
            ]
          }

        }
      }
      const res = await axios.post(
        "http://10.48.158.197:8054/jobapi/recruitment/save-allAttachment",
        body
      );
      console.log(res);
      console.log(res.data.result);

      if (res.data.statusCode == 200) {
        console.log("Save all Attachemnt successfully");

        setToastMessage("Uploaded Files Saved Successfully");
        setToastSeverity("success");
        setOpenToast(true);

        // console.log(openToast)

        //   showSnackbar(res.data.message,"success");
        // callConfirmDialogMessage("Uplosded Successfully");
        // alert("successfully uploaded");
        // handleResult("Success");
        // onFileUpload(res.data.result.filePath);
        //onFileUpload(files, uploadedFiles[0].name)
      } else {
        console.log("bad request");
      }
    } catch (error) {
      // setLoadingInd(false);
      console.log(error.message);
    }
  };

  const savePersonalDetails = async (data) => {
    try {
      let body = {
        applicantId: applicationid,
        postId: 1,
        fullName: formik.values.Name,
        fatherName: formik.values.fatherName,
        motherName: formik.values.motherName,
        gender: formik.values.Gender.id,
        dob: dayjs(formik.values.dob),
        identificationMarks1: formik.values.identificationMarks,
        identificationMarks2: formik.values.identificationMarks2,
        caste: formik.values.caste.id,
        subCaste: formik.values.subcaste.id,
        religion: formik.values.religion.id,
        nationality: formik.values.nationality.id,
        maritalStatus: formik.values.maritalStatus.id,
        physicallyHandicapped: formik.values.physicallyHandicapped,
        percentageOfDisability: formik.values.disabilityPercentage,
        presentStreet: formik.values.addressCard,
        presentHouseNo: formik.values.houseNumberCard,
        presentDistrict: formik.values.distId.id,
        presentMandal: formik.values.mandalId.id,
        presentVillage: formik.values.villageId.id,
        presentState: formik.values.stateId.id,
        presentPincode: formik.values.pincodeCard,
        isPresentPermanentAddressSame: formik.values.isCommAddrsSame,
        permanentStreet: formik.values.addresscomm,
        permanentHouseNo: formik.values.houseNumberComm,
        permanentDistrict: formik.values.distIdcommunication.id,
        permanentMandal: formik.values.mandalIdcommunication.id,
        permanentVillage: formik.values.villageIdcommunication.id,
        permanentState: formik.values.stateIdcommunication.id,
        permanentPincode: formik.values.pincodecomm,
        alternateNumber: formik.values.emergencyContact,
        aadhaarNo: formik.values.Aadhaar,
        typeOfDisability: "Pain",
        personalEmail: formik.values.personalemail,
        officialEmail: formik.values.officialemailid,
        contactNumber: formik.values.contactNumber,
      };
      console.log("the saved details  body", body);
      const res = await axios.post(
        "http://10.48.158.197:8054/jobapi/recruitment/personalDetails",
        body
      );
      console.log("the saved details  areeeeee", res);

      if (res.data.statusCode === 200) {
        console.log("the result ", res.data.result);
        setToastMessage(res.data.message);
        setToastSeverity("success");
        setOpenToast(true);
        onButtonClick("pagetwo");
      } else if (res.data.result === 400) {
        alert("hii");
      }
    } catch (error) {
      if (error.response && error.response.status === 400) {
        // Handle 400 status code (API error)
        alert(`Data Error: ${error.response.data.message}`);
      } else {
        // Handle other errors (e.g., network errors)
        alert("Data has not been saved. An error occurred.");
        console.log(error.message);
      }
    }
  };
  return (
    <>
      <Grid container>
        <Grid xs={12}>
          <Card sx={{ mx: 7, mt: 0 }} elevation={5}>
            <CardContent>
              <form onSubmit={formik.handleSubmit}>
                <div>
                  <Snackbar
                    open={openToast}
                    autoHideDuration={6000}
                    anchorOrigin={{ vertical: "top", horizontal: "right" }}
                    onClose={handleClose}
                    TransitionComponent={TransitionLeft}
                  >
                    <Alert
                      onClose={handleClose}
                      severity={toastSeverity}
                      sx={{
                        width: "100%",
                        padding: { sm: "15px", xs: "10px" },
                        borderRadius: "15px",
                        fontSize: { sm: "16px", xs: "14px" },
                        boxShadow: "0 0 10px #999",
                        marginTop: { sm: "25px", xs: "20px" },
                      }}
                    >
                      {toastMessage}
                    </Alert>
                  </Snackbar>
                </div>
                <Card sx={{ boxShadow: "none" }}>
                  <CardContent>
                    <h3 lineHeight={2.2}>
                      <PersonAdd sx={{ mr: 1 }} />
                      Personal Details
                    </h3>
                    <Divider />
                    <div
                      style={{
                        color: "red",
                        marginBottom: "15px",
                        fontSize: "14px",
                      }}
                    >
                      <p>
                        <b>Note:</b>
                        <br /> Please go through all the fields before filling
                        the form and fill the details according to SSC.
                        <br />
                        Please upload only .pdf/.jpeg/.png/.jpg
                        <br />
                        File should be less than 200kb
                      </p>
                    </div>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mb: 1 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={8}>
                        <Grid
                          container
                          direction="row"
                          rowSpacing={0}
                          columnSpacing={2}
                          justify="flex-end"
                          alignItems="center"
                          sx={{ mb: 1 }}
                        >
                          <Grid item xs={12} sm={4} md={4} lg={6}>
                            <TextField
                              fullWidth
                              id="Name"
                              name="Name"
                              label="Full Name"
                              size="small"
                              margin="normal"
                              required
                              onChange={formik.handleChange}
                              onBlur={formik.handleBlur}
                              value={formik.values.Name}
                              error={
                                formik.touched.Name && !!formik.errors.Name
                              }
                              helperText={
                                formik.touched.Name && formik.errors.Name
                              }
                            />
                          </Grid>
                          {/* <Grid item xs={12} sm={4} md={4} lg={6}>
                                                        <TextField
                                                            margin="normal"
                                                            fullWidth
                                                            required
                                                            type="text"
                                                            id="employeeid"
                                                            name="employeeid"
                                                            label="Employee ID"
                                                            //   autoComplete="email"
                                                            size="small"
                                                            onChange={formik.handleChange}
                                                            onBlur={formik.handleBlur}
                                                            value={formik.values.employeeid}
                                                            error={formik.touched.employeeid && !!formik.errors.employeeid}
                                                            helperText={formik.touched.employeeid && formik.errors.employeeid}
                                                        />


                                                    </Grid> */}
                        </Grid>

                        <Grid
                          container
                          direction="row"
                          rowSpacing={0}
                          columnSpacing={2}
                          justify="flex-end"
                          alignItems="center"
                          sx={{ mb: 1 }}
                        >
                          <Grid item xs={12} sm={4} md={4} lg={6}>
                            <TextField
                              margin="normal"
                              required
                              fullWidth
                              type="text"
                              id="motherName"
                              name="motherName"
                              label="Mother Name"
                              autoComplete="email"
                              size="small"
                              onChange={formik.handleChange}
                              onBlur={formik.handleBlur}
                              value={formik.values.motherName}
                              error={
                                formik.touched.motherName &&
                                !!formik.errors.motherName
                              }
                              helperText={
                                formik.touched.motherName &&
                                formik.errors.motherName
                              }
                            />
                          </Grid>
                          <Grid item xs={12} sm={4} md={4} lg={6}>
                            <TextField
                              margin="normal"
                              fullWidth
                              type="text"
                              id="fatherName"
                              name="fatherName"
                              label="Father Name"
                              required
                              size="small"
                              onChange={formik.handleChange}
                              onBlur={formik.handleBlur}
                              value={formik.values.fatherName}
                              error={
                                formik.touched.fatherName &&
                                !!formik.errors.fatherName
                              }
                              helperText={
                                formik.touched.fatherName &&
                                formik.errors.fatherName
                              }
                            />
                          </Grid>
                        </Grid>

                        <Grid
                          container
                          direction="row"
                          rowSpacing={0}
                          columnSpacing={2}
                          justify="flex-end"
                          alignItems="center"
                          sx={{ mb: 1 }}
                        >
                          <Grid item xs={12} sm={4} md={4} lg={6}>
                            <LocalizationProvider
                              dateAdapter={AdapterDayjs}
                              adapterLocale={"en-gb"}
                            >
                              <DatePicker
                                label="Date of Birth"
                                inputFormat="DD-MM-YYYY"
                                maxDate={new Date()}
                                id="dob"
                                name="dob"
                                value={formik.values.dob}
                                onChange={(value) => {
                                  const selectedDate = Date.parse(value);
                                  const age = calculateAge(value);
                                  console.log(age);
                                  if (age && age.years < 18) {
                                    // Handle age less than 18, for example, show an error message
                                    // You might also want to disable form submission or take other actions.
                                    alert("Age must be 18 or older");
                                    return;
                                  }

                                  formik.setFieldValue("dob", selectedDate);
                                  formik.setFieldValue(
                                    "age",
                                    age ? age.ageString : ""
                                  );
                                }}
                                renderInput={(params) => (
                                  <TextField
                                    size="small"
                                    fullWidth
                                    margin="normal"
                                    {...params}
                                    required
                                    error={
                                      formik.touched.dob &&
                                      Boolean(formik.errors.dob)
                                    }
                                    helperText={
                                      formik.touched.dob && formik.errors.dob
                                    }
                                    onChange={formik.handleChange}
                                    onBlur={formik.handleBlur}
                                  />
                                )}
                              />
                            </LocalizationProvider>
                          </Grid>

                          <Grid item xs={12} sm={4} md={4} lg={6}>
                            <TextField
                              margin="normal"
                              required
                              fullWidth
                              id="age"
                              label="Age"
                              InputLabelProps={{ shrink: true }}
                              name="age"
                              size="small"
                              value={formik.values.age || ""}
                              onChange={formik.handleChange}
                              onBlur={formik.handleBlur}
                              error={
                                formik.touched.age && Boolean(formik.errors.age)
                              }
                              helperText={
                                formik.touched.age && formik.errors.age
                              }
                              disabled={true}
                            />
                          </Grid>
                        </Grid>
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <ImageUploadCard
                          OnUploadImage={handleFileChangeImg}
                          uploadedImage={setUploadedImage}
                        />
                        <div
                          style={{
                            color: "red",
                            marginBottom: "5px",
                            fontSize: "12px",
                          }}
                        >
                          <p>
                            <b>Note:</b> Please upload Latest passport size
                            photo
                          </p>
                        </div>
                      </Grid>
                    </Grid>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mb: 1 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Autocomplete
                          disablePortal
                          margin="normal"
                          size="small"
                          id="Gender"
                          name="Gender"
                          options={genderList}
                          value={
                            genderList.find(
                              (option) =>
                                option.label === formik.values.Gender?.label
                            ) || null
                          }
                          onChange={(e, value) => {
                            if (value === null) {
                              formik.setFieldValue("Gender", null);
                            } else formik.setFieldValue("Gender", value);
                          }}
                          getOptionLabel={(value) => value.label}
                          sx={{ width: "100%", mt: 2 }}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label="Gender"
                              required
                              onBlur={formik.handleBlur}
                              helperText={
                                formik.errors.label && formik.touched.label
                                  ? formik.errors.label
                                  : null
                              }
                              error={
                                formik.errors.label && formik.touched.label
                                  ? true
                                  : false
                              }
                            />
                          )}
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="identificationMarks"
                          name="identificationMarks"
                          label="Identification Mark 1(Acc to SSC)"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.identificationMarks}
                          error={
                            formik.touched.identificationMarks &&
                            !!formik.errors.identificationMarks
                          }
                          helperText={
                            formik.touched.identificationMarks &&
                            formik.errors.identificationMarks
                          }
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="identificationMarks2"
                          name="identificationMarks2"
                          label="Identification Mark 2(Acc to SSC)"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.identificationMarks2}
                          error={
                            formik.touched.identificationMarks2 &&
                            !!formik.errors.identificationMarks2
                          }
                          helperText={
                            formik.touched.identificationMarks2 &&
                            formik.errors.identificationMarks2
                          }
                        />
                      </Grid>
                    </Grid>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mb: 1 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Autocomplete
                          disablePortal
                          margin="normal"
                          size="small"
                          id="nationality"
                          name="nationality"
                          options={nationalityList}
                          value={
                            nationalityList.find(
                              (option) =>
                                option.label ===
                                formik.values.nationality?.label
                            ) || null
                          }
                          onChange={(e, value) => {
                            if (value === null) {
                              formik.setFieldValue("nationality", null);
                            } else formik.setFieldValue("nationality", value);
                          }}
                          getOptionLabel={(value) => value.label}
                          sx={{ width: "100%" }}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label="Nationality"
                              required
                              onBlur={formik.handleBlur}
                              helperText={
                                formik.errors.nationality &&
                                  formik.touched.nationality
                                  ? formik.errors.nationality
                                  : null
                              }
                              error={
                                formik.errors.nationality &&
                                  formik.touched.nationality
                                  ? true
                                  : false
                              }
                            />
                          )}
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Autocomplete
                          disablePortal
                          margin="normal"
                          size="small"
                          id="religion"
                          name="religion"
                          options={religionList}
                          value={
                            religionList.find(
                              (option) =>
                                option.label === formik.values.religion?.label
                            ) || null
                          }
                          onChange={(e, value) => {
                            if (value === null) {
                              formik.setFieldValue("religion", null);
                            } else formik.setFieldValue("religion", value);
                          }}
                          getOptionLabel={(value) => value.label}
                          sx={{ width: "100%" }}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label="Religion"
                              required
                              onBlur={formik.handleBlur}
                              helperText={
                                formik.errors.religion &&
                                  formik.touched.religion
                                  ? formik.errors.religion
                                  : null
                              }
                              error={
                                formik.errors.religion &&
                                  formik.touched.religion
                                  ? true
                                  : false
                              }
                            />
                          )}
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Autocomplete
                          disablePortal
                          margin="normal"
                          size="small"
                          id="maritalStatus"
                          name="maritalStatus"
                          options={maritalStatusList}
                          value={
                            maritalStatusList.find(
                              (option) =>
                                option.label ===
                                formik.values.maritalStatus?.label
                            ) || null
                          }
                          onChange={(e, value) => {
                            if (value === null) {
                              formik.setFieldValue("maritalStatus", null);
                            } else formik.setFieldValue("maritalStatus", value);
                          }}
                          getOptionLabel={(value) => value.label}
                          sx={{ width: "100%" }}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              label="Marital Status"
                              required
                              onBlur={formik.handleBlur}
                              helperText={
                                formik.errors.maritalStatus &&
                                  formik.touched.maritalStatus
                                  ? formik.errors.maritalStatus
                                  : null
                              }
                              error={
                                formik.errors.maritalStatus &&
                                  formik.touched.maritalStatus
                                  ? true
                                  : false
                              }
                            />
                          )}
                        />
                      </Grid>
                    </Grid>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Autocomplete
                          disablePortal
                          margin="normal"
                          fullWidth
                          id="caste"
                          name="caste"
                          options={casteList}
                          size="small"
                          value={
                            casteList.find(
                              (option) =>
                                option.label === formik.values.caste?.label
                            ) || null
                          }
                          onChange={(e, value) => {
                            if (value === null) {
                              formik.setFieldValue("caste", null);
                              formik.setFieldValue("subcaste", null);
                              setShowSubCaste(false);
                            } else {
                              formik.setFieldValue("caste", value);
                              props.onFormChange(value.id);
                              // props.onFormChange("handicaped",formik.values.physicallyHandicapped)
                              if (value.id === 11) {
                                setShowSubCaste(true);
                              } else {
                                setShowSubCaste(false);
                              }
                              axios
                                .get(
                                  `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/subcaste/${value.id}`
                                )
                                .then((response) => {
                                  let sortedsubCasteData =
                                    response.data.result.map((value) => {
                                      value.label = value.label;
                                      return value;
                                    });

                                  setIsDistrictDisabled(false);
                                  setSubCasteList(sortedsubCasteData);
                                  console.log(sortedsubCasteData);
                                })
                                .catch((error) => {
                                  setSubCasteList([]);
                                  console.log(error);
                                });
                            }
                          }}
                          getOptionLabel={(value) => value.label}
                          sx={{ width: "100%", mt: 2, mb: 1 }}
                          renderInput={(params) => (
                            <TextField
                              {...params}
                              required
                              label="Caste"
                              onBlur={formik.handleBlur}
                              helperText={
                                formik.errors.caste && formik.touched.caste
                                  ? formik.errors.caste
                                  : null
                              }
                              error={
                                formik.errors.caste && formik.touched.caste
                                  ? true
                                  : false
                              }
                            />
                          )}
                        />
                      </Grid>
                      {showSubCaste && (
                        <Grid item xs={12} sm={4} md={4} lg={4}>
                          {/* <Tooltip title={isDistrictDisabled ? "Please select state first" : ""} arrow> */}
                          <Autocomplete
                            disablePortal
                            margin="normal"
                            size="small"
                            fullWidth
                            id="subcaste"
                            name="subcaste"
                            options={subcasteList}
                            value={
                              subcasteList.find(
                                (option) =>
                                  option.label === formik.values.subcaste?.label
                              ) || null
                            }
                            onChange={(e, value) => {
                              if (value === null) {
                                formik.setFieldValue("subcaste", null);
                              } else {
                                formik.setFieldValue("subcaste", value);
                              }
                            }}
                            getOptionLabel={(value) => value.label}
                            sx={{ width: "100%", mt: 2, mb: 1 }}
                            renderInput={(params) => (
                              <TextField
                                {...params}
                                label="Sub Caste"
                                onBlur={formik.handleBlur}
                                helperText={
                                  formik.errors.subcaste &&
                                    formik.touched.subcaste
                                    ? formik.errors.subcaste
                                    : null
                                }
                                error={
                                  formik.errors.subcaste &&
                                    formik.touched.subcaste
                                    ? true
                                    : false
                                }
                              />
                            )}
                          />
                          {/* </Tooltip> */}
                        </Grid>
                      )}

                      {showSubCaste && (
                        <Grid item xs={12} sm={4} md={4} lg={4}>
                          <Button
                            sx={{ mb: 2 }}
                            component="label"
                            variant="contained"
                            startIcon={<CloudUploadIcon />}
                            onClick={handleButtonClick}
                          >
                            Upload Caste Certificate
                          </Button>
                          <VisuallyHiddenInput
                            ref={fileInputRef}
                            type="file"
                            onChange={handleFileChange}
                          />

                          {casteUploadedFile && (
                            <Typography>
                              Uploaded File: {casteUploadedFile.name}
                            </Typography>
                          )}
                        </Grid>
                      )}
                    </Grid>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mb: 1 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <div>
                          <FormControl>
                            <FormLabel id="demo-row-radio-buttons-group-label">
                              Physically Handicapped
                            </FormLabel>

                            <RadioGroup
                              row
                              aria-labelledby="demo-row-radio-buttons-group-label"
                              name="physicallyHandicapped"
                              value={formik.values.physicallyHandicapped}
                              onChange={(e) => {
                                formik.handleChange(e);
                              }}
                            >
                              <FormControlLabel
                                value="true"
                                control={<Radio />}
                                label="Yes"
                              />
                              <FormControlLabel
                                value="false"
                                control={<Radio />}
                                label="No"
                              />
                            </RadioGroup>
                            {formik.touched.physicallyHandicapped &&
                              formik.errors.physicallyHandicapped && (
                                <FormHelperText error>
                                  {formik.errors.physicallyHandicapped}
                                </FormHelperText>
                              )}

                          </FormControl>
                        </div>
                      </Grid>
                      {/* <Grid item xs={12} sm={4} md={4} lg={8}> */}
                      {formik.values.physicallyHandicapped === "true" && (
                        <>
                          <Grid item xs={12} sm={4} md={4} lg={4}>
                            <TextField
                              margin="0"
                              required
                              fullWidth
                              type="text"
                              id="disabilityPercentage"
                              name="disabilityPercentage"
                              label="Physically Handicapped Percentage"
                              size="small"

                              onChange={formik.handleChange}
                              onBlur={formik.handleBlur}
                              value={formik.values.disabilityPercentage}
                              error={
                                formik.touched.disabilityPercentage &&
                                !!formik.errors.disabilityPercentage
                              }
                              helperText={
                                formik.touched.disabilityPercentage &&
                                formik.errors.disabilityPercentage
                              }
                            />
                          </Grid>

                          <Grid item xs={12} sm={4} md={4} lg={4}>
                            <Button
                              sx={{ mb: 3 }}
                              component="label"
                              variant="contained"
                              startIcon={<CloudUploadIcon />}
                              onClick={handleButtonClickPwd}
                            >
                              Upload PWD CERTIFICATES
                            </Button>
                            <VisuallyHiddenInput
                              ref={fileInputRefPwd}
                              onChange={handleFileChangePwd}
                              type="file"
                            />

                            {pwdUploadedFile && (
                              <Typography>
                                Uplodaded File: {pwdUploadedFile.name}
                              </Typography>
                            )}
                          </Grid>
                        </>
                      )}

                      {/* </Grid> */}
                    </Grid>

                    <Card sx={{ margin: 0, boxShadow: "none" }}>
                      <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                      >
                        <Grid item xs={12} sm={6} md={6} lg={6}>
                          {/* <H4 lineHeight={3.2}>Card Address</H4> */}
                          <Card
                            sx={{ height: "450px", border: "1px solid black" }}
                          >
                            <CardHeader
                              title={
                                <CardTitle>
                                  <AccountCircleTwoToneIcon sx={{ mr: 1 }} />
                                  Present Address
                                </CardTitle>
                              }
                            />
                            <Divider />
                            <CardContent>
                              <Grid
                                container
                                direction="row"
                                rowSpacing={0}
                                columnSpacing={2}
                              >
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <TextField
                                    margin="normal"
                                    required
                                    fullWidth
                                    id="houseNumberCard"
                                    label="House No./Building Name"
                                    name="houseNumberCard"
                                    value={formik.values.houseNumberCard}
                                    autoComplete="email"
                                    size="small"
                                    onChange={formik.handleChange}
                                    onBlur={formik.handleBlur}
                                    error={
                                      formik.touched.houseNumberCard &&
                                      Boolean(formik.errors.houseNumberCard)
                                    }
                                    helperText={
                                      formik.touched.houseNumberCard &&
                                      formik.errors.houseNumberCard
                                    }
                                  // disabled={isDisabled}
                                  />
                                </Grid>

                                <Grid item xs={12} sm={8} md={8} lg={6}>
                                  <TextField
                                    margin="normal"
                                    required
                                    fullWidth
                                    id="addressCard"
                                    label="Address"
                                    name="addressCard"
                                    value={formik.values.addressCard}
                                    autoComplete="email"
                                    size="small"
                                    onChange={formik.handleChange}
                                    onBlur={formik.handleBlur}
                                    error={
                                      formik.touched.addressCard &&
                                      Boolean(formik.errors.addressCard)
                                    }
                                    helperText={
                                      formik.touched.addressCard &&
                                      formik.errors.addressCard
                                    }
                                  // disabled={isDisabled}
                                  />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <FormControl fullWidth sx={{ mt: 2 }}>
                                    <TextField
                                      label="Pincode"
                                      size="small"
                                      fullWidth
                                      required
                                      autoComplete="email"
                                      placeholder={"999999"}
                                      mask={"######"}
                                      value={formik.values.pincodeCard || ""}
                                      id="pincodeCard"
                                      name="pincodeCard"
                                      onChange={formik.handleChange}
                                      onBlur={formik.handleBlur}
                                      error={
                                        formik.touched.pincodeCard &&
                                        Boolean(formik.errors.pincodeCard)
                                      }
                                      helperText={
                                        formik.touched.pincodeCard &&
                                        formik.errors.pincodeCard
                                      }
                                    // disabled={isDisabled}
                                    />
                                  </FormControl>
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <FormControl fullWidth>
                                    <Autocomplete
                                      disablePortal
                                      margin="0"
                                      size="small"
                                      fullWidth
                                      id="stateId"
                                      name="stateId"
                                      options={stateList}
                                      disabled={isReadable}
                                      value={
                                        stateList.find(
                                          (option) =>
                                            option.id ===
                                            formik.values.stateId?.id
                                        ) || null
                                      }
                                      onChange={(e, value) => {
                                        if (value === null) {
                                          formik.setFieldValue("stateId", null);
                                        } else {
                                          formik.setFieldValue(
                                            "stateId",
                                            value
                                          );
                                          axios
                                            .get(
                                              `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/district/${value.id} `
                                            )
                                            .then((response) => {
                                              let sortedDistrictData =
                                                response.data.result.map(
                                                  (value) => {
                                                    value.label =
                                                      value.label.toUpperCase();
                                                    return value;
                                                  }
                                                );

                                              sortedDistrictData =
                                                sortedDistrictData.sort(
                                                  (a, b) =>
                                                    a.label.localeCompare(
                                                      b.label
                                                    )
                                                );

                                              setIsDistrictDisabled(false);
                                              setDistrictList(
                                                sortedDistrictData
                                              );
                                              console.log(sortedDistrictData);
                                            })
                                            .catch((error) => {
                                              setDistrictList([]);
                                              console.log(error);
                                            });
                                        }
                                      }}
                                      getOptionLabel={(value) => value.label}
                                      sx={{ width: "100%", mt: 2, mb: 1 }}
                                      renderInput={(params) => (
                                        <TextField
                                          {...params}
                                          label="State Name"
                                          onBlur={formik.handleBlur}
                                          helperText={
                                            formik.errors.stateId &&
                                              formik.touched.stateId
                                              ? formik.errors.stateId
                                              : null
                                          }
                                          error={
                                            formik.errors.stateId &&
                                              formik.touched.stateId
                                              ? true
                                              : false
                                          }
                                        />
                                      )}
                                    />
                                  </FormControl>
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <FormControl fullWidth>
                                    <Tooltip
                                      title={
                                        isDistrictDisabled
                                          ? "Please select state first"
                                          : ""
                                      }
                                      arrow
                                    >
                                      <Autocomplete
                                        disablePortal
                                        margin="0"
                                        size="small"
                                        id="distId"
                                        name="distId"
                                        options={districtList}
                                        value={
                                          districtList.find(
                                            (option) =>
                                              option.id ===
                                              formik.values.distId?.id
                                          ) || null
                                        }
                                        onChange={(e, value) => {
                                          if (value === null) {
                                            formik.setFieldValue(
                                              "distId",
                                              null
                                            );
                                          } else {
                                            formik.setFieldValue(
                                              "distId",
                                              value
                                            );
                                            axios
                                              .get(
                                                `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/mandal/${value.id}`
                                              )
                                              .then((response) => {
                                                let sortedMandalData =
                                                  response.data.result.map(
                                                    (value) => {
                                                      value.label =
                                                        value.label.toUpperCase();
                                                      return value;
                                                    }
                                                  );

                                                sortedMandalData =
                                                  sortedMandalData.sort(
                                                    (a, b) =>
                                                      a.label.localeCompare(
                                                        b.label
                                                      )
                                                  );

                                                setIsDistrictDisabled(false);
                                                setMandalList(sortedMandalData);
                                                console.log(sortedMandalData);
                                              })
                                              .catch((error) => {
                                                setDistrictList([]);
                                                console.log(error);
                                              });
                                          }
                                        }}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                          <TextField
                                            {...params}
                                            label="District Name"
                                            onBlur={formik.handleBlur}
                                            helperText={
                                              formik.errors.distId &&
                                                formik.touched.distId
                                                ? formik.errors.distId
                                                : null
                                            }
                                            error={
                                              formik.errors.distId &&
                                                formik.touched.distId
                                                ? true
                                                : false
                                            }
                                          />
                                        )}
                                      />
                                    </Tooltip>
                                  </FormControl>
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <Tooltip
                                    title={
                                      isMandalDisabled
                                        ? "Please select district first"
                                        : ""
                                    }
                                    arrow
                                  >
                                    <Autocomplete
                                      disablePortal
                                      margin="0"
                                      size="small"
                                      fullWidth
                                      id="mandalId"
                                      name="mandalId"
                                      options={mandalList}
                                      value={
                                        mandalList.find(
                                          (option) =>
                                            option.id ===
                                            formik.values.mandalId?.id
                                        ) || null
                                      }
                                      onChange={(e, value) => {
                                        if (value === null) {
                                          formik.setFieldValue(
                                            "mandalId",
                                            null
                                          );
                                        } else {
                                          formik.setFieldValue(
                                            "mandalId",
                                            value
                                          );

                                          axios
                                            .get(
                                              `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/village/${value.id}`
                                            )
                                            .then((response) => {
                                              let sortedVillageData =
                                                response.data.result.map(
                                                  (value) => {
                                                    value.label =
                                                      value.label.toUpperCase();
                                                    return value;
                                                  }
                                                );

                                              sortedVillageData =
                                                sortedVillageData.sort((a, b) =>
                                                  a.label.localeCompare(b.label)
                                                );

                                              setIsVillageDisabled(false);
                                              setVillageList(sortedVillageData);
                                              console.log(sortedVillageData);
                                            })
                                            .catch((error) => {
                                              setVillageList([]);
                                              console.log(error);
                                            });
                                        }
                                      }}
                                      getOptionLabel={(value) => value.label}
                                      sx={{ width: "100%", mt: 2, mb: 1 }}
                                      renderInput={(params) => (
                                        <TextField
                                          {...params}
                                          label="Mandal Name"
                                          onBlur={formik.handleBlur}
                                          helperText={
                                            formik.errors.mandalId &&
                                              formik.touched.mandalId
                                              ? formik.errors.mandalId
                                              : null
                                          }
                                          error={
                                            formik.errors.mandalId &&
                                              formik.touched.mandalId
                                              ? true
                                              : false
                                          }
                                        />
                                      )}
                                    />
                                  </Tooltip>
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <Tooltip
                                    title={
                                      isVillageDisabled
                                        ? "Please select mandal first"
                                        : ""
                                    }
                                    arrow
                                  >
                                    <Autocomplete
                                      disablePortal
                                      fullWidth
                                      margin="0"
                                      size="small"
                                      id="villageId"
                                      name="villageId"
                                      options={villageList}
                                      value={
                                        villageList.find(
                                          (option) =>
                                            option.label ===
                                            formik.values.villageId?.label
                                        ) || null
                                      }
                                      onChange={(e, value) => {
                                        console.log(value);
                                        if (value === null) {
                                          formik.setFieldValue(
                                            "villageId",
                                            null
                                          );
                                        } else {
                                          formik.setFieldValue(
                                            "villageId",
                                            value
                                          );
                                        }
                                      }}
                                      getOptionLabel={(value) => value.label}
                                      sx={{ width: "100%", mt: 2, mb: 1 }}
                                      renderInput={(params) => (
                                        <TextField
                                          {...params}
                                          label="Village Name"
                                          onBlur={formik.handleBlur}
                                          helperText={
                                            formik.errors.villageId &&
                                              formik.touched.villageId
                                              ? formik.errors.villageId
                                              : null
                                          }
                                          error={
                                            formik.errors.villageId &&
                                              formik.touched.villageId
                                              ? true
                                              : false
                                          }
                                        />
                                      )}
                                    />
                                  </Tooltip>
                                </Grid>
                              </Grid>
                            </CardContent>
                          </Card>
                        </Grid>

                        <Grid item xs={12} sm={6} md={6} lg={6}>
                          <Card sx={{ border: "1px solid black" }}>
                            <CardHeader
                              title={
                                <CardTitle>
                                  <PinDropTwoToneIcon sx={{ mr: 1 }} />{" "}
                                  Permanent Address
                                </CardTitle>
                              }
                            />
                            <Divider />
                            <CardContent>
                              <Grid
                                container
                                direction="row"
                                rowSpacing={0}
                                columnSpacing={2}
                                justify="flex-end"
                                alignItems="center"
                              >
                                <Grid item xs={12} sm={12} md={12} lg={12}>
                                  <FormControlLabel
                                    sx={{ margin: 0 }}
                                    control={
                                      <Checkbox
                                        value="remember"
                                        checked={
                                          formik?.values.isCommAddrsSame ===
                                          true
                                        }
                                        color="primary"
                                      />
                                    }
                                    label="If Present address and Permanent address are same"
                                    onChange={copyAddress}
                                  />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <TextField
                                    margin="normal"
                                    required
                                    fullWidth
                                    id="houseNumberComm"
                                    label="House No./Building Name"
                                    name="houseNumberComm"
                                    value={formik.values.houseNumberComm || ""}
                                    size="small"
                                    onChange={formik.handleChange}
                                    onBlur={formik.handleBlur}
                                    error={
                                      formik.touched.houseNumberComm &&
                                      Boolean(formik.errors.houseNumberComm)
                                    }
                                    helperText={
                                      formik.touched.houseNumberComm &&
                                      formik.errors.houseNumberComm
                                    }
                                    disabled={disableoption}
                                  />
                                </Grid>
                                <Grid item xs={12} sm={8} md={8} lg={6}>
                                  <TextField
                                    margin="normal"
                                    required
                                    fullWidth
                                    id="addresscomm"
                                    label="Address"
                                    name="addresscomm"
                                    value={formik.values.addresscomm || ""}
                                    size="small"
                                    onChange={formik.handleChange}
                                    onBlur={formik.handleBlur}
                                    error={
                                      formik.touched.addresscomm &&
                                      Boolean(formik.errors.addresscomm)
                                    }
                                    helperText={
                                      formik.touched.addresscomm &&
                                      formik.errors.addresscomm
                                    }
                                    disabled={disableoption}
                                  />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <FormControl fullWidth sx={{ mt: 2 }}>
                                    <TextField
                                      label="Pincode"
                                      size="small"
                                      fullWidth
                                      required
                                      placeholder={"999999"}
                                      mask={"######"}
                                      value={formik.values.pincodecomm || ""}
                                      id="pincodecomm"
                                      name="pincodecomm"
                                      onChange={formik.handleChange}
                                      onBlur={formik.handleBlur}
                                      error={
                                        formik.touched.pincodecomm &&
                                        Boolean(formik.errors.pincodecomm)
                                      }
                                      helperText={
                                        formik.touched.pincodecomm &&
                                        formik.errors.pincodecomm
                                      }
                                      disabled={disableoption}
                                    />
                                  </FormControl>
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                  <FormControl fullWidth>
                                    <Autocomplete
                                      disablePortal
                                      margin="0"
                                      size="small"
                                      fullWidth
                                      id="stateIdcommunication"
                                      name="stateIdcommunication"
                                      options={stateonelist}
                                      disabled={isReadable}
                                      value={
                                        stateonelist.find(
                                          (option) =>
                                            option.id ===
                                            formik.values.stateIdcommunication
                                              ?.id
                                        ) || null
                                      }
                                      onChange={(e, value) => {
                                        if (value === null) {
                                          formik.setFieldValue(
                                            "stateIdcommunication",
                                            null
                                          );
                                        } else {
                                          formik.setFieldValue(
                                            "stateIdcommunication",
                                            value
                                          );
                                          axios
                                            .get(
                                              `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/district/${value.id}`
                                            )
                                            .then((response) => {
                                              let sortedDistrictcommData =
                                                response.data.result.map(
                                                  (value) => {
                                                    value.label =
                                                      value.label.toUpperCase();
                                                    return value;
                                                  }
                                                );

                                              sortedDistrictcommData =
                                                sortedDistrictcommData.sort(
                                                  (a, b) =>
                                                    a.label.localeCompare(
                                                      b.label
                                                    )
                                                );

                                              setIsDistrictDisabled(false);
                                              setDistrictoneList(
                                                sortedDistrictcommData
                                              );
                                              console.log(
                                                sortedDistrictcommData
                                              );
                                            })
                                            .catch((error) => {
                                              setDistrictoneList([]);
                                              console.log(error);
                                            });
                                        }
                                      }}
                                      getOptionLabel={(value) => value.label}
                                      sx={{ width: "100%", mt: 2, mb: 1 }}
                                      renderInput={(params) => (
                                        <TextField
                                          {...params}
                                          label="State Name"
                                          onBlur={formik.handleBlur}
                                          helperText={
                                            formik.errors
                                              .stateIdcommunication &&
                                              formik.touched.stateIdcommunication
                                              ? formik.errors
                                                .stateIdcommunication
                                              : null
                                          }
                                          error={
                                            formik.errors
                                              .stateIdcommunication &&
                                              formik.touched.stateIdcommunication
                                              ? true
                                              : false
                                          }
                                          disabled={disableoption}
                                        />
                                      )}
                                    />
                                  </FormControl>
                                </Grid>
                                {checked ?
                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <FormControl fullWidth>
                                      <Tooltip
                                        title={
                                          isDistrictDisabled
                                            ? "Please select state first"
                                            : ""
                                        }
                                        arrow
                                      >
                                        <Autocomplete
                                          disablePortal
                                          margin="0"
                                          size="small"
                                          id="distId"
                                          name="distId"
                                          options={districtList}
                                          value={
                                            districtList.find(
                                              (option) =>
                                                option.id ===
                                                formik.values.distId?.id
                                            ) || null
                                          }
                                          onChange={(e, value) => {
                                            if (value === null) {
                                              formik.setFieldValue(
                                                "distId",
                                                null
                                              );
                                            } else {
                                              formik.setFieldValue(
                                                "distId",
                                                value
                                              );
                                              axios
                                                .get(
                                                  `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/mandal/${value.id}`
                                                )
                                                .then((response) => {
                                                  let sortedMandalData =
                                                    response.data.result.map(
                                                      (value) => {
                                                        value.label =
                                                          value.label.toUpperCase();
                                                        return value;
                                                      }
                                                    );

                                                  sortedMandalData =
                                                    sortedMandalData.sort(
                                                      (a, b) =>
                                                        a.label.localeCompare(
                                                          b.label
                                                        )
                                                    );

                                                  setIsDistrictDisabled(false);
                                                  setMandalList(sortedMandalData);
                                                  console.log(sortedMandalData);
                                                })
                                                .catch((error) => {
                                                  setDistrictList([]);
                                                  console.log(error);
                                                });
                                            }
                                          }}
                                          getOptionLabel={(value) => value.label}
                                          sx={{ width: "100%", mt: 2, mb: 1 }}
                                          renderInput={(params) => (
                                            <TextField
                                              {...params}
                                              label="District Name"
                                              onBlur={formik.handleBlur}
                                              helperText={
                                                formik.errors.distId &&
                                                  formik.touched.distId
                                                  ? formik.errors.distId
                                                  : null
                                              }
                                              error={
                                                formik.errors.distId &&
                                                  formik.touched.distId
                                                  ? true
                                                  : false
                                              }
                                              disabled={disableoption}
                                            />
                                          )}
                                        />
                                      </Tooltip>
                                    </FormControl>
                                  </Grid>
                                  :
                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <FormControl fullWidth>
                                      <Tooltip
                                        title={
                                          isDistrictDisabled
                                            ? "Please select state first"
                                            : ""
                                        }
                                        arrow
                                      >
                                        <Autocomplete
                                          disablePortal
                                          margin="0"
                                          size="small"
                                          id="distIdcommunication"
                                          name="distIdcommunication"
                                          options={districtoneList}
                                          value={
                                            districtoneList.find(
                                              (option) =>
                                                option.id ===
                                                formik.values.distIdcommunication
                                                  ?.id
                                            ) || null
                                          }
                                          onChange={(e, value) => {
                                            if (value === null) {
                                              formik.setFieldValue(
                                                "distIdcommunication",
                                                null
                                              );
                                            } else {
                                              formik.setFieldValue(
                                                "distIdcommunication",
                                                value
                                              );
                                              axios
                                                .get(
                                                  `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/mandal/${value.id}`
                                                )
                                                .then((response) => {
                                                  let sortedMandalcommData =
                                                    response.data.result.map(
                                                      (value) => {
                                                        value.label =
                                                          value.label.toUpperCase();
                                                        return value;
                                                      }
                                                    );

                                                  sortedMandalcommData =
                                                    sortedMandalcommData.sort(
                                                      (a, b) =>
                                                        a.label.localeCompare(
                                                          b.label
                                                        )
                                                    );

                                                  setIsDistrictDisabled(false);
                                                  setMandaloneList(
                                                    sortedMandalcommData
                                                  );
                                                  console.log(
                                                    sortedMandalcommData
                                                  );
                                                })
                                                .catch((error) => {
                                                  setMandaloneList([]);
                                                  console.log(error);
                                                });
                                            }
                                          }}
                                          getOptionLabel={(value) => value.label}
                                          sx={{ width: "100%", mt: 2, mb: 1 }}
                                          renderInput={(params) => (
                                            <TextField
                                              {...params}
                                              label="District Name"
                                              onBlur={formik.handleBlur}
                                              helperText={
                                                formik.errors
                                                  .distIdcommunication &&
                                                  formik.touched.distIdcommunication
                                                  ? formik.errors
                                                    .distIdcommunication
                                                  : null
                                              }
                                              error={
                                                formik.errors
                                                  .distIdcommunication &&
                                                  formik.touched.distIdcommunication
                                                  ? true
                                                  : false
                                              }
                                              disabled={disableoption}
                                            />
                                          )}
                                        />
                                      </Tooltip>
                                    </FormControl>
                                  </Grid>
                                }
                                {checked ?
                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <Tooltip
                                      title={
                                        isMandalDisabled
                                          ? "Please select district first"
                                          : ""
                                      }
                                      arrow
                                    >
                                      <Autocomplete
                                        disablePortal
                                        margin="0"
                                        size="small"
                                        fullWidth
                                        id="mandalId"
                                        name="mandalId"
                                        options={mandalList}
                                        value={
                                          mandalList.find(
                                            (option) =>
                                              option.id ===
                                              formik.values.mandalId?.id
                                          ) || null
                                        }
                                        onChange={(e, value) => {
                                          if (value === null) {
                                            formik.setFieldValue(
                                              "mandalId",
                                              null
                                            );
                                          } else {
                                            formik.setFieldValue(
                                              "mandalId",
                                              value
                                            );

                                            axios
                                              .get(
                                                `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/village/${value.id}`
                                              )
                                              .then((response) => {
                                                let sortedVillageData =
                                                  response.data.result.map(
                                                    (value) => {
                                                      value.label =
                                                        value.label.toUpperCase();
                                                      return value;
                                                    }
                                                  );

                                                sortedVillageData =
                                                  sortedVillageData.sort((a, b) =>
                                                    a.label.localeCompare(b.label)
                                                  );

                                                setIsVillageDisabled(false);
                                                setVillageList(sortedVillageData);
                                                console.log(sortedVillageData);
                                              })
                                              .catch((error) => {
                                                setVillageList([]);
                                                console.log(error);
                                              });
                                          }
                                        }}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                          <TextField
                                            {...params}
                                            label="Mandal Name"
                                            onBlur={formik.handleBlur}
                                            helperText={
                                              formik.errors.mandalId &&
                                                formik.touched.mandalId
                                                ? formik.errors.mandalId
                                                : null
                                            }
                                            error={
                                              formik.errors.mandalId &&
                                                formik.touched.mandalId
                                                ? true
                                                : false
                                            }
                                            disabled={disableoption}
                                          />
                                        )}
                                      />
                                    </Tooltip>
                                  </Grid>
                                  :
                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <Tooltip
                                      title={
                                        isMandalDisabled
                                          ? "Please select district first"
                                          : ""
                                      }
                                      arrow
                                    >
                                      <Autocomplete
                                        disablePortal
                                        margin="0"
                                        size="small"
                                        fullWidth
                                        id="mandalIdcommunication"
                                        name="mandalIdcommunication"
                                        options={mandaloneList}
                                        value={
                                          mandaloneList.find(
                                            (option) =>
                                              option.id ===
                                              formik.values.mandalIdcommunication
                                                ?.id
                                          ) || null
                                        }
                                        onChange={(e, value) => {
                                          if (value === null) {
                                            formik.setFieldValue(
                                              "mandalIdcommunication",
                                              null
                                            );
                                          } else {
                                            formik.setFieldValue(
                                              "mandalIdcommunication",
                                              value
                                            );

                                            axios
                                              .get(
                                                `${process.env.REACT_APP_JOBAPPLICATION_API_URL}/recruitment/village/${value.id}`
                                              )
                                              .then((response) => {
                                                let sortedVillagecommData =
                                                  response.data.result.map(
                                                    (value) => {
                                                      value.label =
                                                        value.label.toUpperCase();
                                                      return value;
                                                    }
                                                  );

                                                sortedVillagecommData =
                                                  sortedVillagecommData.sort(
                                                    (a, b) =>
                                                      a.label.localeCompare(
                                                        b.label
                                                      )
                                                  );

                                                setIsVillageDisabled(false);
                                                setVillageoneList(
                                                  sortedVillagecommData
                                                );
                                                console.log(
                                                  sortedVillagecommData
                                                );
                                              })
                                              .catch((error) => {
                                                setVillageoneList([]);
                                                console.log(error);
                                              });
                                          }
                                        }}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                          <TextField
                                            {...params}
                                            label="Mandal Name"
                                            onBlur={formik.handleBlur}
                                            helperText={
                                              formik.errors
                                                .mandalIdcommunication &&
                                                formik.touched.mandalIdcommunication
                                                ? formik.errors
                                                  .mandalIdcommunication
                                                : null
                                            }
                                            error={
                                              formik.errors
                                                .mandalIdcommunication &&
                                                formik.touched.mandalIdcommunication
                                                ? true
                                                : false
                                            }
                                            disabled={disableoption}
                                          />
                                        )}
                                      />
                                    </Tooltip>
                                  </Grid>
                                }
                                {checked ?
                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <Tooltip
                                      title={
                                        isVillageDisabled
                                          ? "Please select mandal first"
                                          : ""
                                      }
                                      arrow
                                    >
                                      <Autocomplete
                                        disablePortal
                                        fullWidth
                                        margin="0"
                                        size="small"
                                        id="villageId"
                                        name="villageId"
                                        options={villageList}
                                        value={
                                          villageList.find(
                                            (option) =>
                                              option.label ===
                                              formik.values.villageId?.label
                                          ) || null
                                        }
                                        onChange={(e, value) => {
                                          console.log(value);
                                          if (value === null) {
                                            formik.setFieldValue(
                                              "villageId",
                                              null
                                            );
                                          } else {
                                            formik.setFieldValue(
                                              "villageId",
                                              value
                                            );
                                          }
                                        }}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                          <TextField
                                            {...params}
                                            label="Village Name"
                                            onBlur={formik.handleBlur}
                                            helperText={
                                              formik.errors.villageId &&
                                                formik.touched.villageId
                                                ? formik.errors.villageId
                                                : null
                                            }
                                            error={
                                              formik.errors.villageId &&
                                                formik.touched.villageId
                                                ? true
                                                : false
                                            }
                                            disabled={disableoption}
                                          />
                                        )}
                                      />
                                    </Tooltip>
                                  </Grid>
                                  :

                                  <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <Tooltip
                                      title={
                                        isVillageDisabled
                                          ? "Please select mandal first"
                                          : ""
                                      }
                                      arrow
                                    >
                                      <Autocomplete
                                        disablePortal
                                        fullWidth
                                        margin="0"
                                        size="small"
                                        id="villageIdcommunication"
                                        name="villageIdcommunication"
                                        options={villageoneList}
                                        value={
                                          villageoneList.find(
                                            (option) =>
                                              option.label ===
                                              formik.values.villageIdcommunication
                                                ?.label
                                          ) || null
                                        }
                                        onChange={(e, value) => {
                                          console.log(value);
                                          if (value === null) {
                                            formik.setFieldValue(
                                              "villageIdcommunication",
                                              null
                                            );
                                          } else {
                                            formik.setFieldValue(
                                              "villageIdcommunication",
                                              value
                                            );
                                          }
                                        }}
                                        getOptionLabel={(value) => value.label}
                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                        renderInput={(params) => (
                                          <TextField
                                            {...params}
                                            label="Village Name"
                                            onBlur={formik.handleBlur}
                                            helperText={
                                              formik.errors
                                                .villageIdcommunication &&
                                                formik.touched
                                                  .villageIdcommunication
                                                ? formik.errors
                                                  .villageIdcommunication
                                                : null
                                            }
                                            error={
                                              formik.errors
                                                .villageIdcommunication &&
                                                formik.touched
                                                  .villageIdcommunication
                                                ? true
                                                : false
                                            }
                                            disabled={disableoption}
                                          />
                                        )}
                                      />
                                    </Tooltip>
                                  </Grid>
                                }
                              </Grid>
                            </CardContent>
                          </Card>
                        </Grid>
                      </Grid>
                    </Card>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mt: 2 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="contactNumber"
                          name="contactNumber"
                          label="Contact Number"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.contactNumber}
                          error={
                            formik.touched.contactNumber &&
                            !!formik.errors.contactNumber
                          }
                          helperText={
                            formik.touched.contactNumber &&
                            formik.errors.contactNumber
                          }
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="emergencyContact"
                          name="emergencyContact"
                          label="Emergency(Family) Number"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.emergencyContact}
                          error={
                            formik.touched.emergencyContact &&
                            !!formik.errors.emergencyContact
                          }
                          helperText={
                            formik.touched.emergencyContact &&
                            formik.errors.emergencyContact
                          }
                        />
                      </Grid>

                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="personalemail"
                          name="personalemail"
                          label="Personal Email ID"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.personalemail}
                          error={
                            formik.touched.personalemail &&
                            !!formik.errors.personalemail
                          }
                          helperText={
                            formik.touched.personalemail &&
                            formik.errors.personalemail
                          }
                        />
                      </Grid>
                    </Grid>

                    <Grid
                      container
                      direction="row"
                      rowSpacing={0}
                      columnSpacing={2}
                      justify="flex-end"
                      alignItems="center"
                      sx={{ mb: 1 }}
                    >
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="officialemailid"
                          name="officialemailid"
                          label="Official Email ID"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.officialemailid}
                          error={
                            formik.touched.officialemailid &&
                            !!formik.errors.officialemailid
                          }
                          helperText={
                            formik.touched.officialemailid &&
                            formik.errors.officialemailid
                          }
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <TextField
                          margin="normal"
                          required
                          fullWidth
                          type="text"
                          id="Aadhaar"
                          name="Aadhaar"
                          label="Aadhaar Number"
                          size="small"
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          value={formik.values.Aadhaar}
                          error={
                            formik.touched.Aadhaar && !!formik.errors.Aadhaar
                          }
                          helperText={
                            formik.touched.Aadhaar && formik.errors.Aadhaar
                          }
                        />
                      </Grid>
                      <Grid item xs={12} sm={4} md={4} lg={4}>
                        <Button
                          sx={{ mb: 2 }}
                          component="label"
                          variant="contained"
                          startIcon={<CloudUploadIcon />}
                          onClick={handleButtonClick2}
                        >
                          Upload Aadhaar Certificate
                        </Button>
                        <VisuallyHiddenInput
                          ref={fileInputRef2}
                          type="file"
                          onChange={handleFileChange2}
                        />

                        {aadharUploadedFile && (
                          <Typography>
                            Uploaded File: {aadharUploadedFile.name}
                          </Typography>
                        )}
                      </Grid>
                    </Grid>
                  </CardContent>

                  <Box spacing={2} sx={{ mt: 1, textAlign: "center" }}>
                    <Button
                      sx={{
                        minWidth: 100,
                        ml: 1,
                        mt: { xs: 1, md: 0 },
                      }}
                      variant="contained"
                      type="submit"
                      onClick={() => {
                        //savePersonalDetails();
                        //saveAllAttachment();
                        checkValid();
                        // onButtonClick("pagetwo")
                        setFormData((prevFormData) => ({
                          ...prevFormData,
                          pageone: formik.values,
                        }));
                      }}
                    >
                      SAVE
                      <SaveIcon></SaveIcon>
                    </Button>
                  </Box>
                </Card>
              </form>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </>
  );
};

export default PageOne;
