 const handleAmount = (event) => {
  const { value } = event.target;
  const amount = parseFloat(value);
  const minAmount = formik.values.minAmount;
  const maxAmount = formik.values.maxAmount;

  formik.setFieldTouched('amount', true, true);

  if (isNaN(amount) || amount < minAmount || amount > maxAmount) {
    formik.setFieldError('amount', `Amount must be between ${minAmount} and ${maxAmount}`);
  } else {
    formik.setFieldError('amount', '');
  }

  formik.setFieldValue('amount', value);
};

















const handleAmount = (event) => {

    console.log(event)
    // formik.values.minAmount
    // formik.values.maxAmount

    
  };


<Grid xs={12} sm={4}>
                    <TextField
                      margin="normal"
                      fullWidth
                      type="text"
                      id="amount"
                      name="amount"
                      label="Amount"
                      size="small"
                      required
                      value={formik.values.amount}
                      onChange={handleAmount}
                      onBlur={formik.handleBlur}
                      error={formik.touched.amount && !!formik.errors.amount}
                      helperText={formik.touched.amount && formik.errors.amount}
                    />
                  </Grid>





[3:12 PM] Chouksey, Anusha
Map of Odisha 
2. Introduction: The Resilient Odisha Portal, under the OSDMA, has been established to deepen policymakers' understanding of cascading risks from the hazard-exposure-vulnerability perspective, providing a visualization tool to understand the vulnerabilities and risk intensity of coastal rural Odisha, and evidence-based analytics to strengthen regional cooperation and actionable risk assessments, and strengthen capacity of communities and administrations to mitigate losses. The portal also acts as a too for improved planning, decision support system, and knowledge hub for stakeholders and administrators.
 
[3:18 PM] Chouksey, Anusha
Risk and Resilience Portal (b) Risk Maps and Analysis Reports (c) Disaster Planning (d) Disaster Planning Progress (e) Digital Catalogue of Mitigation Solutions (f) Resilience Index and Risk Rating of Village/GPs (g) Resource center 
 







import React, { lazy, Suspense, useState } from "react";
import { Provider } from "react-redux";
import { Route, Routes } from "react-router-dom";
import { SnackbarProvider } from "./components/Snackbar";
import store from "./redux/store";
import PrivateRoutes from "./routes/PrivateRoutes";
import ScrollToTop from "./components/ScrollToTop";
import Header from "./layouts/Header";
import { ColorModeContextProvider } from "./utils/ColorModeContext";

/*****Pages******/
const Home = lazy(() => import("./pages/Home"));
const Login = lazy(() => import("./pages/Login/Login"));
const ForgotPassword = lazy(() => import("./pages/Login/forgotPassword"));
const Test2 = lazy(() => import("./pages/Test/test2"));
const Accordian = lazy(() => import("./pages/Accordian/AccordianParent"));

const ChartAdmin = lazy(() => import("./pages/charts/ChartAdmin"));
const ChartPartners = lazy(() => import("./pages/charts/ChartPartners"));
const MetricData = lazy(() => import("./pages/MasterAdmin/MetricData"));
const MetricsMaster = lazy(() => import("./pages/MasterAdmin/MetricsMaster"));
const PhasesMaster = lazy(() => import("./pages/MasterAdmin/PhasesMaster"));
const ProjectMaster = lazy(() => import("./pages/MasterAdmin/ProjectMaster"));
const QuestionsMaster = lazy(() => import("./pages/MasterAdmin/QuestionsMaster"));

const App = () => {
  return (
    <>
      <SnackbarProvider>
        <ColorModeContextProvider>
          <Provider store={store}>
            <AppRoutes />
          </Provider>
        </ColorModeContextProvider>
      </SnackbarProvider>
    </>
  );
};

const AppRoutes = () => {
  const [selectedProjectId, setSelectedProjectId] = useState('');
  return (
    <Suspense fallback={<div />}>
      <ScrollToTop />
      <Routes>
        <Route path="/" element={<Login />} exact />
        <Route path="/forgotpassword" element={<ForgotPassword />} />
        <Route element={<Header setSelectedProjectId={setSelectedProjectId}/>}>
          <Route element={<PrivateRoutes />}>
            <Route path="/home" element={<Home />} />
            <Route path="/test2" element={<Test2 />} />
            <Route path="/chartadmin" element={<ChartAdmin selectedProjectId={selectedProjectId} />} />
            <Route path="/chartpartners" element={<ChartPartners />} />
            <Route path="/metricdata" element={<MetricData />} />
            <Route path="/metricsmaster" element={<MetricsMaster />} />
            <Route path="/phasesmaster" element={<PhasesMaster />} />
            <Route path="/projectmaster" element={<ProjectMaster />} />
            <Route path="/questionsmaster" element={<QuestionsMaster />} />
            <Route path="/accordian" element={<Accordian />} />
          </Route>
        </Route>
      </Routes>
    </Suspense>
  );
};

export default App;


import React, { useEffect, useState } from "react";
import { PieChart, Pie, Tooltip, Legend, Cell } from "recharts";
import { makeStyles } from "@material-ui/core/styles";
import Paper from "@material-ui/core/Paper";
import ReactSpeedometer from "react-d3-speedometer";
import useTitle from "../../hooks/useTitle";
import PageTitle from "../../layouts/PageTitle";
import axiosClient from "../../utils/AxiosInterceptor";
import { useSnackbar } from "../../components/Snackbar";

const COLORS = ["#4caf50", "#ba68c8", "#FFBB28"];
const useStyles = makeStyles((theme) => ({
  paper: {
    padding: theme.spacing(2),
    textAlign: "center",
    color: theme.palette.text.black,
    width: "50%",
    margin: "5px",
    boxShadow: "0px 0px 10px rgba(0,0,0,0.1)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "column",
    marginTop: "25px",
  },
}));

const ChartAdmin = ({ selectedProjectId }) => {
  const { showSnackbar } = useSnackbar();
  const classes = useStyles();
  const title = "Dashboard";
  const [pciResponse, setPciResponse] = useState([]);
  const [data, setData] = useState([]);
  useTitle(title);

  // Retrieve projectId from localStorage as fallback
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const fallbackProjectId = parsedData.map((item) => item.project.id)[0];

  useEffect(() => {
    const projectIdToUse = selectedProjectId || fallbackProjectId;

    if (!projectIdToUse) {
      showSnackbar("No project ID found", "error");
      return;
    }

    axiosClient
      .post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/metrics`, {
        projectId: projectIdToUse,
      })
      .then((response) => {
        if (response.data.statusCode === 200) {
          setPciResponse(
            response.data.result["PCI Score"].map((score) => ({
              ...score,
              value: parseFloat(score.value),
            }))
          );
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        showSnackbar(
          error.response?.data?.message || error.message,
          "error"
        );
      });

    axiosClient
      .post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/counts`, {
        projectId: projectIdToUse,
      })
      .then((response) => {
        if (response.data.statusCode === 200) {
          setData(
            response.data.result.map((item) => ({
              name: item.responseValue,
              totalCounts: item.totalCounts,
            }))
          );
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        showSnackbar(
          error.response?.data?.message || error.message,
          "error"
        );
      });
  }, [selectedProjectId, fallbackProjectId, showSnackbar]);

  const pciValue = pciResponse.map((item) => item.value);

  return (
    <div style={{ display: "flex" }}>
      <Paper className={classes.paper}>
        <PageTitle name="Distribution of Response" />
        <PieChart width={400} height={300} style={{ marginTop: "-10px" }}>
          <Pie
            data={data}
            labelLine={false}
            label
            outerRadius={100}
            fill="#8884d8"
            dataKey="totalCounts"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index]} />
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
      </Paper>
      <Paper className={classes.paper}>
        <div style={{ marginTop: "-15px" }}>
          <PageTitle name="Process Compilance Index (PCI)" />
        </div>
        <div style={{ marginTop: "-25px" }}>
          <ReactSpeedometer
            value={pciValue}
            minValue={0}
            maxValue={100}
            needleColor="black"
            startColor="red"
            endColor="green"
            segments={3}
            customSegmentStops={[0, 50, 80, 100]}
            segmentColors={["red", "orange", "green"]}
            needleTransitionDuration={4000}
            height={200}
            width={300}
            paddingVertical={50}
          />
        </div>
      </Paper>
    </div>
  );
};

export default ChartAdmin;




import React, { useContext, useEffect, useState } from "react";
import { styled, useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Drawer from "@mui/material/Drawer";
import CssBaseline from "@mui/material/CssBaseline";
import MuiAppBar from "@mui/material/AppBar";
import Toolbar from "@mui/material/Toolbar";
import List from "@mui/material/List";
import Typography from "@mui/material/Typography";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import MenuIcon from "@mui/icons-material/Menu";
import ChevronLeftIcon from "@mui/icons-material/ChevronLeft";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import LogoutIcon from "@mui/icons-material/Logout";
import PowerSettingsNewIcon from "@mui/icons-material/PowerSettingsNew";
import { useSnackbar } from "../components/Snackbar";
import { useNavigate } from "react-router-dom";
import Cookies from "js-cookie";
import { FormControl, Grid, InputLabel, MenuItem, Select } from "@mui/material";

// import Footer from '../components/footer/Footer';

const drawerWidth = 280;

const Main = styled("main", { shouldForwardProp: (prop) => prop !== "open" })(
  ({ theme, open }) => ({
    flexGrow: 1,
    padding: theme.spacing(3),
    transition: theme.transitions.create("margin", {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: `-${drawerWidth}px`,
    ...(open && {
      transition: theme.transitions.create("margin", {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      marginLeft: 0,
    }),
  })
);

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  transition: theme.transitions.create(["margin", "width"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: `${drawerWidth}px`,
    transition: theme.transitions.create(["margin", "width"], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
  justifyContent: "center",
}));

const Footer = styled("div", {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  transition: theme.transitions.create(["margin", "width"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  width: "100%",
  position: "fixed",
  top: "unset",
  bottom: 0,
  color: "white",
  backgroundColor: "black",
  textAlign: "center",
  size: "8px",
  ...(open && {
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: `${drawerWidth}px`,
    transition: theme.transitions.create(["margin", "width"], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

export default function PersistentDrawerLeft({ setSelectedProjectId }) {
  const { showSnackbar } = useSnackbar();
  const theme = useTheme();
  const navigate = useNavigate();
  const [open, setOpen] = useState(true);
  const [anchorEl, setAnchorEl] = useState(null);

  // For Projects Dropdown
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const projects = parsedData.map((item) => item.project);
  const defaultProject = projects.length > 0 ? projects[0].name : "";
  const [selectedProject, setSelectedProject] = useState(defaultProject);
  const [selectedProjectDetails, setSelectedProjectDetails] =
    useState(defaultProject);

  const handleLogout = () => {
    console.log("Logging out");
    setAnchorEl(null);
    Cookies.remove("token");
    Cookies.remove("jobToken");
    localStorage.clear();
    navigate("/");
    showSnackbar("Logout Successful", "success");
  };

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  const handleProjectChange = (e) => {
    setSelectedProject(e.target.value);

    const selectedProjectDetails = projects.find(
      (project) => project.name === e.target.value
    );
    setSelectedProjectDetails(selectedProjectDetails);

    setSelectedProjectId(selectedProjectDetails.id);

    console.log("ProjectId::", selectedProjectDetails.id);
  };

  return (
    <Box sx={{ display: "flex" }}>
      <CssBaseline />
      <AppBar position="fixed" open={open}>
        <Toolbar sx={{ backgroundColor: "#004c99", color: "#fff" }}>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerOpen}
            edge="start"
            sx={{ mr: 2, ...(open && { display: "none" }) }}
          >
            <MenuIcon />
          </IconButton>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerClose}
            edge="start"
            sx={{ mr: 2, ...(!open && { display: "none" }) }}
          >
            <ChevronLeftIcon />
          </IconButton>
          <Grid
            container
            direction="row"
            rowSpacing={0}
            columnSpacing={2}
            justify="flex-end"
            alignItems="center"
          >
            <Grid item xs={12} sm={3} md={3} lg={3}>
              <Typography variant="h6" noWrap>
                {title ? title : "KPMG"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={2.5} lg={2.5}>
              <Typography variant="h8" noWrap>
                {localStorage.getItem("fullname")}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={3} lg={3}>
              <Typography variant="h8" noWrap>
                {localStorage.getItem("designation")}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={3} lg={3}>
              {projects.length > 1 ? (
                <FormControl variant="standard" fullWidth>
                  <InputLabel style={{ color: "white" }}>Projects</InputLabel>
                  <Select
                    value={selectedProject}
                    onChange={handleProjectChange}
                    label="Project"
                    style={{ color: "white", marginBottom: "15px" }}
                  >
                    {projects.map((project) => (
                      <MenuItem key={project.id} value={project.name}>
                        {project.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              ) : (
                <Typography variant="body1">
                  {projects.length === 1
                    ? projects[0].name
                    : "No projects available"}
                </Typography>
              )}
            </Grid>
            <Grid item xs={2} sm={1} md={0.5} lg={0.5}>
              <PowerSettingsNewIcon
                onClick={handleLogout}
                sx={{ cursor: "pointer" }}
              />
            </Grid>
          </Grid>
        </Toolbar>
      </AppBar>

      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            boxSizing: "border-box",
            scrollbarWidth: "thin",
          },
        }}
        variant="persistent"
        anchor="left"
        open={open}
      >
        <DrawerHeader>
          <Box mr={1.5}>
            <Typography
              sx={{ py: 2, float: "left" }}
              display="flex"
              justifyContent="space-between"
              component={"div"}
            >
              <img src={logo_left} alt="YSR" width="150px" height="50px" />
            </Typography>
          </Box>
        </DrawerHeader>
        <Divider />
        <List>
          <ListItem>
            <ListItemButton onClick={() => navigate("/dashboard")}>
              <ListItemIcon>
                <InboxIcon />
              </ListItemIcon>
              <ListItemText primary="Dashboard" />
            </ListItemButton>
          </ListItem>
          <ListItem>
            <ListItemButton onClick={() => navigate("/chartadmin")}>
              <ListItemIcon>
                <MailIcon />
              </ListItemIcon>
              <ListItemText primary="Chart Admin" />
            </ListItemButton>
          </ListItem>
          <ListItem>
            <ListItemButton onClick={handleLogout}>
              <ListItemIcon>
                <LogoutIcon />
              </ListItemIcon>
              <ListItemText primary="Logout" />
            </ListItemButton>
          </ListItem>
        </List>
      </Drawer>
      <Main open={open}>
        <DrawerHeader />
        <Outlet />
      </Main>
      <Footer position="fixed" open={open}>
        <Typography noWrap component="div">
          &copy; Site maintained by KPMG Advisory Services Pvt. Ltd.
        </Typography>
      </Footer>
    </Box>
  );
}



