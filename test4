import React, { useState } from 'react'
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Autocomplete from "@mui/material/Autocomplete";
import { styled } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import Grid from "@mui/material/Grid";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';
import { Card, CardContent } from "@mui/material";
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { TextareaAutosize } from '@mui/base/TextareaAutosize';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import MeetingRoomIcon from '@mui/icons-material/MeetingRoom';
import { DemoContainer } from '@mui/x-date-pickers/internals/demo';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { TimePicker } from '@mui/x-date-pickers/TimePicker';
import AlertConfirm from "react-alert-confirm";
import { useSnackbar } from "../../../components/Snackbar";
import "react-alert-confirm/lib/style.css";
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { renderTimeViewClock } from '@mui/x-date-pickers/timeViewRenderers';
import dayjs from 'dayjs';

const BoardRoomBooking = () => {
  const { showSnackbar } = useSnackbar();
  const navigate = useNavigate();

  const valuesMeeting = [
    {
      id: 1,
      label: "Board Room Booking",
    },
    {
      id: 2,
      label: "Conference Room Booking",
    },
  ];

  const [dateTimePairs, setDateTimePairs] = useState([
    {startDateAndTime:null, endDateAndTime:null},
  ]);

  const handleAddField = () => {
    const newFields =[
      {startDateAndTime:null, endDateAndTime:null},
    ]
    setDateTimePairs([...dateTimePairs, ...newFields])
    // setFieldValues([...fieldValues, ...Array(newFields.length).fill('')]);
  }

  const handleRemoveRow = (index) => {
    if(dateTimePairs.length === 1) return;
    // const updatedFields = [...fields];
    // updatedFields.splice(index,1);
    const updatedFields = [...dateTimePairs];
    updatedFields.splice(index,1);
    setDateTimePairs(updatedFields);
  }
  console.log('kp-fields', dateTimePairs)
  const title = "Slot Availability/Booking";
  useTitle(title);

  const handleRedirect = () => {
    callConfirmDialog();
  }

  const callConfirmDialog = async () => {
    console.log('kp-confirm');
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to submit?",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });
    if (action) {
      console.log('kp-saved');
      showSnackbar("Saved Successfully", 'success');
      navigate('/viewboardroombookings')
      // submitDetails(values, resetForm);
    } else {
      //   setIsSubmit(false);
      showSnackbar('Did not save!', 'error')
    }
  };
  return (
    <>
      <Card>
        <CardContent>
          {/* <PageTitle name={"Book Board Room"} /> */}
          <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf", marginTop: '30px' }}>
            <MeetingRoomIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
            <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Slot Availability/Booking</H3>
          </div>
          <Grid
            container
            spacing={2}
            direction="row"
            alignItems="center"
          // justifyContent="center"
          // sx={{}}
          >
            <Grid item xs={12} sm={4} md={4} lg={4}>
              <Autocomplete
                id="combo-box-demo"
                options={valuesMeeting}
                sx={{}}
                size="small"
                fullWidth
                // defaultValue={valuesMeeting[0]}
                renderInput={(params) => <TextField {...params} label="Type of conference" />}
              />
            </Grid>

            
            {/* <Grid sx={{display:'flex', alignItems:'center'}}> */}
            <Grid item xs={12} sm={4} md={4} lg={4}>
              <TextField
                size="small"
                sx={{ width: "100%" }}
                label="Total no.of speakers and participants"
                // defaultValue="60"
                
                // InputProps={{
                //   readOnly: true,
                // }}

              />
            </Grid>
            <Grid item xs={12} sm={4} md={4} lg={4}>
              <TextField
                size="small"
                sx={{ width: "100%" }}
                label="Title of the Meeting"
                // maxRows={10}
                // minRows={2}
                // defaultValue="Annual Meeting"
                // InputProps={{
                //   readOnly: true,
                // }}
              />
            </Grid>
            {/* <Grid item xs={12} sm={4} md={4} lg={4}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DatePicker
                  label=" Date"
                  // maxDate={new Date()}
                  sx={{ width: "100%", marginTop:2 }}
                  inputFormat="DD/MM/YYYY"
                  renderInput={(params) => (
                    <TextField
                      size="small"
                      {...params}
                    
                    />

                  )}
                />
              </LocalizationProvider>
            </Grid> */}
            {/* <Grid item xs={12} sm={4} md={4} lg={4}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DemoContainer components={['TimePicker']}>
                  <TimePicker sx={{ width: "100%" }} size="small" label="Start Time" />
                </DemoContainer>
              </LocalizationProvider>
            </Grid>
            <Grid item xs={12} sm={4} md={4} lg={4}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <DemoContainer components={['TimePicker']}>
                  <TimePicker sx={{ width: "100%" }} size="small" label="End Time" />
                </DemoContainer>
              </LocalizationProvider>
            </Grid> */}
            {dateTimePairs.map((dateTimePairs, index) => (
              <Grid container direction="row" spacing={2} alignItems="center" sx={{width:'100%', paddingLeft:'16px'}} key={index}>
                <Grid item xs={12} sm={4} md={4} lg={4}>
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                  <DemoContainer components={['DateTimePicker', 'DateTimePicker']}>
                    <DateTimePicker
                      label="Select Start Date and Time"
                      key={index}
                      value={dateTimePairs.startDateAndTime}
                      onChange={(newValue) => {
                        setDateTimePairs((prevPairs) => 
                          prevPairs.map((p, i) => 
                            i === index ? {...p, startDateAndTime: dayjs(newValue).format("YYYY-MM-DD HH:mm:ss")} : p
                          )
                        )
                      }}
                      viewRenderers={{
                        hours: renderTimeViewClock,
                        minutes: renderTimeViewClock,
                        seconds: renderTimeViewClock,
                      }}
                    />
                  </DemoContainer>
                </LocalizationProvider>
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <LocalizationProvider dateAdapter={AdapterDayjs}>
                  <DemoContainer components={['DateTimePicker', 'DateTimePicker']}>
                    <DateTimePicker
                      label="Select End Date and Time"
                      // value={field.endDateAndTime}
                      key={index+1}
                      value={dateTimePairs.endDateAndTime}
                      onChange={(newValue) => {
                        setDateTimePairs((prevPairs) => 
                          prevPairs.map((p, i) => 
                            i === index ? {...p, endDateAndTime: dayjs(newValue).format("YYYY-MM-DD HH:mm:ss")} : p
                          )
                        )
                      }}
                      viewRenderers={{
                        hours: renderTimeViewClock,
                        minutes: renderTimeViewClock,
                        seconds: renderTimeViewClock,
                      }}
                    />
                  </DemoContainer>
                </LocalizationProvider>
              </Grid>
              {index > 0 && (
                <Grid item xs={1} sm={1} sx={{marginTop:'8px'}}>
                  <Button sx={{height:'48px', width:'105px',borderRadius:'4px'}} variant='outlined' startIcon={<DeleteOutlineIcon />} onClick={() => handleRemoveRow(index)}>REMOVE</Button>
                </Grid>
              )}
            </Grid>
            ))}
          </Grid>

          <Grid item xs={12} sm={12} md={12} lg={12} sx={{ width: '100%', paddingTop:2, paddingBottom:2 }}>
            <Button type="submit" variant="contained" sx={{ float: 'right', borderRadius: '4px' }} onClick={handleRedirect}>Submit</Button>
            <Button type="button" variant="outlined" sx={{float:'left', borderRadius:'4px'}} onClick={handleAddField}>
              Add More
            </Button>
          </Grid>
          {/* </Grid> */}
        </CardContent>
      </Card>
    </>
  )
}

export default BoardRoomBooking;
