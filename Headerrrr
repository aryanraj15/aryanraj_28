// Import statements remain the same

export default function PersistentDrawerLeft({ setSelectedProjectId }) {
  // Existing state and functions remain the same

  //For Projects Dropdown
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const projects = parsedData.map((item) => item.project);
  const defaultProject = projects.length > 0 ? projects[0].name : "";

  const [selectedProject, setSelectedProject] = useState(defaultProject);
  const [selectedProjectDetails, setSelectedProjectDetails] =
    useState(defaultProject);

  const handleProjectChange = (e) => {
    setSelectedProject(e.target.value);

    const selectedProjectDetails = projects.find(
      (project) => project.name === e.target.value
    );
    setSelectedProjectDetails(selectedProjectDetails);

    setSelectedProjectId(selectedProjectDetails.id); // Update the selected project ID in App

    console.log("ProjectId::", selectedProjectDetails.id);
  };

  return (
    <Box sx={{ display: "flex" }}>
      <CssBaseline />
      <AppBar position="fixed" open={open}>
        <Toolbar sx={{ backgroundColor: "#004c99", color: "#fff" }}>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerOpen}
            edge="start"
            sx={{ mr: 2, ...(open && { display: "none" }) }}
          >
            <MenuIcon />
          </IconButton>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            onClick={handleDrawerClose}
            edge="start"
            sx={{ mr: 2, ...(!open && { display: "none" }) }}
          >
            <ChevronLeftIcon />
          </IconButton>
          <Grid
            container
            direction="row"
            rowSpacing={0}
            columnSpacing={2}
            justify="flex-end"
            alignItems="center"
          >
            <Grid item xs={12} sm={3} md={3} lg={3}>
              <Typography variant="h6" noWrap>
                {title ? title : "KPMG"}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={2.5} lg={2.5}>
              <Typography variant="h8" noWrap>
                {localStorage.getItem("fullname")}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={3} lg={3}>
              <Typography variant="h8" noWrap>
                {localStorage.getItem("designation")}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={2} md={3} lg={3}>
              {projects.length > 1 ? (
                <FormControl variant="standard" fullWidth>
                  <InputLabel style={{ color: "white" }}>Projects</InputLabel>
                  <Select
                    value={selectedProject}
                    onChange={handleProjectChange}
                    label="Project"
                    style={{ color: "white", marginBottom: "15px" }}
                  >
                    {projects.map((project) => (
                      <MenuItem key={project.id} value={project.name}>
                        {project.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              ) : (
                <Typography variant="body1">
                  {projects.length === 1
                    ? projects[0].name
                    : "No projects available"}
                </Typography>
              )}
            </Grid>
            <Grid item xs={2} sm={1} md={0.5} lg={0.5}>
              <PowerSettingsNewIcon
                onClick={handleLogout}
                sx={{ cursor: "pointer" }}
              />
            </Grid>
          </Grid>
        </Toolbar>
      </AppBar>
      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          "& .MuiDrawer-paper": {
            width: drawerWidth,
            boxSizing: "border-box",
            scrollbarWidth: "thin",
          },
        }}
        variant="persistent"
        anchor="left"
        open={open}
      >
        <DrawerHeader>
          <Box mr={1.5}>
            <Typography
              sx={{ py: 2, float: "left" }}
              display="flex"
              justifyContent="space-between"
              component={"div"}
            >
              <img src={logo_left} alt="YSR" width="150px" height="50px" />
            </Typography>
          </Box>
        </DrawerHeader>
        <Divider />
        <DrawerMenu />
      </Drawer>
      <Main open={open}>
        <DrawerHeader />
        <Outlet />
      </Main>
      <Footer position="fixed" open={open}>
        <Typography noWrap component="div">
          &copy; Site maintained by KPMG Advisory Services Pvt. Ltd.
        </Typography>
      </Footer>
    </Box>
  );
}











import React, { lazy, Suspense, useState } from "react";
import { Provider } from "react-redux";
import { Route, Routes } from "react-router-dom";
import { SnackbarProvider } from "./components/Snackbar";
import store from "./redux/store";
import PrivateRoutes from "./routes/PrivateRoutes";
import ScrollToTop from "./components/ScrollToTop";
import Header from "./layouts/Header";
import { ColorModeContextProvider } from "./utils/ColorModeContext";

/*****Pages******/
const Home = lazy(() => import("./pages/Home"));
const Login = lazy(() => import("./pages/Login/Login"));
const ForgotPassword = lazy(() => import("./pages/Login/forgotPassword"));
const Test2 = lazy(() => import("./pages/Test/test2"));
const Accordian = lazy(() => import("./pages/Accordian/AccordianParent"));

const ChartAdmin = lazy(() => import("./pages/charts/ChartAdmin"));
const ChartPartners = lazy(() => import("./pages/charts/ChartPartners"));
const MetricData = lazy(() => import("./pages/MasterAdmin/MetricData"));
const MetricsMaster = lazy(() => import("./pages/MasterAdmin/MetricsMaster"));
const PhasesMaster = lazy(() => import("./pages/MasterAdmin/PhasesMaster"));
const ProjectMaster = lazy(() => import("./pages/MasterAdmin/ProjectMaster"));
const QuestionsMaster = lazy(() => import("./pages/MasterAdmin/QuestionsMaster"));

const App = () => {
  return (
    <>
      <SnackbarProvider>
        <ColorModeContextProvider>
          <Provider store={store}>
            <AppRoutes />
          </Provider>
        </ColorModeContextProvider>
      </SnackbarProvider>
    </>
  );
};

const AppRoutes = () => {
  const [selectedProjectId, setSelectedProjectId] = useState('');

  return (
    <Suspense fallback={<div />}>
      <ScrollToTop />
      <Routes>
        <Route path="/" element={<Login />} exact />
        <Route path="/forgotpassword" element={<ForgotPassword />} />
        <Route element={<Header setSelectedProjectId={setSelectedProjectId} />}>
          <Route element={<PrivateRoutes />}>
            <Route path="/home" element={<Home />} />
            <Route path="/test2" element={<Test2 />} />
            <Route path="/chartadmin" element={<ChartAdmin selectedProjectId={selectedProjectId} />} />
            <Route path="/chartpartners" element={<ChartPartners />} />
            <Route path="/metricdata" element={<MetricData />} />
            <Route path="/metricsmaster" element={<MetricsMaster />} />
            <Route path="/phasesmaster" element={<PhasesMaster />} />
            <Route path="/projectmaster" element={<ProjectMaster />} />
            <Route path="/questionsmaster" element={<QuestionsMaster />} />
            <Route path="/accordian" element={<Accordian />} />
          </Route>
        </Route>
      </Routes>
    </Suspense>
  );
};

export default App;








import React, { useEffect, useState } from "react";
import { PieChart, Pie, Tooltip, Legend, Cell } from "recharts";
import { makeStyles } from "@material-ui/core/styles";
import Paper from "@material-ui/core/Paper";
import ReactSpeedometer from "react-d3-speedometer";
import useTitle from "../../hooks/useTitle";
import PageTitle from "../../layouts/PageTitle";
import axiosClient from "../../utils/AxiosInterceptor";
import { useSnackbar } from "../../components/Snackbar";

const COLORS = ["#4caf50", "#ba68c8", "#FFBB28"];
const useStyles = makeStyles((theme) => ({
  paper: {
    padding: theme.spacing(2),
    textAlign: "center",
    color: theme.palette.text.black,
    width: "50%",
    margin: "5px",
    boxShadow: "0px 0px 10px rgba(0,0,0,0.1)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "column",
    marginTop: "25px",
  },
}));

const ChartAdmin = ({ selectedProjectId }) => {
  const { showSnackbar } = useSnackbar();
  const classes = useStyles();
  const title = "Dashboard";
  const [pciResponse, setPciResponse] = useState([]);
  const [data, setData] = useState([]);
  useTitle(title);

  useEffect(() => {
    const retrievedData = localStorage.getItem("project");
    const parsedData = JSON.parse(retrievedData);
    const fallbackProjectId = parsedData.map((item) => item.project.id)[0];
    const projectId = selectedProjectId || fallbackProjectId;

    axiosClient
      .post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/metrics`, {
        projectId: projectId,
      })
      .then((response) => {
        if (response.data.statusCode === 200) {
          setPciResponse(
            response.data.result["PCI Score"].map((score) => {
              return {
                ...score,
                value: parseFloat(score.value),
              };
            })
          );
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        console.log(error);
        showSnackbar(
          error.response.data.message
            ? error.response.data.message
            : error.response.message,
          "error"
        );
      });

    axiosClient
      .post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/counts`, {
        projectId: projectId,
      })
      .then((response) => {
        const mappedResponse = response.data.result.map((item) => ({
          name: item.responseValue,
          totalCounts: item.totalCounts,
        }));
        if (response.data.statusCode === 200) {
          setData(mappedResponse);
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        console.log(error);
        showSnackbar(
          error.response.data.message
            ? error.response.data.message
            : error.response.message,
          "error"
        );
      });
  }, [selectedProjectId, showSnackbar]);

  const pciValue = pciResponse.map((item) => item.value);

  return (
    <div style={{ display: "flex" }}>
      <Paper className={classes.paper}>
        <PageTitle name="Distribution of Response" />
        <PieChart width={400} height={300} style={{ marginTop: "-10px" }}>
          <Pie
            data={data}
            labelLine={false}
            label
            outerRadius={100}
            fill="#8884d8"
            dataKey="totalCounts"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index]}></Cell>
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
      </Paper>
      <Paper className={classes.paper}>
        <div style={{ marginTop: "-15px" }}>
          <PageTitle name="Process Compliance Index (PCI)" />
        </div>
        <div style={{ marginTop: "-25px" }}>
          <ReactSpeedometer
            value={pciValue}
            minValue={0}
            maxValue={100}
            needleColor="black"
            startColor="red"
            endColor="green"
            segments={3}
            customSegmentStops={[0, 50, 80, 100]}
            segmentColors={["red", "orange", "green"]}
            needleTransitionDuration={4000}
            height={200}
            width={300}
            paddingVertical={50}
          />
        </div>
      </Paper>
    </div>
  );
};

export default ChartAdmin;


