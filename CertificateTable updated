import React, { useState, useEffect, useRef } from 'react';
import SearchTable from '../../../components/SearchTableAlt';
import { Box, Card, CardContent, IconButton, Stack, Button, Link, Dialog, DialogContent, TextField, DialogActions } from '@mui/material';
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import WalletIcon from '@mui/icons-material/Wallet';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns';
import Loader from '../../../components/Loader';
import GpsFixedIcon from '@mui/icons-material/GpsFixed';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import dayjs from 'dayjs';
import Cookies from "js-cookie";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import CachedIcon from "@mui/icons-material/Cached";
import SearchIcon from "@mui/icons-material/Search";
import SummarizeIcon from '@mui/icons-material/Summarize';
import swal from "sweetalert";
import { useLocation } from "react-router";
import { useSnackbar } from "../../../components/Snackbar";
import LeadgerCard from './LedgerCard';
import { Grid, Typography, Avatar, Paper } from '@mui/material';
import { styled } from "@mui/material/styles";

const FileLeave = () => {
    const title = 'Leave Applications';
    useTitle(title);

    const navigate = useNavigate();
    const { showSnackbar } = useSnackbar();
    const user = useSelector((state) => state.loginReducer);
    const userId = user.data.userdetails.user.userId;
    const [tableData, setTableData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [leaveBalance, setLeaveBalance] = useState([]);
    const [availableLeaves, setAvailableLeaves] = useState();
    const [availedLeaves, setAvailedLeaves] = useState();
    const [balanceLeaves, setBalanceLeaves] = useState();
    const [open, setOpen] = useState(false);
    const [requestStatus, setRequestStatus] = useState(null);
    const [reqRemarks, setReqRemarks] = useState(null);
    const [dubby, setDubby] = useState();
    const [selectAllApplications, setSelectAllApplications] = useState(false);
    const resetCheck = useRef();
    const location = useLocation();
    const [hover, setHover] = useState(false);  // State to track hover

    const Item = styled(Paper)(({ theme }) => ({
        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',
        ...theme.typography.body2,
        padding: theme.spacing(1),
        margin: 3,
        borderRadius: "10px",
        textAlign: 'center',
        color: theme.palette.text.secondary,
    }));

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const handleNavigation = () => {
        navigate('/leave');
    };

    const fetchDataOnLeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            };

            const response = await axios.post(`http://141.148.194.18:8052/leavemanagement/leave-balance-dropdown`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });

            let sortedLeaveBalanceData = response.data.result.map((value) => value);
            setLeaveBalance(sortedLeaveBalanceData);
        } catch (error) {
            console.error(error);
        }
    };

    const LeaveBalance = async () => {
        try {
            const payload = {
                userId: user.data.userdetails.user.userId,
            };

            const response = await axios.post(`http://141.148.194.18:8095/leavemanagement/leave-balances`, payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            if (response.data.statusCode === 200) {
                setAvailableLeaves(response.data?.result.availableLeaves);
                setAvailedLeaves(response.data?.result.availedLeaves);
                setBalanceLeaves(response.data?.result.balanceLeaves);
            }
        } catch (error) {
            console.error(error);
        }
    };

    useEffect(() => {
        setIsLoading(true);
        fetchDataOnLeaveBalance();
        LeaveBalance();
    }, []);

    const validationSchema = Yup.object().shape({
        LeaveStartDate: Yup.string().required("Leave Start Date is required").nullable(),
        LeaveEndDate: Yup.string().required("Leave End Date is required").nullable(),
    });

    const formik = useFormik({
        initialValues: {
            LeaveStartDate: null,
            LeaveEndDate: null,
        },
        validationSchema: validationSchema,
        enableReinitialize: true,
        onSubmit: (values) => {
            console.log(values);
        },
    });

    const handleResetForm = () => {
        swal({
            title: "Do you want to reset the search?",
            buttons: { cancel: "Cancel", confirm: "Confirm" },
        }).then((userClickedConfirm) => {
            if (userClickedConfirm) {
                formik.setFieldValue("LeaveStartDate", null);
                formik.setFieldValue("LeaveEndDate", null);
                resetCheck.current = true;
                handleFetchData();
            }
        });
    };

    const handleFetchData = async () => {
        try {
            const payload = {
                userId: userId,
                rqstFrom: resetCheck.current ? null : formik.values.LeaveStartDate,
                rqstTo: resetCheck.current ? null : formik.values.LeaveEndDate
            };

            const response = await axios.post("http://141.148.194.18:8052/leavemanagement/leave-applied-leaves", payload, {
                headers: {
                    Authorization: `Bearer ${Cookies.get("token")}`
                }
            });
            const formattedData = response.data.result.map((item, index) => {
                const fromDate = item.rqstFromDate + ":" + item.rqstFromTime;
                const toDate = item.rqstToDate + ":" + item.rqstToTime;
                return {
                    ...item,
                    index: index + 1,
                    fromDate: fromDate,
                    toDate: toDate,
                };
            });

            setTableData(formattedData);

            if (response.data.status === true) {
                showSnackbar("Data fetched successfully", "success");
            }
        } catch (error) {
            console.error(error);
        } finally {
            setIsLoading(false);
            resetCheck.current = false;
        }
    };

    useEffect(() => {
        handleFetchData();
        setIsLoading(true);
    }, []);

    const columns = [
        {
            field: "index",
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstId",
            headerName: "Leave ID",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link
                    sx={{ cursor: "pointer" }}
                    onClick={() => {
                        const requestId = params.row.rqstId;
                        navigate("/leaveapplicationview", { state: { requestId } });
                    }}
                >
                    {params.value}
                </Link>
            ),
        },
        {
            field: "leaveTypeDesc",
            headerName: "Leave Type",
            flex: 0.3,
            minWidth: 160,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "fromDate",
            headerName: "Leave Start",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "toDate",
            headerName: "Leave End",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "daysOfLeave",
            headerName: "Leave Duration",
            flex: 0.3,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstStatusDesc",
            headerName: "Leave Current Status",
            flex: 0.3,
            minWidth: 240,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "requestStatus",
            headerName: "Track Status",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link onClick={() => {
                    setReqRemarks(params.row.remarks);
                    setRequestStatus(params.value);
                    handleClickOpen();
                    setDubby(params.row.rqstId);
                }}>
                    <GpsFixedIcon color='primary' />
                </Link>
            )
        },
    ];

    return (
        <>
            {isLoading && <Loader />}
            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <WalletIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Leave Balance</H3>
                    </div>
                    <Card
                        onMouseEnter={() => setHover(true)}
                        onMouseLeave={() => setHover(false)}
                    >
                        <Box sx={{ flexGrow: 1, mt: 1, elevation: "0" }}>
                            <Grid container spacing={2} columns={16}>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Available Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availableLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    <Avatar />
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Availed Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {availedLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    <Avatar />
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                                <Grid item xs={5}>
                                    <Item>
                                        <Grid container spacing={2}>
                                            <Grid item xs={12} sm container>
                                                <Grid item xs container direction="column" spacing={2}>
                                                    <Grid item xs>
                                                        <Typography gutterBottom component="div">
                                                            Balance Leaves
                                                        </Typography>
                                                        <Typography variant="h6" gutterBottom>
                                                            {balanceLeaves} DAYS
                                                        </Typography>
                                                    </Grid>
                                                </Grid>
                                                <Grid item>
                                                    <Avatar />
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </Item>
                                </Grid>
                            </Grid>

                            {hover && (
                                <Grid container spacing={2} columns={16}>
                                    {leaveBalance.map((value, index) => (
                                        <LeadgerCard resData={value} key={index} />
                                    ))}
                                </Grid>
                            )}
                        </Box>
                    </Card>
                    <Grid sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                        <Button sx={{ float: 'right', borderRadius: '4px' }} variant={'contained'} onClick={handleNavigation}>Apply for a new leave</Button>
                    </Grid>
                </CardContent>
            </Card>

            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>
                        <SummarizeIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end"> Leave Applications</H3>
                    </div>
                    <Box component={"div"}>
                        <SearchTable
                            columns={columns}
                            data={tableData}
                            isCheckbox={false}
                            isHideDensity={false}
                            isHideExport={true}
                            isHideFilter={true}
                            isHideColumn={true}
                            isHidePaging={false}
                            name="abc"
                            id="hjjh"
                        />
                    </Box>
                </CardContent>
            </Card>
            <Dialog fullWidth maxWidth={'md'} open={open} onClose={handleClose}>
                <DialogContent>
                    <TrackLeaveRequestStatus rqstId={dubby} />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Close</Button>
                </DialogActions>
            </Dialog>
        </>
    );
};

export default FileLeave;
