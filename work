import React, { useState, useRef, useEffect } from 'react';
import { DayPilot, DayPilotCalendar, DayPilotNavigator } from "@daypilot/daypilot-lite-react";
import "./CalendarStyles.css";
import axios from 'axios';
import { useSelector } from "react-redux";
import Cookies from "js-cookie";

const styles = {
  wrap: {
    display: "flex"
  },
  left: {
    marginRight: "10px"
  },
  main: {
    flexGrow: "1"
  }
};

const Calendar = () => {
  const calendarRef = useRef();
  const user = useSelector((state) => state.loginReducer);

  const [calendarConfig, setCalendarConfig] = useState({
    durationBarVisible: false,
    timeRangeSelectedHandling: "Enabled",
    headerDateFormat: "dd/M/yyyy",

    onBeforeEventRender: args => {
      args.data.areas = [];
    }
  });

  const [events, setEvents] = useState([]);
  const [startDate, setStartDate] = useState(DayPilot.Date.today());
  const [endDate, setEndDate] = useState(DayPilot.Date.today().addDays(6));

  const handleEventMove = (args) => {
    args.preventDefault();
  };

  const fetchCalendarData = async () => {
    const rqstFrom = startDate.toString("yyyy-MM-dd");
    const rqstTo = endDate.toString("yyyy-MM-dd");

    try {
      const response = await axios.post(
        "http://141.148.194.18:8095/leavemanagement/calendar-view",
        { 
          userId: user.data.userdetails.user.userId,
          rqstFrom,
          rqstTo
        },
        { headers: { Authorization: `Bearer ${Cookies.get("token")}` } }
      );

      if (response.data.statusCode === 200) {
        setEvents(response.data.result);
      }
    } catch (error) {
      console.error("Error fetching user details:", error);
    }
  };

  useEffect(() => {
    fetchCalendarData();
  }, [startDate, endDate]);

  useEffect(() => {
    if (calendarRef.current) {
      calendarRef.current.control.update({ startDate, events });
    }
  }, [events]);

  return (
    <div style={styles.wrap}>
      <div style={styles.left}>
        <DayPilotNavigator
          selectMode={"Week"}
          onTimeRangeSelected={args => {
            setStartDate(args.start);
            setEndDate(args.end.addDays(-1)); // Adjusting to get the correct end date
          }}
        />
      </div>
      <div style={styles.main}>
        <DayPilotCalendar
          viewType={"Week"}
          businessBeginsHour={9}
          businessEndsHour={18}
          {...calendarConfig}
          ref={calendarRef}
          onEventMove={handleEventMove}
          onEventResize={handleEventMove}
        />
      </div>
    </div>
  );
};

export default Calendar;

import React, { useState, useRef, useEffect } from 'react';
import { DayPilot, DayPilotCalendar, DayPilotNavigator } from "@daypilot/daypilot-lite-react";
import "./CalendarStyles.css";
import axios from 'axios';
import { useSelector } from "react-redux";
import Cookies from "js-cookie";

const styles = {
  wrap: {
    display: "flex"
  },
  left: {
    marginRight: "10px"
  },
  main: {
    flexGrow: "1"
  }
};

const Calendar = () => {
  const calendarRef = useRef();
  const user = useSelector((state) => state.loginReducer);
  
  const [calendarConfig, setCalendarConfig] = useState({
    durationBarVisible: false,
    timeRangeSelectedHandling: "Enabled",
    headerDateFormat: "dd/M/yyyy",

    onBeforeEventRender: args => {
      args.data.areas = [];
    }
  });

  const [events, setEvents] = useState([]);
  const handleEventMove = (args) => {
    args.preventDefault();
  };

  const fetchCalendarData = async () => {
    try {
      const response = await axios.post(
        "http://141.148.194.18:8095/leavemanagement/calendar-view",
        { 
          userId: user.data.userdetails.user.userId,
          rqstFrom: "2024-05-19",
          rqstTo: "2024-05-25"
        
        },
        { headers: { Authorization: `Bearer ${Cookies.get("token")}` } }
      );

      if (response.data.statusCode === 200) {
        setEvents(response.data.result);
      }
    } catch (error) {
      console.error("Error fetching user details:", error);
    }
  };


  useEffect(() => {
    fetchCalendarData();
  }, [startDate.value, endDate.value]);

  useEffect(() => {
    if (calendarRef.current) {
      const startDate = DayPilot.Date.today();
      calendarRef.current.control.update({ startDate, events });
    }
  }, [events]);

  return (
    <div style={styles.wrap}>
      <div style={styles.left}>
        <DayPilotNavigator
          selectMode={"Week"}
          onTimeRangeSelected={args => {
            const startDate = args.start;
            const endDate = args.end;
            console.log("Start Date:", startDate.value);
            console.log("End Date:", endDate.value);
            calendarRef.current.control.update({ startDate });
          }}
        />
      </div>
      <div style={styles.main}>
        <DayPilotCalendar
          viewType={"Week"}
          businessBeginsHour={9}
          businessEndsHour={18}
          {...calendarConfig}
          ref={calendarRef}
          onEventMove={handleEventMove}
          onEventResize={handleEventMove}
        />
      </div>
    </div>
  );
};

export default Calendar;
