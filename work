import React, { useState, useEffect } from "react";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import Grid from "@mui/material/Grid";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import { Card, CardContent, Slide } from "@mui/material";
import useTitle from "../../../hooks/useTitle";
import PageTitle from "../../../layouts/PageTitle";
import { useLocation, useNavigate } from 'react-router-dom';
import dayjs from 'dayjs';
import EventBusyIcon from '@mui/icons-material/EventBusy';
import { H3 } from "../../../components/Typography";
import AlertConfirm from "react-alert-confirm";
import { useSnackbar } from "../../../components/Snackbar";
import "react-alert-confirm/lib/style.css";
import axios from "axios";
import { useSelector } from "react-redux";
import Snackbar from '@mui/material/Snackbar';
import Loader from '../../../components/Loader';
import Alert from '@mui/material/Alert';
import Stack from '@mui/material/Stack';
import Cookies from "js-cookie";
function TransitionLeft(props) {
  return <Slide {...props} direction="left" />;
}
const LeaveApplicationCancel = () => {

  const location = useLocation();
  const user = useSelector((state) => state.loginReducer);
  const data = location?.state?.requestId;
  const [leaveTypeDesc, setLeaveTypeDesc] = useState();
  const [reason, setReason] = useState();
  const [preffix, setPreffix] = useState();
  const [suffix, setSuffix] = useState();
  const [managerName, setManagerName] = useState();
  const [fetchData, setFetchData] = useState();
  const [startDate, setStartDate] = useState();
  const [endDate, setEndDate] = useState();
  const [startTime, setStartTime] = useState();
  const [endTime, setEndTime] = useState();
  const [emergencydisplay, setEmergencydisplay] = useState();
  const [stationLeave, setStationLeave] = useState();
  const [openToast, setOpenToast] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [toastSeverity, setToastSeverity] = useState("info");
  const [isLoading, setIsLoading] = useState(false);
  const [rqstStatus, setRqstStatus] = useState();
  const [stepAction , setStepAction]=useState();



  // const [flag, setFlag] = useState(false);

  const formik = useFormik({
    initialValues: {
      Leave: '',
      ApplyingDueToAnyEmergency: '',
      StationLeave: '',
      LeaveStartDate: "",
      LeavestartTime: "",
      LeaveEndDate: "",
      LeaveEndTime: '',
      Prefix: '',
      Suffix: '',
      ReportingDesignation: '',
      Description: '',
    },
    onSubmit: (values) => {
      // Handle form submission or API integration here
      handleRedirect();
    },
  });

  const CancelLeaveDetails = async () => {

    try {
      const body = {
        userId: user.data.userdetails.user.userId,
        rqstId: location?.state?.requestId,
        currentTimeDate: "2024-01-03T10:00:00.000",

      };

      console.log("the saved details  body", body);
      const res = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/cancel-leave-request`,
        body,
        {
          headers: {
              Authorization: `Bearer ${Cookies.get("token")}`
          }
      }

      );
      console.log("the saved details  areeeeee", res);
      if (res.data.statusCode == 200) {
        console.log("the result ", res.data.result);
        console.log("the result ", res.data.message);
        // setToastMessage( res.data.message);
        // setToastSeverity("success");
        // setOpenToast(true);
        navigate('/viewleave')
        // alert(res.data.message);
        showSnackbar("Leave request Cancelled Successfully", 'success');

      }
    } catch (error) {
      // alert("Data has not saved", error);
      showSnackbar("Your leave request have crossed 48 hours", 'error');
      console.log(error.message);
    }

  };
  const fetchDataOnLeaveId = async () => {
    try {
      const payload = {
        rqstId: data
      }

      const response = await axios.post(`http://141.148.194.18:8052/leavemanagement/get-leave-detail`, payload, {
        headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
        }
    });

      console.log(response.status);
      console.log(response.data.result.isEmergencyLeave);
      const exact3 = response.data.result.isEmergencyLeave;
      const exact4 = response.data.result.isStationLeave;

      if (exact3 === true) {
        setEmergencydisplay("YES");

      } else {
        setEmergencydisplay("NO");
      }

      if (exact4 === true) {
        setStationLeave("YES");

      } else {
        setStationLeave("NO");
      }
      if (response.status === 200) {
        setFetchData(response.data.result);
        setStartDate(response.data.result.rqstFromDate);
        setEndDate(response.data.result.rqstToDate);
        setStartTime(response.data.result.rqstFromTime);
        setEndTime(response.data.result.rqstToTime);
        setLeaveTypeDesc(response.data.result.leaveTypeDesc);
        setPreffix(response.data.result.preffix);
        setSuffix(response.data.result.suffix);
        setManagerName(response.data.result.managerName);
        setReason(response.data.result.reason);
        setRqstStatus(response.data.result.rqstStatus);

      }
    } catch (error) {
      console.error(error)
    }
    finally {
      setIsLoading(false);
    }
  }
  const fetchStepAction = async () => {
    try {
      const payload = {
        rqstId: data
      }

      const response = await axios.post(`http://141.148.194.18:8052/leavemanagement/step-action`, payload, {
        headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
        }
    });

      console.log(response.status);
      console.log(response.data.result);

      // if (response.status === 200) {
      //   setStepAction(response.data.result);


      // }
    } catch (error) {
      console.error(error)
    }
    finally {
      setIsLoading(false);
    }
  }
  
  console.log(stepAction);


  useEffect(() => {
    fetchDataOnLeaveId();
    fetchStepAction();
    setIsLoading(true);
  }, [])

  console.log(data);
  console.log(fetchData);
  console.log(formik.values.LeaveEndDate);
  console.log(formik.values.LeavestartTime);
  console.log(formik.values.LeaveEndTime);

  const title = "Leave Application Form";
  useTitle(title);

  const navigate = useNavigate();

  const handleRedirect = () => {
    callConfirmDialog();
  }
  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpenToast(false);
  };

  const { showSnackbar } = useSnackbar();

  const callConfirmDialog = async () => {
    console.log('kp-confirm');
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to cancel your leave request?",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });
    if (action) {
      console.log('kp-saved');
      CancelLeaveDetails();
      // showSnackbar("Leave Request Canceled", 'success');
      // submitDetails(values, resetForm);
    } else {
      //   setIsSubmit(false);
      showSnackbar('Leave Cancel request is not saved!', 'error')
    }
  };
  return (
    <>
      {isLoading && <Loader />}
      <div>
        <Snackbar
          open={openToast}
          autoHideDuration={6000}
          anchorOrigin={{ vertical: "top", horizontal: "right" }}
          onClose={handleClose}
          TransitionComponent={TransitionLeft}
        >
          <Alert
            onClose={handleClose}
            severity={toastSeverity}
            sx={{
              width: "100%",
              padding: { sm: "15px", xs: "10px" },
              borderRadius: "15px",
              fontSize: { sm: "16px", xs: "14px" },
              boxShadow: "0 0 10px #999",
              marginTop: { sm: "25px", xs: "20px" },
            }}
          >
            {toastMessage}
          </Alert>
        </Snackbar>
      </div>

      <Card>
        <CardContent>
          <div
            style={{
              display: "flex",
              justifyContent: "left",
              alignItems: "center",
              marginBlock: 15,
              borderBottom: "0.5px solid #d1d1cf",
            }}
          >
            <EventBusyIcon sx={{ fontSize: "25px", color: "#246cb5" }} />
            <H3
              sx={{ fontSize: "15px", color: "#246cb5" }}
              marginLeft={0.5}
              my={0.5}
              display="flex"
              justifyContent="center"
              alignItems="flex-end"
            >
              Cancel Leave Request
            </H3>
          </div>
          <Box component={"form"} onSubmit={formik.handleSubmit} noValidate>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="Leave"
                  name="Leave"
                  size="small"
                  sx={{ width: "100%" }}
                  value={leaveTypeDesc}
                  label="Leave Type"
                  disabled
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.leaveTypeDesc}`.length >= 0),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="ApplyingDueToAnyEmergency"
                  name="ApplyingDueToAnyEmergency"
                  sx={{ width: "100%" }}
                  size="small"
                  // value={fetchData?.isEmergencyLeave}
                  value={emergencydisplay}
                  label="Applying due to any emergency?"
                  disabled
                  InputLabelProps={{
                    shrink: Boolean(
                      `${fetchData?.isEmergencyLeave}`.length >= 0
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="StationLeave"
                  name="StationLeave"
                  sx={{ width: "100%" }}
                  size="small"
                  // value={fetchData?.isStationLeave}
                  value={stationLeave}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.isStationLeave}`.length >= 0),
                  }}
                  label="Station Leave"
                  disabled
                />
              </Grid>
            </Grid>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveStartDate"
                  name="LeaveStartDate"
                  sx={{ width: "100%" }}
                  size="small"
                  value={startDate}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstFrom}`.length >= 0),
                  }}
                  label="Leave Start Date"
                  disabled
                />
              </Grid>

              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeavestartTime"
                  name="LeavestartTime"
                  sx={{ width: "100%" }}
                  size="small"
                  value={startTime}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstFrom}`.length >= 0),
                  }}
                  label="Start Time"
                  disabled
                />
              </Grid>
            </Grid>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveEndDate"
                  name="LeaveEndDate"
                  sx={{ width: "100%" }}
                  size="small"
                  value={endDate}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstTo}`.length >= 0),
                  }}
                  label="Leave End Date"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveEndTime"
                  name="LeaveEndTime"
                  sx={{ width: "100%" }}
                  size="small"
                  value={endTime}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstTo}`.length >= 0),
                  }}
                  label="End Time"
                  disabled
                />
              </Grid>
            </Grid>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="Prefix"
                  name="Prefix"
                  sx={{ width: "100%" }}
                  size="small"
                  value={preffix}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.preffix}`.length >= 0),
                  }}
                  label="Prefix"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="Suffix"
                  name="Suffix"
                  sx={{ width: "100%" }}
                  size="small"
                  value={suffix}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.suffix}`.length >= 0),
                  }}
                  label="Suffix"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="ReportingDesignation"
                  name="ReportingDesignation"
                  sx={{ width: "100%" }}
                  disabled
                  size="small"
                  value={managerName}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.managerName}`.length >= 0),
                  }}
                  label="Reporting User"
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={8}>
                <TextField
                  margin="0"
                  id="Description"
                  name="Description"
                  sx={{ width: "100%" }}
                  disabled
                  // InputProps={{readOnly:true}}
                  multiline
                  value={reason}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.reason}`.length >= 0),
                  }}
                  rows={4}
                  label="Reason/Description"
                />
              </Grid>
         
             
              {/* {rqstStatus === 264 || stepAction === null ? (
                <Stack sx={{ width: "100%" }} spacing={2}>
                  <Alert severity="warning">
                    Your Leave Request has already been Cancelled / Rejected.
                  </Alert>
                </Stack>
              ) : (
                <Grid
                  item
                  xs={12}
                  sm={12}
                  md={12}
                  lg={12}
                  sx={{ width: "100%" }}
                >
                  <Button
                    type="submit"
                    variant="contained"
                    color="error"
                    sx={{ float: "right", borderRadius: "4px" }}
                    onClick={handleRedirect} 
                  >
                    Cancel Leave Request
                  </Button>
                </Grid>
              )} */}


            </Grid>
          </Box>
        </CardContent>
      </Card>
    </>
  );
}

export default LeaveApplicationCancel;











{"status":true,"message":"No action found","result":null,"statusCode":200}
fetchStepAction

 <Grid
                  item
                  xs={12}
                  sm={12}
                  md={12}
                  lg={12}
                  sx={{ width: "100%" }}
                >
                  <Button
                    type="submit"
                    variant="contained"
                    color="error"
                    sx={{ float: "right", borderRadius: "4px" }}
                    onClick={handleRedirect} 
                  >
                    Cancel Leave Request
                  </Button>
                </Grid>


<Stack sx={{ width: "100%" }} spacing={2}>
                  <Alert severity="warning">
                    Your Leave Request has already been Cancelled / Rejected.
                  </Alert>
                </Stack>


if (response.status === 200) {
      //   setStepAction(response.data.result);


      // }








