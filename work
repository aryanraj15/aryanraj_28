// Input date in dd/mm/yyyy format
var inputDate = '15/02/2024';

// Check if inputDate is null or undefined before splitting
if (inputDate) {
    // Split the date string into day, month, and year
    var parts = inputDate.split('/');
    var day = parts[0];
    var month = parts[1];
    var year = parts[2];

    // Rearrange the parts to the yyyy-mm-dd format
    var outputDate = year + '-' + month + '-' + day;

    console.log(outputDate); // Output: 2024-02-15
} else {
    console.log("Input date is null or undefined.");
}



import React, { useState, useEffect } from "react";
import useTitle from "../../../hooks/useTitle";
import PageTitle from "../../../layouts/PageTitle";
import { TextareaAutosize } from "@mui/base/TextareaAutosize";
import { useLocation, useNavigate } from "react-router-dom";
import { H3 } from "../../../components/Typography";
import AlertConfirm from "react-alert-confirm";
import Alert from '@mui/material/Alert';
import Snackbar from '@mui/material/Snackbar';
import { useSnackbar } from "../../../components/Snackbar";
import "react-alert-confirm/lib/style.css";
import dayjs, { Dayjs } from "dayjs";
import LeadgerCard from "./LedgerCard";
import { useSelector } from "react-redux";
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Cookies from "js-cookie";

function TransitionLeft(props) {
  return <Slide {...props} direction="left" />;
}
const today = dayjs();

const LeaveRequestDetails = () => {
  const [leaveBalance, setLeaveBalalnce] = useState([]);
  const [selectedLeaveStartDate, setSelectedLeaveStartDate] = useState(null);
  const [remarks, setRemarks] = useState("");
  const [clicked, setClicked] = useState(false);
  const [startTimeList, setStartTimeList] = useState([]);
  const [endTimeList, setEndTimeList] = useState([]);
  const remarksMaxLength = 300;
  const location = useLocation();
  const data = location?.state?.requestId;
  const [leaveTypeDesc, setLeaveTypeDesc] = useState();
  const [reason, setReason] = useState();
  const [preffix, setPreffix] = useState();
  const [suffix, setSuffix] = useState();
  const [managerName, setManagerName] = useState();
  const [fetchData, setFetchData] = useState();
  const [startDate, setStartDate] = useState();
  const [endDate, setEndDate] = useState();
  const [fetchuserId, setFetchuserId] = useState();
  const [startTime, setStartTime] = useState();
  const [endTime, setEndTime] = useState();
  const [emergencydisplay, setEmergencydisplay] = useState();
  const [stationLeave, setStationLeave] = useState();
  const [openToast, setOpenToast] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [toastSeverity, setToastSeverity] = useState("info");
  const [isLoading, setIsLoading] = useState(false);
  const [isactive, setIsActive] = useState(true);
  const [stepId, setStepId] = useState({});
  const [requestStartDate, setRequestStartDate] = useState("");
  const [requestEndDate, setRequestEndDate] = useState("");
  const [requestStartTime, setRequestStartTime] = useState("");
  const [requestEndTime, setRequestEndTime] = useState("");
  const [trackData, setTrackData] = useState([]);
  const [trackhide, setTrackhide] = useState(false);
  const user = useSelector((state) => state.loginReducer);
  
  const validationSchema = Yup.object().shape({

    remarks: Yup.string()
      .required("Remarks is required")
      .nullable()
      .test(
        "word-count",
        "Your word length is greater than 200 words",
        (value) => {
          if (!value) return true; // Skip validation if the value is empty or null
          const wordCount = value.trim().split(/\s+/).length;
          return wordCount <= 200;
        }
      ),
  });

  const formik = useFormik({
    initialValues: {
      LeaveStartDate: null,
      LeavestartTime: "",
      LeaveEndDate: null,
      LeaveEndTime: "",
      remarks: "",
    },

    validationSchema: validationSchema,
    onSubmit: (values) => {
      console.log(values);
    },
  });


  useEffect(() => {
    if (fetchuserId) {
      fetchDataOnLeaveBalance();
    }
  }, [fetchuserId]);

  useEffect(() => {
    fetchDataOnLeaveId();
    fetchButtonDetails();
    statusTracker();
    axios
      .get(`http://141.148.194.18:8052/leavemanagement/leave-from-dropdown`, {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      })
      .then((response) => {
        let sortedDropdownfromData = response.data.result.map((value) => {
          value.label = value.label;
          return value;
        });
        setStartTimeList(sortedDropdownfromData);
        console.log(sortedDropdownfromData);
      })
      .catch((error) => {
        setStartTimeList([]);
        console.log(error);
      });

    axios
      .get(`http://141.148.194.18:8052/leavemanagement/leave-to-dropdown`, {
        headers: {
          Authorization: `Bearer ${Cookies.get("token")}`,
        },
      })
      .then((response) => {
        let sortedDropdowntoData = response.data.result.map((value) => {
          value.label = value.label;
          return value;
        });

        setEndTimeList(sortedDropdowntoData);
        console.log(sortedDropdowntoData);
      })
      .catch((error) => {
        setEndTimeList([]);
        console.log(error);
      });
  }, []);

  const fetchDataOnLeaveId = async () => {
    try {
      const payload = {
        rqstId: data,
      };

      const response = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/get-leave-detail`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );

      console.log(response.status);
      console.log(response.data.result);

      if (response.status === 200) {
        const exact3 = response.data.result.isEmergencyLeave;
        const exact4 = response.data.result.isStationLeave;

        if (exact3 === true) {
          setEmergencydisplay("YES");
        } else {
          setEmergencydisplay("NO");
        }

        if (exact4 === true) {
          setStationLeave("YES");
        } else {
          setStationLeave("NO");
        }
        if (response.status === 200) {
          setFetchData(response.data.result);
          setStartDate(response.data.result.rqstFromDate);
          setEndDate(response.data.result.rqstToDate);
          setStartTime(response.data.result.rqstFromTime);
          setEndTime(response.data.result.rqstToTime);
          setLeaveTypeDesc(response.data.result.leaveTypeDesc);
          setPreffix(response.data.result.preffix);
          setSuffix(response.data.result.suffix);
          setManagerName(response.data.result.managerName);
          setReason(response.data.result.reason);
          setIsActive(response.data.result.isActive);
          setFetchuserId(response.data.result.userId);

          var date_start = response.data.result.rqstFromDate;
          var parts = date_start.split("/");
          var FethStartDate = parts[0] + "-" + parts[1] + "-" + parts[2];
          console.log(FethStartDate);
          setRequestStartDate(FethStartDate);
          // console.log(requestStartDate);

          var date_end = response.data.result.rqstToDate;
          var parts = date_end.split("/");
          var FethendDate = parts[0] + "-" + parts[1] + "-" + parts[2];
          console.log(FethendDate);
          setRequestEndDate(FethendDate);
          // console.log(requestEndDate);

        }
      }
    } catch (error) {
      console.error(error);
    } finally {
      // setIsLoading(false);
    }
  };

  const statusTracker = async () => {
    try {
      const body = {
        rqstId: data,

      };

      console.log("Status Tracker", body);
      const res = await axios.post(
        `http://141.148.194.18:8095/leavemanagement/track-approve-table`,
        body,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
          }
        }

      );
      console.log("Status Tracker", res);
      if (res.data.result.length > 0) {
        console.log("the result ", res.data.result);
        setTrackData(res.data.result);
        setTrackhide(true);

      }
    } catch (error) {
      alert("No data found", error);
      console.log(error.message);
    }
  };

  const fetchButtonDetails = async () => {
    try {
      const payload = {
        rqstId: data,
      };

      const response = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/step-action`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );

      console.log(response.status);
      console.log(response.data.result);

      if (response.status === 200) {
        // Extract stepId for Approve and Reject actions
        const approveAction = response.data.result.find(
          (action) => action.action === "Approve"
        );
        const rejectAction = response.data.result.find(
          (action) => action.action === "Reject"
        );

        if (approveAction && rejectAction) {
          // Set stepId for Approve and Reject buttons
          setStepId({
            approve: approveAction.stepId,
            reject: rejectAction.stepId,
          });
        }
      }
    } catch (error) {
      console.error(error);
    }
  };

  console.log(formik.values.remarks);


  const saveLeaveApproveDetails = async (prop) => {
    let formattedStartDate = null;

    let formattedEndDate = null;

    if (formik.values.LeaveStartDate) {
      formattedStartDate = dayjs(formik.values.LeaveStartDate).format(
        "YYYY-MM-DD"
      );
    }
    if (formik.values.LeaveEndDate) {
      formattedEndDate = dayjs(formik.values.LeaveEndDate).format("YYYY-MM-DD");
    }



    try {
      const body = {
        rqstId: data,
        approvedFrom: formattedStartDate,
        approvedTimeFrom: formik.values.LeavestartTime,
        approvedTo: formattedEndDate,
        approvedTimeTo: formik.values.LeaveEndTime,
        updBy: user.data.userdetails.user.userId,
        status: prop === "Approve" ? stepId.approve : stepId.reject,
        finalRemarks: formik.values.remarks,
      };

      console.log("the saved details  body", body);
      const res = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/update-status`,
        body,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      console.log("the saved details  areeeeee", res);
      if (res.data.statusCode === 200) {
        console.log("the result ", res.data.result);
          
        setOpenToast(true);
        showSnackbar("Saved Successfully", "success");
        navigate("/leave-account");
      } else if(res.data.statusCode === 204){
        setToastMessage(res.data.message)
        setToastSeverity("error");
        setOpenToast(true);
      }
    } catch (error) {

      alert("Data has not saved", error);
      console.log(error.message);
    }
  };

  const fetchDataOnLeaveBalance = async () => {
    try {
      const payload = {
        userId: fetchuserId,
      };

      const response = await axios.post(
        `http://141.148.194.18:8052/leavemanagement/leave-balance-dropdown`,
        payload,
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      let sortedLeaveBallenceData = response.data.result.map((value) => {
        return value;
      });

      setLeaveBalalnce(sortedLeaveBallenceData);
      console.log(sortedLeaveBallenceData);
    } catch (error) {
      console.error(error);
    }
  };

  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpenToast(false);
  };

  const title = "Leave Request Form";
  useTitle(title);
  const { showSnackbar } = useSnackbar();
  const navigate = useNavigate();

  const handleSubmit = (prop) => {
    if (formik.values.remarks.length === 0) {
      showSnackbar("Please fill remarks", "error");
      return;
    }
    if (prop === "Approve" || prop === "Reject") {
      callConfirmDialog(prop);
    }
    // console.log('Step ID', stepID[prop]);
  };
  
  
  
  return (
    <>
      <Card>
        <CardContent>
          {/* <PageTitle name={"Apply for a purchase"} />
           */}
          <div
            style={{
              display: "flex",
              justifyContent: "left",
              alignItems: "center",
              marginBlock: 15,
              borderBottom: "0.5px solid #d1d1cf",
              marginTop: "30px",
            }}
          >
            <FaceIcon sx={{ fontSize: "25px", color: "#246cb5" }} />
            <H3
              sx={{ fontSize: "15px", color: "#246cb5" }}
              marginLeft={0.5}
              my={0.5}
              display="flex"
              justifyContent="center"
              alignItems="flex-end"
            >
              Leave Request Details
            </H3>
          </div>
          <Box component={"form"} onSubmit={formik.handleSubmit} noValidate>
  

            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveStartDate"
                  name="LeaveStartDate"
                  sx={{ width: "100%" }}
                  size="small"
                  value={startDate}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstFrom}`.length >= 0),
                  }}
                  label="Leave Start Date"
                  disabled
                />
              </Grid>

              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeavestartTime"
                  name="LeavestartTime"
                  sx={{ width: "100%" }}
                  size="small"
                  value={startTime}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstFrom}`.length >= 0),
                  }}
                  label="Start Time"
                  disabled
                />
              </Grid>
            </Grid>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveEndDate"
                  name="LeaveEndDate"
                  sx={{ width: "100%" }}
                  size="small"
                  value={endDate}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstTo}`.length >= 0),
                  }}
                  label="Leave End Date"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="LeaveEndTime"
                  name="LeaveEndTime"
                  sx={{ width: "100%" }}
                  size="small"
                  value={endTime}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.rqstTo}`.length >= 0),
                  }}
                  label="End Time"
                  disabled
                />
              </Grid>
            </Grid>

            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="Prefix"
                  name="Prefix"
                  sx={{ width: "100%" }}
                  size="small"
                  value={preffix}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.preffix}`.length >= 0),
                  }}
                  label="Prefix"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="Suffix"
                  name="Suffix"
                  sx={{ width: "100%" }}
                  size="small"
                  value={suffix}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.suffix}`.length >= 0),
                  }}
                  label="Suffix"
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  margin="0"
                  id="ReportingDesignation"
                  name="ReportingDesignation"
                  sx={{ width: "100%" }}
                  disabled
                  size="small"
                  value={managerName}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.managerName}`.length >= 0),
                  }}
                  label="Reporting User"
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={8}>
                <TextField
                  margin="0"
                  id="Description"
                  name="Description"
                  sx={{ width: "100%" }}
                  disabled
                  // InputProps={{readOnly:true}}
                  multiline
                  value={reason}
                  InputLabelProps={{
                    shrink: Boolean(`${fetchData?.reason}`.length >= 0),
                  }}
                  rows={4}
                  label="Description"
                />
              </Grid>
            </Grid>
          </Box>
        </CardContent>
      </Card>
      <Card>
        <CardContent>
          <div
            style={{
              display: "flex",
              justifyContent: "left",
              alignItems: "center",
              marginBlock: 15,
              borderBottom: "0.5px solid #d1d1cf",
              marginTop: "30px",
            }}
          >
            <AssignmentTurnedInIcon
              sx={{ fontSize: "25px", color: "#246cb5" }}
            />
            <H3
              sx={{ fontSize: "15px", color: "#246cb5" }}
              marginLeft={0.5}
              my={0.5}
              display="flex"
              justifyContent="center"
              alignItems="flex-end"
            >
              Leave Approve
            </H3>
          </div>


          {trackhide && (
            <Card sx={{ my: 2 }} >
              <CardContent>
                <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf" }}>

                  <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end">Track Leave Request</H3>
                </div>
                <Box component={"div"} >
                  <TableContainer>
                    <Table aria-label="simple table">
                      <TableHead>
                        <TableRow>
                          <TableCell><h7><b>S.NO</b></h7></TableCell>
                          <TableCell><h7><b>Updated By</b></h7></TableCell>
                          <TableCell><h7><b>Approve From</b></h7></TableCell>
                          <TableCell><h7><b>Approve To</b></h7></TableCell>

                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {trackData.map((row, index) => (
                          <TableRow
                            key={index}
                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                          >
                            <TableCell component="th" scope="row">
                              {index + 1}
                            </TableCell>
                            <TableCell>{row.updBy}</TableCell>
                            <TableCell>{row.approveFrom}</TableCell>
                            <TableCell>{row.approveTo}</TableCell>

                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>




                </Box>
              </CardContent>
            </Card>

          )}

          <Card sx={{ my: 2 }} >
              <CardContent>
          <Box sx={{ flexGrow: 1, mt: 2, elevation: "0" }}>
            <Grid
              container
              spacing={2}
              direction="row"
              alignItems="center"
            // justifyContent="center"
            // sx={{}}
            >
              <Grid item xs={12} sm={6} md={4} lg={4}>
                <LocalizationProvider
                  dateAdapter={AdapterDayjs}
                  adapterLocale={"en-gb"}
                >
                  <DatePicker
                    id="LeaveStartDate"
                    name="LeaveStartDate"
                    // minDate={today}
                    format="DD/MM/YYYY"
                    label="Leave Start Date"
                    slotProps={{ textField: { size: "small" } }}
                    sx={{ width: "100%" }}
                    // inputFormat="DD/MM/YYYY"
                    value={
                      formik.values.LeaveStartDate ||
                      dayjs(requestStartDate, "DD-MM-YYYY")
                    }
                
                    onChange={(date) => {
                      const formattedDate = dayjs(date).format("MM-DD-YYYY");
                      formik.setFieldValue("LeaveStartDate", formattedDate);
                      setSelectedLeaveStartDate(date);
                    }}
                    renderInput={(params) => (
                      <TextField
                        size="small"
                        fullWidth
                        margin="0"
                        {...params}
                        error={
                          formik.touched.LeaveStartDate &&
                          Boolean(formik.errors.LeaveStartDate)
                        }
                        helperText={
                          formik.touched.LeaveStartDate &&
                          formik.errors.LeaveStartDate
                        }
                        onBlur={formik.handleBlur}
                      />
                    )}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid item xs={12} sm={6} md={4} lg={4}>
                <Autocomplete
                  margin="0"
                  id="LeavestartTime"
                  name="LeavestartTime"
                  options={startTimeList}
                  sx={{ width: "100%" }}
                  fullWidth
                  value={
                    startTimeList.find(
                      (option) => option.typeId === formik.values.LeavestartTime
                    ) || null
                  }
                  onChange={(e, value) => {
                    if (value === null) {
                      formik.setFieldValue("LeavestartTime", null);
                    } else formik.setFieldValue("LeavestartTime", value.typeId);
                    formik.setFieldValue("LeaveEndTime", null);
                  }}
                  getOptionLabel={(value) => value.typeName}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Time"
                      size="small"
                      onBlur={formik.handleBlur}
                      helperText={
                        formik.errors.LeavestartTime &&
                          formik.touched.LeavestartTime
                          ? formik.errors.LeavestartTime
                          : null
                      }
                      error={
                        formik.errors.LeavestartTime &&
                          formik.touched.LeavestartTime
                          ? true
                          : false
                      }
                    />
                  )}
                />
              </Grid>
            </Grid>
            <Grid
              container
              spacing={2}
              direction="row"
              alignItems="center"
            // justifyContent="center"
            // sx={{}}
            >
              <Grid item xs={12} sm={6} md={4} lg={4}>
                <LocalizationProvider
                  dateAdapter={AdapterDayjs}
                  adapterLocale={"en-gb"}
                >
                  <DatePicker
                    margin="0"
                    id="LeaveEndDate"
                    name="LeaveEndDate"
                    // minDate={today}
                    slotProps={{ textField: { size: "small" } }}
                    shouldDisableDate={(date) =>
                      selectedLeaveStartDate
                        ? date < selectedLeaveStartDate
                        : false
                    }
                    label="Leave End Date"
                    sx={{ width: "100%" }}
                    format="DD/MM/YYYY"
                    // value={formik.values.LeaveEndDate}
                    value={
                      formik.values.LeaveEndDate ||
                      dayjs(requestEndDate, "DD-MM-YYYY")
                    }
                    onChange={(date) => {
                      const formattedDate = dayjs(date).format("MM-DD-YYYY");
                      formik.setFieldValue("LeaveEndDate", formattedDate);
                    }}
                    renderInput={(params) => (
                      <TextField margin="0" {...params} />
                    )}
                  />
                </LocalizationProvider>
              </Grid>
              <Grid item xs={12} sm={6} md={4} lg={4}>
                <Autocomplete
                  margin="0"
                  id="LeaveEndTime"
                  name="LeaveEndTime"
                  options={filterEndTimeValues(formik.values.LeavestartTime)} // Use the filtered values
                  sx={{ width: "100%" }}
                  fullWidth
                  value={
                    endTimeList.find(
                      (option) => option.typeId === formik.values.LeaveEndTime
                    ) || null
                  }
                  onChange={(e, value) => {
                    if (value === null) {
                      formik.setFieldValue("LeaveEndTime", null);
                    } else formik.setFieldValue("LeaveEndTime", value.typeId);
                  }}
                  getOptionLabel={(value) => value.typeName}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      label="Time"
                      size="small"
                      onBlur={formik.handleBlur}
                      helperText={
                        formik.errors.LeaveEndTime &&
                          formik.touched.LeaveEndTime
                          ? formik.errors.LeaveEndTime
                          : null
                      }
                      error={
                        formik.errors.LeaveEndTime &&
                          formik.touched.LeaveEndTime
                          ? true
                          : false
                      }
                    />
                  )}
                />
              </Grid>
            </Grid>

            

            <Grid
              item
              xs={12}
              sm={12}
              md={12}
              lg={12}
              sx={{ width: "100%", columnGap: "20px" }}
            >
              {stepId.approve && (
                <Grid item>
                  <Button
                    type="submit"
                    variant="contained"
                    sx={{ float: "right", borderRadius: "4px" }}
                    onClick={() => handleSubmit("Approve")}
                  >
                    Approve
                  </Button>
                </Grid>
              )}
              {stepId.reject && (
                <Grid item>
                  <Button
                    type="submit"
                    variant="contained"
                    sx={{
                      float: "right",
                      marginRight: "12px",
                      borderRadius: "4px",
                    }}
                    onClick={() => handleSubmit("Reject")}
                  >
                    Reject
                  </Button>
                </Grid>
              )}
            </Grid>
          </Box>
          </CardContent>
          </Card>
        </CardContent>
      </Card>
    </>
  );
};

export default LeaveRequestDetails;
