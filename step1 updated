
import React, { useEffect, useState } from "react";
import * as Yup from 'yup';
import { useFormik } from 'formik';
import axios from 'axios';
import {
    Grid,
    TextField,
    Box,
    Card,
    FormControl,
    FormLabel,
    RadioGroup,
    FormControlLabel,
    Radio,
    Tooltip,
    Divider,
    CardContent,
    CardHeader,
    Checkbox,
    Typography

} from "@mui/material";
import { styled } from '@mui/material/styles';
import Button from '@mui/material/Button';
import Autocomplete from "@mui/material/Autocomplete";
import dayjs from "dayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import AccordionDetails from "@mui/material/AccordionDetails";
import PersonAdd from "@mui/icons-material/PersonAdd";
import PinDropTwoToneIcon from "@mui/icons-material/PinDropTwoTone";
import AccountCircleTwoToneIcon from "@mui/icons-material/AccountCircleTwoTone";
import ImageUploadCard from "./ImageUploadCard";
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import SaveAltIcon from '@mui/icons-material/SaveAlt';



const validationSchema = Yup.object().shape({
    Name: Yup.string().required('Name is required'),
    employeeid: Yup.string().required('Employee ID is required'),
    fatherName: Yup.string().required('FatherName is required'),
    motherName: Yup.string().required('Mother Name is required'),
    Age: Yup.string().required('Age is required'),
    id: Yup.string().required('id is required'),
    identificationMarks: Yup.string().required('Identification Marks is required'),
    subCaste: Yup.string().required('Sub Caste is required'),
    presentAddress: Yup.string().required('Present Address is required'),
    permanentAddress: Yup.string().required('Permanent Address is required'),
    contactNumber: Yup.string().required('Contact Number is required'),
    emergencyContact: Yup.string().required('Emergency Contact is required'),
    emailid: Yup.string().required('Email ID is required'),
    Aadhaar: Yup.string().required('Aadhaar Card is required'),
    pancard: Yup.string().required('PanCard is required'),
    Caste: Yup.string().required('Caste is required'),

    // Add validation for other fields
});


const PageOne = ({ onButtonClick }) => {

    const [value, setValue] = React.useState(dayjs());
    const [age, setAge] = React.useState(calculateAge(value));
    const [checked, setChecked] = React.useState(false);
    const [disableoption, setDisableoption] = useState(false);
    const [genderList, setGenderList] = useState([]);
    const [mandalList, setMandalList] = useState([]);
    const [mandaloneList, setMandaloneList] = useState([]);
    const [stateList, setstateList] = useState([]);
    const [stateonelist, setstateoneList] = useState([]);
    const [districtList, setDistrictList] = useState([]);
    const [districtoneList, setDistrictoneList] = useState([]);
    const [isReadable, setIsReadable] = useState(false);
    const [isDistrictDisabled, setIsDistrictDisabled] = useState(true);
    const [expertise, setExpertise] = useState([]);
    const [hasphysicalHand, setHasphysicalHand] = useState("no");
    const [selectedDate, setSelectedDate] = useState(null);
    const [isMandalDisabled, setIsMandalDisabled] = useState(true);
    const [villageList, setVillageList] = useState([]);
    const [villageoneList, setVillageoneList] = useState([]);
    const [casteList, setCasteList] = useState([]);
    const [subcasteList, setSubCasteList] = useState([]);
    const [isVillageDisabled, setIsVillageDisabled] = useState(true);

    const [options, setOptions] = useState([
        {
            valueId: 31,
            valueName: "Male"
        },
        {
            valueId: 32,
            valueName: "Female"
        },
        {
            valueId: 33,
            valueName: "Others"
        },
    ]);



    const formik = useFormik({
        initialValues: {
            Name: '',
            employeeid: '',
            fatherName: '',
            motherName: '',
            dob: '',
            Age: '',
            Gender: '',
            identificationMarks: '',
            caste: '',
            subcaste: '',
            presentAddress: '',
            permanentAddress: '',
            contactNumber: '',
            emergencyContact: '',
            emailid: '',
            Aadhaar: '',
            pancard: '',
            stateId: '',
            mandalId: '',
            distId: '',
            villageId: '',
            countryId: '',
            distIdcommunication: '',
            stateIdcommunication: '',
            mandalIdcommunication: '',
            villageIdcommunication: '',
            pincodeCard: '',
            pincodecomm: '',
            label: '',
            // Add initial values for other fields
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            // Handle form submission or API integration here
        },
    });


    useEffect(() => {

        axios.get(`${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/caste`).then(response => {
            let sortedCasteData = response.data.result.map((value) => {
                value.label = value.label
                return value;
            })

            setCasteList(sortedCasteData);
            console.log(sortedCasteData);
        })
            .catch(error => {
                setCasteList([]);
                console.log(error);
            });

        axios.get(`${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/gender`).then(response => {
            let sortedGenderData = response.data.result.map((value) => {
                value.label = value.label.toUpperCase();
                return value;
            })

            setGenderList(sortedGenderData);
            console.log(sortedGenderData);
        })
            .catch(error => {
                setGenderList([]);
                console.log(error);
            });


        axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getStatelist`).then(response => {
            let sortedStateData = response.data.result.map((value) => {
                value.stateName = value.stateName.toUpperCase();
                return value;
            })

            sortedStateData = sortedStateData.sort((a, b) => a.stateName.localeCompare(b.stateName));

            setstateList(sortedStateData);
            console.log(sortedStateData);
        })
            .catch(error => {
                setstateList([]);
                console.log(error);
            });


        axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getStatelist`).then(response => {
            let sortedStateoneData = response.data.result.map((value) => {
                value.stateName = value.stateName.toUpperCase();
                return value;
            })

            sortedStateoneData = sortedStateoneData.sort((a, b) => a.stateName.localeCompare(b.stateName));

            setstateoneList(sortedStateoneData);
            console.log(sortedStateoneData);
        })
            .catch(error => {
                setstateList([]);
                console.log(error);
            });

    }, []);





    const handlephysicalhand = (event) => {
        setHasphysicalHand(event.target.value);
    };

    const copyAddress = (e) => {
        setChecked(e.target.checked);
        console.log("the chekced value", checked);
        if (e.target.checked) {
            formik.setFieldValue("houseNumberComm", formik.values.houseNumberCard);
            formik.setFieldValue("streetcomm", formik.values.streetCard);
            formik.setFieldValue("stateIdcommunication", formik.values.stateId);
            formik.setFieldValue("mandalIdcommunication", formik.values.mandalId);
            formik.setFieldValue("villageIdcommunication", formik.values.villageId);
            formik.setFieldValue("distIdcommunication", formik.values.distId);
            formik.setFieldValue("pincodecomm", formik.values.pincodeCard);
            setDisableoption(true);
        } else {
            formik.setFieldValue("houseNumberComm", "");
            formik.setFieldValue("streetComm", "");
            formik.setFieldValue("stateIdcommunication", "");
            formik.setFieldValue("mandalIdcommunication", "");
            formik.setFieldValue("villageIdcommunication", "");
            formik.setFieldValue("distIdcommunication", "");
            formik.setFieldValue("pincodecomm", "");
            setDisableoption(false);
        }

    };

    const CardTitle = styled((props) => (
        <Typography component="span" {...props} />
    ))(() => ({
        fontWeight: 600,
        display: "flex",
        alignItems: "center",
    }));


    const VisuallyHiddenInput = styled('input')({
        clip: 'rect(0 0 0 0)',
        clipPath: 'inset(50%)',
        height: 1,
        overflow: 'hidden',
        position: 'absolute',
        bottom: 0,
        left: 0,
        whiteSpace: 'nowrap',
        width: 1,
    });

    function calculateAge(dateOfBirth) {
        const today = new Date();
        const birthDate = new Date(dateOfBirth);

        let age = today.getFullYear() - birthDate.getFullYear();
        const monthDiff = today.getMonth() - birthDate.getMonth();
        const dayDiff = today.getDate() - birthDate.getDate();

        if (monthDiff < 0 || (monthDiff === 0 && dayDiff < 0)) {
            age--;
        }

        let ageString = "";

        if (age > 0) {
            ageString += age === 1 ? "1 year" : `${age} years`;
        }

        if (monthDiff > 0) {
            if (ageString !== "") {
                ageString += ", ";
            }
            ageString += monthDiff === 1 ? "1 month" : `${monthDiff} months`;
        }

        if (dayDiff > 0) {
            if (ageString !== "") {
                ageString += ", ";
            }
            ageString += dayDiff === 1 ? "1 day" : `${dayDiff} days`;
        }

        return ageString;
    }

    return (
        <form onSubmit={formik.handleSubmit}>

            <Card sx={{ boxShadow: "none" }}>
                <CardContent>
                    <FormControl>

                        <FormLabel id="demo-row-radio-buttons-group-label">
                            <b>Employee Type</b>
                        </FormLabel>
                        <RadioGroup
                            row
                            aria-labelledby="demo-row-radio-buttons-group-label"
                            name="row-radio-buttons-group"
                        >
                            <FormControlLabel value="Government" control={<Radio />} label="Government" />
                            <FormControlLabel value="Trust" control={<Radio />} label="Trust" />
                            <FormControlLabel value="APCOS" control={<Radio />} label="APCOS" />
                        </RadioGroup>
                    </FormControl>
                    <h3 lineHeight={2.2}>
                        <PersonAdd sx={{ mr: 1 }} />
                        Personal Details
                    </h3>
                    <Divider />
                    <div style={{ color: "red", marginBottom: "15px", fontSize: "14px" }}>
                        <p>
                            <b>Note:</b><br /> Please go through all the fields before filling the form and fill the details according to SSC.
                            <br />Please upload only .pdf/.jpeg/.png/.jpg
                            <br />File should be less than 200kb
                        </p>
                    </div>


                    <Grid container direction="row" rowSpacing={0} columnSpacing={2} justify="flex-end" alignItems="center" sx={{ mb: 1 }}>
                        <Grid item xs={12} sm={4} md={4} lg={8}>

                            <Grid container direction="row" rowSpacing={0} columnSpacing={2} justify="flex-end" alignItems="center" sx={{ mb: 1 }}>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <TextField

                                        fullWidth
                                        id="Name"
                                        name="Name"
                                        label="Full Name"
                                        size="small"
                                        margin="normal"
                                        required
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.Name}
                                        error={formik.touched.Name && !!formik.errors.Name}
                                        helperText={formik.touched.Name && formik.errors.Name}
                                    />


                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <TextField
                                        margin="normal"
                                        fullWidth
                                        required
                                        type="text"
                                        id="employeeid"
                                        name="employeeid"
                                        label="Employee ID"
                                        //   autoComplete="email"
                                        size="small"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.employeeid}
                                        error={formik.touched.employeeid && !!formik.errors.employeeid}
                                        helperText={formik.touched.employeeid && formik.errors.employeeid}
                                    />


                                </Grid>

                            </Grid>

                            <Grid
                                container
                                direction="row"
                                rowSpacing={0}
                                columnSpacing={2}
                                justify="flex-end"
                                alignItems="center"
                                sx={{ mb: 1 }}

                            >
                                <Grid item xs={12} sm={4} md={4} lg={6}>

                                    <TextField
                                        margin="0"
                                        required
                                        fullWidth
                                        type="text"
                                        id="motherName"
                                        name="motherName"
                                        label="Mother Name"
                                        autoComplete="email"
                                        size="small"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.motherName}
                                        error={formik.touched.motherName && !!formik.errors.motherName}
                                        helperText={formik.touched.motherName && formik.errors.motherName}
                                    />
                                </Grid>
                                <Grid item xs={12} sm={4} md={4} lg={6}>

                                    <TextField
                                        margin="0"
                                        fullWidth
                                        type="text"
                                        id="fatherName"
                                        name="fatherName"
                                        label="Father Name"
                                        required
                                        size="small"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.fatherName}
                                        error={formik.touched.fatherName && !!formik.errors.fatherName}
                                        helperText={formik.touched.fatherName && formik.errors.fatherName}
                                    />
                                </Grid>

                            </Grid>


                            <Grid
                                container
                                direction="row"
                                rowSpacing={0}
                                columnSpacing={2}
                                justify="flex-end"
                                alignItems="center"
                                sx={{ mb: 1 }}
                            >
                                <Grid item xs={12} sm={4} md={4} lg={6}>
                                    <LocalizationProvider
                                        dateAdapter={AdapterDayjs}
                                        adapterLocale={"en-gb"}
                                    >
                                        <DatePicker
                                            label="Date of Birth"
                                            inputFormat="DD-MM-YYYY"
                                            maxDate={new Date()}
                                            id="dob"
                                            name="dob"
                                            value={formik.values.dob}
                                            onChange={(value) => {
                                                formik.setFieldValue("dob", Date.parse(value));
                                                const ageString = calculateAge(value);
                                                formik.setFieldValue("age", ageString);
                                            }}
                                            // disabled={isDisabled}
                                            renderInput={(params) => (
                                                <TextField
                                                    size="small"
                                                    fullWidth
                                                    {...params}
                                                    required
                                                    error={formik.touched.dob && Boolean(formik.errors.dob)}
                                                    helperText={formik.touched.dob && formik.errors.dob}
                                                    onChange={formik.handleChange}
                                                    onBlur={formik.handleBlur}
                                                />
                                            )}
                                        />
                                    </LocalizationProvider>
                                </Grid>



                                <Grid item xs={12} sm={4} md={4} lg={6}>

                                    <TextField
                                        margin="0"
                                        required
                                        fullWidth
                                        id="age"
                                        label="Age"
                                        InputLabelProps={{ shrink: true }}
                                        name="age"
                                        size="small"
                                        value={formik.values.age || ""}
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        error={formik.touched.age && Boolean(formik.errors.age)}
                                        helperText={formik.touched.age && formik.errors.age}
                                        disabled={true}
                                    />
                                </Grid>

                            </Grid>
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <ImageUploadCard></ImageUploadCard>
                            <div style={{ color: "red", marginBottom: "5px", fontSize: "12px" }}>
                                <p><b>Note:</b> Please upload Latest passport size photo</p>
                            </div>
                        </Grid>

                    </Grid>

                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"

                    >

                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <Autocomplete
                                disablePortal
                                margin="0"
                                size="small"
                                id="label"
                                name="label"
                                options={genderList}
                                value={genderList.find(
                                    (option) => option.label === formik.values.label?.label
                                ) || null}
                                onChange={(e, value) => {
                                    if (value === null) {
                                        formik.setFieldValue("label", null)
                                    }
                                    else
                                        formik.setFieldValue("label", value)
                                }}
                                getOptionLabel={(value) => value.label}
                                sx={{ width: "100%" }}
                                renderInput={(params) => (
                                    <TextField {...params}
                                        label="Gender"
                                        onBlur={formik.handleBlur}
                                        helperText={formik.errors.label && formik.touched.label ? formik.errors.label : null}
                                        error={formik.errors.label && formik.touched.label ? true : false}
                                    />
                                )}
                            />


                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>
                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="identificationMarks"
                                name="identificationMarks"
                                label="Identification Mark 1(Acc to SSC)"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.identificationMarks}
                                error={formik.touched.identificationMarks && !!formik.errors.identificationMarks}
                                helperText={formik.touched.identificationMarks && formik.errors.identificationMarks}
                            />
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>
                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="identificationMarks"
                                name="identificationMarks"
                                label="Identification Mark 2(Acc to SSC)"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.identificationMarks}
                                error={formik.touched.identificationMarks && !!formik.errors.identificationMarks}
                                helperText={formik.touched.identificationMarks && formik.errors.identificationMarks}
                            />
                        </Grid>
                    </Grid>

                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"

                    >
                          <Grid item xs={12} sm={4} md={4} lg={4}>
                                   
                                   <Autocomplete
                                       disablePortal
                                       margin="0"
                                       fullWidth
                                       size="small"
                                       id="caste"
                                       name="caste"
                                       options={casteList}
                                       value={casteList.find(
                                           (option) => option.id === formik.values.caste?.id
                                       ) || null}
                                       onChange={(e, value) => {
                                           console.log(value)
                                           if (value === null) {
                                               formik.setFieldValue("caste", null)
                                             
                                           }
                                           else
                                               formik.setFieldValue("caste", value)
                                           axios.get(`${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/subcaste/${value.id}`).then(response => {

                                               console.log(response.data.result)

                                               let sortedcastegroup = response.data.result.map((value) => {
                                                   value.label = value.label.toUpperCase();
                                                   return value;
                                               })

                                               setSubCasteList(sortedcastegroup);
                                              
                                               console.log(sortedcastegroup);
                                           })
                                               .catch(error => {
                                                   setSubCasteList([]);
                                                   console.log(error);
                                               });

                                       }}
                                      
                                       
                                       getOptionLabel={(value) => value.label}
                                       sx={{ width: "100%", mt: 2, mb: 1 }}
                                       renderInput={(params) => (
                                           <TextField {...params}
                                               label="Caste"
                                               onBlur={formik.handleBlur}
                                               helperText={formik.errors.caste && formik.touched.caste ? formik.errors.caste : null}
                                               error={formik.errors.caste && formik.touched.caste ? true : false}
                                           />
                                       )}
                                   />
                               
                               </Grid>
                               <Grid item xs={12} sm={4} md={4} lg={4}>
                               <Tooltip >
                                   <Autocomplete
                                       disablePortal
                                       margin="0"
                                       fullWidth
                                       size="small"
                                       id="subcaste"
                                       name="subcaste"
                                       options={subcasteList}
                                       value={subcasteList.find(
                                           (option) => option.id === formik.values.subcaste?.id
                                       ) || null}
                                       onChange={(e, value) => {
                                           console.log(value)
                                           if (value === null) {
                                               formik.setFieldValue("subcaste", null)
                                           }
                                           else
                                               formik.setFieldValue("subcaste", value)
                                       }}
                                       
                                      
                                       getOptionLabel={(value) => value.label}
                                       sx={{ width: "100%", mt: 2, mb: 1 }}
                                       renderInput={(params) => (
                                           <TextField {...params}
                                               label="Sub caste"
                                               onBlur={formik.handleBlur}
                                               helperText={formik.errors.subcaste && formik.touched.subcaste ? formik.errors.subcaste : null}
                                               error={formik.errors.subcaste && formik.touched.subcaste ? true : false}
                                           />
                                       )}
                                   />
                                   </Tooltip>

                               </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <Button sx={{ mb: 2 }} component="label" variant="contained" startIcon={<CloudUploadIcon />}>
                                Upload Caste Certificate
                                <VisuallyHiddenInput type="file" />

                            </Button>

                        </Grid>

                    </Grid>
                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"
                        sx={{ mb: 1 }}
                    >
                        <Grid item xs={12} sm={4} md={4} lg={4}>
                            <div>
                                <FormControl>
                                    <FormLabel id="demo-row-radio-buttons-group-label">
                                        Physically Handicapped
                                    </FormLabel>

                                    <RadioGroup
                                        row
                                        aria-labelledby="demo-row-radio-buttons-group-label"
                                        name="row-radio-buttons-group"
                                        value={hasphysicalHand}
                                        onChange={handlephysicalhand}
                                    >
                                        <FormControlLabel value="yes"
                                            control={<Radio />}
                                            label="Yes" />
                                        <FormControlLabel value="no"
                                            control={<Radio />}
                                            label="No" />

                                    </RadioGroup>




                                </FormControl>
                            </div>
                        </Grid>
                        {/* <Grid item xs={12} sm={4} md={4} lg={8}> */}
                        {hasphysicalHand === "yes" && (
                            <>
                                <Grid item xs={12} sm={4} md={4} lg={4}>

                                    <TextField
                                        margin="0"
                                        required
                                        fullWidth
                                        type="text"
                                        id="Aadhaar"
                                        name="Aadhaar"
                                        label="Physically Handicapped Percentage"
                                        size="small"
                                        onChange={formik.handleChange}
                                        onBlur={formik.handleBlur}
                                        value={formik.values.Aadhaar}
                                        error={formik.touched.Aadhaar && !!formik.errors.Aadhaar}
                                        helperText={formik.touched.Aadhaar && formik.errors.Aadhaar}
                                    />
                                </Grid>

                                <Grid item xs={12} sm={4} md={4} lg={4}>

                                    <Button sx={{ mb: 3 }} component="label" variant="contained" startIcon={<CloudUploadIcon />}>
                                        Upload PWD Certificate
                                        <VisuallyHiddenInput type="file" />
                                    </Button>
                                </Grid>
                            </>

                        )}

                        {/* </Grid> */}

                    </Grid>

                    <Card sx={{ margin: 0, boxShadow: "none" }}>
                        <Grid container direction="row" rowSpacing={0} columnSpacing={2}>
                            <Grid item xs={12} sm={6} md={6} lg={6}>
                                {/* <H4 lineHeight={3.2}>Card Address</H4> */}
                                <Card sx={{ height: "460px", border: "1px solid black" }}>
                                    <CardHeader
                                        title={
                                            <CardTitle>
                                                <AccountCircleTwoToneIcon sx={{ mr: 1 }} />
                                                Present Address
                                            </CardTitle>
                                        }
                                    />
                                    <Divider />
                                    <CardContent>
                                        <Grid
                                            container
                                            direction="row"
                                            rowSpacing={0}
                                            columnSpacing={2}
                                        >
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <TextField
                                                    margin="normal"
                                                    required
                                                    fullWidth
                                                    id="houseNumberCard"
                                                    label="House No./Building Name"
                                                    name="houseNumberCard"
                                                    value={formik.values.houseNumberCard}
                                                    autoComplete="email"
                                                    size="small"
                                                    onChange={formik.handleChange}
                                                    onBlur={formik.handleBlur}
                                                    error={
                                                        formik.touched.houseNumberCard &&
                                                        Boolean(formik.errors.houseNumberCard)
                                                    }
                                                    helperText={
                                                        formik.touched.houseNumberCard &&
                                                        formik.errors.houseNumberCard
                                                    }
                                                // disabled={isDisabled}
                                                />
                                            </Grid>



                                            <Grid item xs={12} sm={8} md={8} lg={6}>
                                                <TextField
                                                    margin="normal"
                                                    required
                                                    fullWidth
                                                    id="streetCard"
                                                    label="Street"
                                                    name="streetCard"
                                                    value={formik.values.streetCard}
                                                    autoComplete="email"
                                                    size="small"
                                                    onChange={formik.handleChange}
                                                    onBlur={formik.handleBlur}
                                                    error={
                                                        formik.touched.streetCard &&
                                                        Boolean(formik.errors.streetCard)
                                                    }
                                                    helperText={
                                                        formik.touched.streetCard && formik.errors.streetCard
                                                    }
                                                // disabled={isDisabled}
                                                />
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth sx={{ mt: 2 }}>
                                                    <TextField
                                                        label="Pincode"
                                                        size="small"
                                                        fullWidth
                                                        required
                                                        autoComplete="email"
                                                        placeholder={"999999"}
                                                        mask={"######"}
                                                        value={formik.values.pincodeCard || ""}
                                                        id="pincodeCard"
                                                        name="pincodeCard"
                                                        onChange={formik.handleChange}
                                                        onBlur={formik.handleBlur}
                                                        error={
                                                            formik.touched.pincodeCard &&
                                                            Boolean(formik.errors.pincodeCard)
                                                        }
                                                        helperText={
                                                            formik.touched.pincodeCard &&
                                                            formik.errors.pincodeCard
                                                        }
                                                    // disabled={isDisabled}
                                                    />
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <Tooltip title={isVillageDisabled ? "Please select mandal first" : ""} arrow>
                                                    <Autocomplete
                                                        disablePortal

                                                        fullWidth
                                                        margin="0"
                                                        size="small"
                                                        id="villageId"
                                                        name="villageId"
                                                        options={villageList}
                                                        value={villageList.find(
                                                            (option) => option.villageId === formik.values.villageId?.villageId) || null}
                                                        onChange={(e, value) => {
                                                            console.log(value);
                                                            if (value === null) {
                                                                formik.setFieldValue("villageId", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("villageId", value);
                                                            }
                                                        }}

                                                        getOptionLabel={(value) => value.villageName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="Village Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.villageId && formik.touched.villageId ? formik.errors.villageId : null}
                                                                error={formik.errors.villageId && formik.touched.villageId ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </Tooltip>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <Tooltip title={isMandalDisabled ? "Please select district first" : ""} arrow>
                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        fullWidth
                                                        id="mandalId"
                                                        name="mandalId"
                                                        options={mandalList}
                                                        value={mandalList.find(
                                                            (option) => option.mandalId === formik.values.mandalId?.mandalId) || null}
                                                        onChange={(e, value) => {
                                                            if (value === null) {
                                                                formik.setFieldValue("mandalId", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("mandalId", value);


                                                                axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getVillageList/${value.mandalId}`).then(response => {
                                                                    let sortedVillageData = response.data.result.map((value) => {
                                                                        value.villageName = value.villageName.toUpperCase();
                                                                        return value;
                                                                    })

                                                                    sortedVillageData = sortedVillageData.sort((a, b) => a.villageName.localeCompare(b.villageName));

                                                                    setIsVillageDisabled(false);
                                                                    setVillageList(sortedVillageData);
                                                                    console.log(sortedVillageData);
                                                                })
                                                                    .catch(error => {
                                                                        setVillageList([]);
                                                                        console.log(error);
                                                                    });
                                                            }

                                                        }}


                                                        getOptionLabel={(value) => value.mandalName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="Mandal Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.mandalId && formik.touched.mandalId ? formik.errors.mandalId : null}
                                                                error={formik.errors.mandalId && formik.touched.mandalId ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </Tooltip>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >
                                                    <Tooltip title={isDistrictDisabled ? "Please select state first" : ""} arrow>
                                                        <Autocomplete
                                                            disablePortal
                                                            margin="0"
                                                            size="small"
                                                            id="distId"
                                                            name="distId"
                                                            options={districtList}
                                                            value={districtList.find((option) => option.distId === formik.values.distId?.distId) || null}
                                                            onChange={(e, value) => {
                                                                if (value === null) {
                                                                    formik.setFieldValue("distId", null);
                                                                } else {
                                                                    formik.setFieldValue("distId", value)
                                                                    axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getMandalList/${value.distId}`).then(response => {
                                                                        let sortedMandalData = response.data.result.map((value) => {
                                                                            value.mandalName = value.mandalName.toUpperCase();
                                                                            return value;
                                                                        })

                                                                        sortedMandalData = sortedMandalData.sort((a, b) => a.mandalName.localeCompare(b.mandalName));

                                                                        setIsDistrictDisabled(false);
                                                                        setMandalList(sortedMandalData);
                                                                        console.log(sortedMandalData);
                                                                    })
                                                                        .catch(error => {
                                                                            setDistrictList([]);
                                                                            console.log(error);
                                                                        });
                                                                }
                                                            }}

                                                            getOptionLabel={(value) => value.districtName}
                                                            sx={{ width: "100%", mt: 2, mb: 1 }}
                                                            renderInput={(params) => (
                                                                <TextField
                                                                    {...params}
                                                                    label="District Name"
                                                                    onBlur={formik.handleBlur}
                                                                    helperText={formik.errors.distId && formik.touched.distId ? formik.errors.distId : null}
                                                                    error={formik.errors.distId && formik.touched.distId ? true : false}
                                                                />
                                                            )}
                                                        />
                                                    </Tooltip>
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >

                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        fullWidth
                                                        id="stateId"
                                                        name="stateId"
                                                        options={stateList}
                                                        disabled={isReadable}
                                                        value={stateList.find(
                                                            (option) => option.stateId === formik.values.stateId?.stateId
                                                        ) || null}
                                                        onChange={(e, value) => {

                                                            if (value === null) {
                                                                formik.setFieldValue("stateId", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("stateId", value)
                                                                axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getDistrictList/${value.stateId}`).then(response => {
                                                                    let sortedDistrictData = response.data.result.map((value) => {
                                                                        value.districtName = value.districtName.toUpperCase();
                                                                        return value;
                                                                    })

                                                                    sortedDistrictData = sortedDistrictData.sort((a, b) => a.districtName.localeCompare(b.districtName));

                                                                    setIsDistrictDisabled(false);
                                                                    setDistrictList(sortedDistrictData);
                                                                    console.log(sortedDistrictData);
                                                                })
                                                                    .catch(error => {
                                                                        setDistrictList([]);
                                                                        console.log(error);
                                                                    });

                                                            }
                                                        }}
                                                        getOptionLabel={(value) => value.stateName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="State Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.stateId && formik.touched.stateId ? formik.errors.stateId : null}
                                                                error={formik.errors.stateId && formik.touched.stateId ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >
                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        required
                                                        fullWidth
                                                        id="countryId"
                                                        name="countryId"
                                                        options={options}
                                                        // defaultValue="India"
                                                        value={options.find(
                                                            (option) => option.valueName === formik.values.countryId
                                                        ) || null}
                                                        onChange={(e, value) => {
                                                            if (value === null) {
                                                                formik.setFieldValue("countryId", null)
                                                            }
                                                            else
                                                                formik.setFieldValue("countryId", value)
                                                        }}
                                                        getOptionLabel={(value) => value.countryName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                required
                                                                label="Country"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.countryId && formik.touched.countryId ? formik.errors.countryId : null}
                                                                error={formik.errors.countryId && formik.touched.countryId ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </FormControl>
                                            </Grid>
                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>

                            <Grid item xs={12} sm={6} md={6} lg={6}>
                                <Card sx={{ border: "1px solid black" }}>
                                    <CardHeader
                                        title={
                                            <CardTitle>
                                                <PinDropTwoToneIcon sx={{ mr: 1 }} /> Permanent Address

                                            </CardTitle>
                                        }
                                    />
                                    <Divider />
                                    <CardContent>
                                        <Grid
                                            container
                                            direction="row"
                                            rowSpacing={0}
                                            columnSpacing={2}
                                            justify="flex-end"
                                            alignItems="center"

                                        >
                                            <Grid item xs={12} sm={12} md={12} lg={12}>
                                                <FormControlLabel
                                                    sx={{ margin: 0 }}
                                                    control={
                                                        <Checkbox
                                                            value="remember"
                                                            checked={checked}
                                                            color="primary"
                                                        />
                                                    }
                                                    label="If Present address and Permanent address are same"
                                                    onChange={copyAddress}
                                                />
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <TextField
                                                    margin="normal"
                                                    required
                                                    fullWidth
                                                    id="houseNumberComm"
                                                    label="House No./Building Name"
                                                    name="houseNumberComm"
                                                    value={formik.values.houseNumberComm || ""}
                                                    size="small"
                                                    onChange={formik.handleChange}
                                                    onBlur={formik.handleBlur}
                                                    error={
                                                        formik.touched.houseNumberComm &&
                                                        Boolean(formik.errors.houseNumberComm)
                                                    }
                                                    helperText={
                                                        formik.touched.houseNumberComm &&
                                                        formik.errors.houseNumberComm
                                                    }
                                                    disabled={disableoption}
                                                />
                                            </Grid>
                                            <Grid item xs={12} sm={8} md={8} lg={6}>
                                                <TextField
                                                    margin="normal"
                                                    required
                                                    fullWidth
                                                    id="streetcomm"
                                                    label="Street"
                                                    name="streetcomm"
                                                    value={formik.values.streetcomm || ""}

                                                    size="small"
                                                    onChange={formik.handleChange}
                                                    onBlur={formik.handleBlur}
                                                    error={
                                                        formik.touched.streetcomm &&
                                                        Boolean(formik.errors.streetcomm)
                                                    }
                                                    helperText={
                                                        formik.touched.streetcomm && formik.errors.streetcomm
                                                    }
                                                    disabled={disableoption}
                                                />
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth sx={{ mt: 2 }}>
                                                    <TextField
                                                        label="Pincode"
                                                        size="small"
                                                        fullWidth
                                                        required
                                                        placeholder={"999999"}
                                                        mask={"######"}
                                                        value={formik.values.pincodecomm || ""}
                                                        id="pincodecomm"
                                                        name="pincodecomm"
                                                        onChange={formik.handleChange}
                                                        onBlur={formik.handleBlur}
                                                        error={
                                                            formik.touched.pincodecomm &&
                                                            Boolean(formik.errors.pincodecomm)
                                                        }
                                                        helperText={
                                                            formik.touched.pincodecomm &&
                                                            formik.errors.pincodecomm
                                                        }
                                                        disabled={disableoption}
                                                    />
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <Tooltip title={isVillageDisabled ? "Please select mandal first" : ""} arrow>
                                                    <Autocomplete
                                                        disablePortal

                                                        fullWidth
                                                        margin="0"
                                                        size="small"
                                                        id="villageIdcommunication"
                                                        name="villageIdcommunication"
                                                        options={villageoneList}
                                                        value={villageoneList.find(
                                                            (option) => option.villageId === formik.values.villageIdcommunication?.villageId) || null}
                                                        onChange={(e, value) => {
                                                            console.log(value);
                                                            if (value === null) {
                                                                formik.setFieldValue("villageIdcommunication", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("villageIdcommunication", value);
                                                            }
                                                        }}

                                                        getOptionLabel={(value) => value.villageName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="Village Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.villageIdcommunication && formik.touched.villageIdcommunication ? formik.errors.villageIdcommunication : null}
                                                                error={formik.errors.villageIdcommunication && formik.touched.villageIdcommunication ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </Tooltip>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <Tooltip title={isMandalDisabled ? "Please select district first" : ""} arrow>
                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        fullWidth
                                                        id="mandalIdcommunication"
                                                        name="mandalIdcommunication"
                                                        options={mandaloneList}
                                                        value={mandaloneList.find(
                                                            (option) => option.mandalId === formik.values.mandalIdcommunication?.mandalId) || null}
                                                        onChange={(e, value) => {
                                                            if (value === null) {
                                                                formik.setFieldValue("mandalIdcommunication", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("mandalIdcommunication", value);


                                                                axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getVillageList/${value.mandalId}`).then(response => {
                                                                    let sortedVillageData = response.data.result.map((value) => {
                                                                        value.villageName = value.villageName.toUpperCase();
                                                                        return value;
                                                                    })

                                                                    sortedVillageData = sortedVillageData.sort((a, b) => a.villageName.localeCompare(b.villageName));

                                                                    setIsVillageDisabled(false);
                                                                    setVillageoneList(sortedVillageData);
                                                                    console.log(sortedVillageData);
                                                                })
                                                                    .catch(error => {
                                                                        setVillageoneList([]);
                                                                        console.log(error);
                                                                    });
                                                            }

                                                        }}


                                                        getOptionLabel={(value) => value.mandalName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="Mandal Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.mandalIdcommunication && formik.touched.mandalIdcommunication ? formik.errors.mandalIdcommunication : null}
                                                                error={formik.errors.mandalIdcommunication && formik.touched.mandalIdcommunication ? true : false}
                                                                disabled={disableoption}
                                                            />
                                                        )}
                                                    />
                                                </Tooltip>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >
                                                    <Tooltip title={isDistrictDisabled ? "Please select state first" : ""} arrow>
                                                        <Autocomplete
                                                            disablePortal
                                                            margin="0"
                                                            size="small"
                                                            id="distIdcommunication"
                                                            name="distIdcommunication"
                                                            options={districtoneList}
                                                            value={districtoneList.find((option) => option.distId === formik.values.distIdcommunication?.distId) || null}
                                                            onChange={(e, value) => {
                                                                if (value === null) {
                                                                    formik.setFieldValue("distIdcommunication", null);
                                                                } else {
                                                                    formik.setFieldValue("distIdcommunication", value)
                                                                    axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getMandalList/${value.distId}`).then(response => {
                                                                        let sortedMandalData = response.data.result.map((value) => {
                                                                            value.mandalName = value.mandalName.toUpperCase();
                                                                            return value;
                                                                        })

                                                                        sortedMandalData = sortedMandalData.sort((a, b) => a.mandalName.localeCompare(b.mandalName));

                                                                        setIsDistrictDisabled(false);
                                                                        setMandaloneList(sortedMandalData);
                                                                        console.log(sortedMandalData);
                                                                    })
                                                                        .catch(error => {
                                                                            setMandaloneList([]);
                                                                            console.log(error);
                                                                        });
                                                                }
                                                            }}

                                                            getOptionLabel={(value) => value.districtName}
                                                            sx={{ width: "100%", mt: 2, mb: 1 }}
                                                            renderInput={(params) => (
                                                                <TextField
                                                                    {...params}
                                                                    label="District Name"
                                                                    onBlur={formik.handleBlur}
                                                                    helperText={formik.errors.distIdcommunication && formik.touched.distIdcommunication ? formik.errors.distIdcommunication : null}
                                                                    error={formik.errors.distIdcommunication && formik.touched.distIdcommunication ? true : false}

                                                                    disabled={disableoption}
                                                                />
                                                            )}
                                                        />
                                                    </Tooltip>
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >

                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        fullWidth
                                                        id="stateIdcommunication"
                                                        name="stateIdcommunication"
                                                        options={stateonelist}
                                                        disabled={isReadable}
                                                        value={stateonelist.find(
                                                            (option) => option.stateId === formik.values.stateIdcommunication?.stateId
                                                        ) || null}
                                                        onChange={(e, value) => {

                                                            if (value === null) {
                                                                formik.setFieldValue("stateIdcommunication", null)
                                                            }
                                                            else {
                                                                formik.setFieldValue("stateIdcommunication", value)
                                                                axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getDistrictList/${value.stateId}`).then(response => {
                                                                    let sortedDistrictData = response.data.result.map((value) => {
                                                                        value.districtName = value.districtName.toUpperCase();
                                                                        return value;
                                                                    })

                                                                    sortedDistrictData = sortedDistrictData.sort((a, b) => a.districtName.localeCompare(b.districtName));

                                                                    setIsDistrictDisabled(false);
                                                                    setDistrictoneList(sortedDistrictData);
                                                                    console.log(sortedDistrictData);
                                                                })
                                                                    .catch(error => {
                                                                        setDistrictoneList([]);
                                                                        console.log(error);
                                                                    });

                                                            }
                                                        }}
                                                        getOptionLabel={(value) => value.stateName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                label="State Name"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.stateIdcommunication && formik.touched.stateIdcommunication ? formik.errors.stateIdcommunication : null}
                                                                error={formik.errors.stateIdcommunication && formik.touched.stateIdcommunication ? true : false}

                                                                disabled={disableoption}
                                                            />
                                                        )}
                                                    />
                                                </FormControl>
                                            </Grid>
                                            <Grid item xs={12} sm={4} md={4} lg={6}>
                                                <FormControl fullWidth >
                                                    <Autocomplete
                                                        disablePortal
                                                        margin="0"
                                                        size="small"
                                                        required
                                                        fullWidth
                                                        id="countryId"
                                                        name="countryId"
                                                        options={options}
                                                        value={options.find(
                                                            (option) => option.valueName === formik.values.countryId
                                                        ) || null}
                                                        onChange={(e, value) => {
                                                            if (value === null) {
                                                                formik.setFieldValue("countryId", null)
                                                            }
                                                            else
                                                                formik.setFieldValue("countryId", value)
                                                        }}
                                                        getOptionLabel={(value) => value.countryName}
                                                        sx={{ width: "100%", mt: 2, mb: 1 }}
                                                        renderInput={(params) => (
                                                            <TextField {...params}
                                                                required
                                                                label="Country"
                                                                onBlur={formik.handleBlur}
                                                                helperText={formik.errors.countryId && formik.touched.countryId ? formik.errors.countryId : null}
                                                                error={formik.errors.countryId && formik.touched.countryId ? true : false}
                                                            />
                                                        )}
                                                    />
                                                </FormControl>
                                            </Grid>


                                        </Grid>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>
                    </Card>


                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"
                        sx={{ mb: 1 }}
                    >

                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="contactNumber"
                                name="contactNumber"
                                label="Contact Number"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.contactNumber}
                                error={formik.touched.contactNumber && !!formik.errors.contactNumber}
                                helperText={formik.touched.contactNumber && formik.errors.contactNumber}
                            />
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="emergencyContact"
                                name="emergencyContact"
                                label="Emergency(Family) Number"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.emergencyContact}
                                error={formik.touched.emergencyContact && !!formik.errors.emergencyContact}
                                helperText={formik.touched.emergencyContact && formik.errors.emergencyContact}
                            />
                        </Grid>

                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="emailid"
                                name="emailid"
                                label="Personal Email ID"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.emailid}
                                error={formik.touched.emailid && !!formik.errors.emailid}
                                helperText={formik.touched.emailid && formik.errors.emailid}
                            />
                        </Grid>
                    </Grid>

                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"
                        sx={{ mb: 1 }}
                    >

                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="emailid"
                                name="emailid"
                                label="Official Email ID"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.emailid}
                                error={formik.touched.emailid && !!formik.errors.emailid}
                                helperText={formik.touched.emailid && formik.errors.emailid}
                            />
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="Aadhaar"
                                name="Aadhaar"
                                label="Aadhaar Number"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.Aadhaar}
                                error={formik.touched.Aadhaar && !!formik.errors.Aadhaar}
                                helperText={formik.touched.Aadhaar && formik.errors.Aadhaar}
                            />
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <Button sx={{ mb: 3 }} component="label" variant="contained" startIcon={<CloudUploadIcon />}>
                                Upload Aadhaar
                                <VisuallyHiddenInput type="file" />
                            </Button>
                        </Grid>

                    </Grid>

                    <Grid
                        container
                        direction="row"
                        rowSpacing={0}
                        columnSpacing={2}
                        justify="flex-end"
                        alignItems="center"
                        sx={{ mb: 1 }}
                    >

                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <TextField
                                margin="0"
                                required
                                fullWidth
                                type="text"
                                id="pancard"
                                name="pancard"
                                label="PAN Number"
                                size="small"
                                onChange={formik.handleChange}
                                onBlur={formik.handleBlur}
                                value={formik.values.pancard}
                                error={formik.touched.pancard && !!formik.errors.pancard}
                                helperText={formik.touched.pancard && formik.errors.pancard}
                            />
                        </Grid>
                        <Grid item xs={12} sm={4} md={4} lg={4}>

                            <Button sx={{ mb: 3 }} component="label" variant="contained" startIcon={<CloudUploadIcon />}>
                                Upload PAN Card
                                <VisuallyHiddenInput type="file" />
                            </Button>
                        </Grid>


                    </Grid>


                </CardContent>

                <Box
                    spacing={2}
                    sx={{ mt: 1, textAlign: 'center' }}
                >
                    <Button
                        sx={{
                            minWidth: 100, ml: 1, mt: { xs: 1, md: 0 }
                        }}
                        variant="contained"
                        type="submit"
                        onClick={() => onButtonClick("pagetwo")}
                    >
                        SAVE
                        <SaveAltIcon sx={{ ml: 0.2 }}></SaveAltIcon>
                    </Button>

                </Box>
            </Card>


        </form>
    );
};

export default PageOne;
