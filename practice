{
    "status": true,
    "message": "Details fetched successfully",
    "result": {
        "origin": "Vizag",
        "destination": "Vijayawada",
        "transportRequestId": "7",
        "bookingFrom": "11/03/2024 01:00 PM",
        "bookingTo": "11/03/2024 01:00 PM",
        "remarks": "booking",
        "caseStatusName": "Dept.DyEO-NT initiated the transport request.\n",
        "raisedDate": "15/03/2024 09:08 PM",
        "empDeptName": "DyEO-NT 1,Field Operations Supporting Services (FOSS)",
        "contactNo": 9874316597,
        "personsCount": 2,
        "transportReqRef": null,
        "vehicleNumber": null,
        "vendorName": null,
        "empOrGuest": "Employee",
        "hiredOrOutsourced": null,
        "vendorContact": null,
        "userMappingDto": [
            {
                "userId": 183,
                "userName": "Dharma Pothugunta",
                "transportRequestId": null,
                "guestNames": null
            },
            {
                "userId": 184,
                "userName": "Manasa Badeti",
                "transportRequestId": null,
                "guestNames": null
            }
        ]
    },
    "statusCode": 200
}






import React from "react";
import { useEffect, useState } from "react";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Autocomplete from "@mui/material/Autocomplete";
import { styled } from "@mui/material/styles";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import Grid from "@mui/material/Grid";
import DatePicker from "react-datepicker";
// import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { Card, CardContent, Typography } from "@mui/material";
import useTitle from "../../../../hooks/useTitle";
import PageTitle from "../../../../layouts/PageTitle";
import { useNavigate } from "react-router-dom";
import { H3 } from "../../../../components/Typography";
import CommuteIcon from "@mui/icons-material/Commute";
import AlertConfirm from "react-alert-confirm";
import { useSnackbar } from "../../../../components/Snackbar";
import "react-alert-confirm/lib/style.css";
import { validationdyeoapproval } from "./Validation";
import { useFormik } from "formik";
import { Radio } from "@mui/material";
import { FormControl } from "@mui/material";
import { FormControlLabel } from "@mui/material";
import { RadioGroup } from "@mui/material";
import AirportShuttleIcon from "@mui/icons-material/AirportShuttle";
import { FormHelperText } from "@mui/material";
import SearchParams from "../../../../components/Searchparams";
import axios from "axios";
import { useLocation } from "react-router-dom";
import { CoPresentOutlined } from "@mui/icons-material";
function ViewMyBookings(props) {
  const [bookingDetail, setBookingDetail] = useState({})
  const location = useLocation()
  console.log("the id", location.state)
  useEffect(() => {
    getTransportBookingFormDetails();
  }, []);
 
  const getValueFromList = (List, value) => {
    return List.find((option) => option.id === value) ?? null;
  };
  const [HiredDetails, setHiredDetails] = useState([])
  const [VendorDetails, setVendorDetails] = useState([])
  const [vendorlist, setvendorlist] = useState([])
  const [employeeNames, setEmployeeNames] = useState([])
  const [guestNames, setGuestNames] = useState([])
  const formik = useFormik({
    initialValues: {
      hiredoutsoursed: "",
      hiredoptions: "",
      vendorname: "",
      remarks: "",
      vendoranothercontact: "",
    },
    enableReinitialize: true,
    validationSchema: validationdyeoapproval,
  });
  const valuesTransport = [
    {
      id: 1,
      label: "Car",
    },
    {
      id: 2,
      label: " Bus",
    },
  ];
  const title = "Transport Booking Form";
  useTitle(title);
  const navigate = useNavigate();
  const { showSnackbar } = useSnackbar();
 
  const handleRedirect = (event) => {
    const touched = Object.keys(formik.initialValues).reduce((result, item) => {
      result[item] = true;
      return result;
    }, {});
    formik.setTouched(touched, false);
    formik.setSubmitting(true);
    formik
      .validateForm()
      .then((formErrors) => {
        console.log("the errors", formErrors);
        if (Object.keys(formErrors).length > 0) {
          showSnackbar("Please enter all required fields", "error");
        } else {
          //alert("nmmn")
          callConfirmDialog();
        }
      })
      .catch((err) => {
        formik.setSubmitting(false);
      });
  };
  const callConfirmDialog = async () => {
    console.log("kp-confirm");
    const [action] = await AlertConfirm({
      title: "Confirm",
      desc: "Are you sure, you want to submit?",
    });
    AlertConfirm.config({
      okText: "Submit",
      cancelText: "Cancel",
    });
    if (action) {
      console.log("kp-saved");
      SaveProcessDetails()

    } else {
      //   setIsSubmit(false);
      showSnackbar("Did not save!", "error");
    }
  };
  const handleRedirectreject = (prop) => {
    if (formik.values.remarks.length === 0 && prop === "Reject") {
      showSnackbar("Please fill remarks", "error");
      return;
    }
    callConfirmDialog();
  };
 
  const getTransportBookingFormDetails = async () => {
    let bookingdeatils = {}
    await axios.post(`${process.env.REACT_APP_TRANSPORT_API_URL}/get-bookings-by-id`, {
      "transportRequestId": location.state
    }).then((response) => {
      console.log(response.data.result, "hellooooo")
      bookingdeatils = { ...response.data.result }
      setBookingDetail(bookingdeatils);
 
 
      console.log(employeeNames, "testing", guestNames)
 
    }).catch((error) => {
      console.log("getting error");
      console.log(error)
    })
 
    console.log("into the calling");
    axios
      .get(`${process.env.REACT_APP_TRANSPORT_API_URL}/fetch-process-details`,)
      .then((response) => {
        console.log(response.data);
        let vehiclelist = [];
        let vendorlist = [];
        response.data.result.vehicleList.map((st) => {
          vehiclelist.push({ id: st.vehicleId, label: st.vehicleNumber });
        });
        response.data.result.vendorList.map((st) => {
          vendorlist.push({ id: st.vendorId, label: st.vendorName });
        });
        setHiredDetails(vehiclelist);
        setVendorDetails(vendorlist);
      })
      .catch((error) => {
        console.log(error);
      });
  };
 
  console.log(bookingDetail, "testing", bookingDetail.personsCount, "outside", bookingDetail.empOrGuest)
  const getvendormasterdetails = (vendorid) => {
    console.log("into the calling");
    let body = {
      "vendorId": vendorid,
      "vehicleId": null
    }
    axios
      .post(`${process.env.REACT_APP_TRANSPORT_API_URL}/fetch-master-details`, body)
      .then((response) => {
        console.log(response.data);
        setvendorlist(response.data.result.vendorDetails)
      })
      .catch((error) => {
        console.log(error);
      });
  };
 
  const SaveProcessDetails = (vendorid) => {
    console.log("into the calling");
    let body = {
      "remarks": formik.values.remarks,
      "hiredOutsourced": formik.values.hiredoutsoursed,
      "vendorId": formik.values.vendorname,
      "transportReqId": location.state,
      "vehicleId": formik.values.hiredoptions,
      "crtBy": localStorage.getItem("userId")
    }
    axios
      .post(`${process.env.REACT_APP_TRANSPORT_API_URL}/save-process-details`, body)
      .then((response) => {
        console.log(response.data);
        if (response.data.result !== null && response.data.statusCode === 200) {
          showSnackbar("Saved Successfully", "success");
          navigate("/approvaltransportbookings");
        }
        else {
          showSnackbar(response.data.message)
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };
  const [isBoth, setIsBoth] = useState(false)
  let name = ""
  if (bookingDetail.empOrGuest === "Employee") {
    name = "Employee"
  }
  else if (bookingDetail.empOrGuest === "Guest") {
    name = "Guest"
  }
  else {
    name = "Guest"
  }
  console.log(bookingDetail.userMappingDto, "agaitesting")
  for (let i = 0; i < bookingDetail.userMappingDto.length; i++) {
 
    if (bookingDetail.userMappingDto[i].userName !== null) {
      setEmployeeNames(employeeName => [...employeeName, bookingDetail.userMappingDto[i].userName])
    }
    if (bookingDetail.userMappingDto[i].guestNames !== null) {
      setGuestNames(guestName => [...guestName, bookingDetail.userMappingDto[i].guestNames])
 
    }
 
 
  }
 
 
 
 
  return (
    <>
      <Card>
        <CardContent>
          <Box component="form" onSubmit={formik.handleSubmit} noValidate>
            {/* <PageTitle name={"Book Transport "} /> */}
            <div
              style={{
                display: "flex",
                justifyContent: "left",
                alignItems: "center",
                marginBlock: 15,
                borderBottom: "0.5px solid #d1d1cf",
                marginTop: "30px",
              }}
            >
              <CommuteIcon sx={{ fontSize: "25px", color: "#246cb5" }} />
              <H3
                sx={{ fontSize: "15px", color: "#246cb5" }}
                marginLeft={0.5}
                my={0.5}
                display="flex"
                justifyContent="center"
                alignItems="flex-end"
              >
                Transport Request Details
              </H3>
            </div>
            <Grid
              container
              spacing={2}
              direction="row"
              alignItems="center"
            // justifyContent="center"
            // sx={{}}
            >
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Guest or Employee"
                  value={bookingDetail.empOrGuest}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
 
 
 
 
 
 
 
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label={`${name} Name`}
                  defaultValue="Priya"
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="No Of Persons"
                  value={bookingDetail.personsCount}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Contact No."
                  value={bookingDetail.contactNo}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Origin"
                  value={bookingDetail.origin}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Destination"
                  value={bookingDetail.destination}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Reason For Request"
                  value={bookingDetail.remarks}
                  InputLabelProps={{ shrink: true }}
                  disabled
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="Start Date & Time"
                  value={bookingDetail.bookingFrom}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={4} md={4} lg={4}>
                <TextField
                  size="small"
                  sx={{ width: "100%" }}
                  label="End Date & Time"
                  value={bookingDetail.bookingTo}
                  InputLabelProps={{ shrink: true }}
                  disabled
                  InputProps={{
                    readOnly: true,
                  }}
                />
              </Grid>
 
            </Grid>
 
            <div
              style={{
                display: "flex",
                justifyContent: "left",
                alignItems: "center",
                marginBlock: 15,
                borderBottom: "0.5px solid #d1d1cf",
                marginTop: "30px",
              }}
            >
              <AirportShuttleIcon sx={{ fontSize: "25px", color: "#246cb5" }} />
              <H3
                sx={{ fontSize: "15px", color: "#246cb5" }}
                marginLeft={0.5}
                my={0.5}
                display="flex"
                justifyContent="center"
                alignItems="flex-end"
              >
                Vehicle Details
              </H3>
            </div>
            <Grid container spacing={2} direction="row" alignItems="center">
              <Grid
                item
                xs={12}
                sm={3}
                md={3}
                lg={3}
                style={{ textAlign: "center" }}
              >
                {/* <Autocomplete
                id="hiredoutsoursed"
                name="hiredoutsoursed"
                options={HiredOrOutSourced}
                sx={{}}
                size="small"
                fullWidth
                renderInput={(params) => (
                  <TextField {...params} label="Hired or Outsourced" />
                )}
                onChange={(e, value) => {
                  console.log("heloooo");
                  if (value === null) {
                    console.log("not selected");
                  } else {
                    console.log(hired, outSource);
                    if (value.label === "Hired") {
                      console.log(value.label);
                      setHired(true);
                      setOutsource(false);
                    } else if (value.label === "OutSourced") {
                      setOutsource(true);
                      setHired(false);
                    }
                  }
                }}
              /> */}
 
                <FormControl>
                  <RadioGroup
                    row
                    aria-labelledby="demo-row-radio-buttons-group-label"
                    name="hiredoutsoursed"
                    value={formik.values.hiredoutsoursed}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.hiredoutsoursed &&
                      Boolean(formik.errors.hiredoutsoursed)
                    }
                    required
                  >
                    <FormControlLabel
                      value="1"
                      control={<Radio />}
                      label="Hired"
                    />
                    <FormControlLabel
                      value="2"
                      control={<Radio />}
                      label="Outsourced"
                    />
                  </RadioGroup>
                </FormControl>
                {formik.touched.hiredoutsoursed &&
                  formik.errors.hiredoutsoursed && (
                    <FormHelperText error>
                      {formik.errors.hiredoutsoursed}
                    </FormHelperText>
                  )}
              </Grid>
              {formik.values.hiredoutsoursed === "1" ? (
                <>
                  <Grid item xs={12} sm={6} md={6} lg={6}>
                    <Autocomplete
                      id="hiredoptions"
                      name="hiredoptions"
                      options={HiredDetails}
                      size="small"
                      fullWidth
                      value={getValueFromList(
                        HiredDetails,
                        formik?.values.hiredoptions
                      )}
                      getOptionLabel={(option) => option.label}
                      onChange={(e, value) => {
                        if (value === null) {
                          formik.setFieldValue("hiredoptions", null);
                        } else {
                          formik.setFieldValue("hiredoptions", value.id);
                        }
                      }}
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          required
                          label="Hired Vehicle  Details"
                          helperText={
                            formik.errors.hiredoptions &&
                              formik.touched.hiredoptions
                              ? formik.errors.hiredoptions
                              : null
                          }
                          error={
                            formik.errors.hiredoptions &&
                              formik.touched.hiredoptions
                              ? true
                              : false
                          }
                        />
                      )}
                    />
                  </Grid>
 

                </>
              ) : null}
              {formik.values.hiredoutsoursed === "2" ? (
                <>
                  <Grid item xs={12} sm={3} md={3} lg={3}>
                    <Autocomplete
                      id="vendorName"
                      name="vendorName"
                      options={VendorDetails}
                      size="small"
                      fullWidth
                      value={getValueFromList(
                        VendorDetails,
                        formik?.values.vendorName
                      )}
                      getOptionLabel={(option) => option.label}
                      onChange={(e, value) => {
                        if (value === null) {
                          formik.setFieldValue("vendorName", null)
                        } else {
                          formik.setFieldValue("vendorName", value.id)
                          getvendormasterdetails(value.id)
                        }
                      }}
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          required
                          label="Vendor Name"
                          helperText={
                            formik.errors.hiredoptions &&
                              formik.touched.hiredoptions
                              ? formik.errors.hiredoptions
                              : null
                          }
                          error={
                            formik.errors.hiredoptions &&
                              formik.touched.hiredoptions
                              ? true
                              : false
                          }
                        />
                      )}
                    />
                  </Grid>
                  <Grid item xs={12} sm={3} md={3} lg={3}>
                    <TextField
                      id="vendorcontact"
                      name="vendorcontact"
                      disabled="true"
                      value={vendorlist.vendorPhoneNum}
                      size="small"
                      fullWidth
                      label="Vendor Contact Number"
 
                    />
                  </Grid>
                  <Grid item xs={12} sm={3} md={3} lg={3}>
                    <TextField
                      id="vendoranothercontact"
                      name="vendoranothercontact"
                      onChange={formik.handleChange}
                      value={formik.values.vendoranothercontact}
                      size="small"
                      fullWidth
                      label="Alternative Contact Number"
                      error={
                        formik.touched.vendoranothercontact &&
                        Boolean(formik.errors.vendoranothercontact)
                      }
                      helperText={
                        formik.touched.vendoranothercontact &&
                        formik.errors.vendoranothercontact
                      }
                    />
                  </Grid>
                </>
              ) : null}
              <Grid item xs={12} sm={12} md={12} lg={12}>
                <TextField
                  required
                  margin="dense"
                  id="remarks"
                  label="Remarks"
                  fullWidth
                  value={formik.values.remarks}
                  onChange={formik.handleChange}
                  multiline
                  rows={2}
                  error={
                    formik.touched.remarks && Boolean(formik.errors.remarks)
                  }
                  helperText={formik.touched.remarks && formik.errors.remarks}
                //inputProps={{ maxLength: remarksMaxLength }}
                // helperText={
                //   clicked && remarks.length === 0 ? (
                //     <Typography sx={{ fontWeight: "bold" }}>
                //       Remarks are mandatory
                //     </Typography>
                //   ) : remarks.length >= remarksMaxLength - 150 ? (
                //     `${remarksMaxLength - remarks.length} characters remaining`
                //   ) : null
                // }
                />
              </Grid>
 
              <Grid
                item
                xs={12}
                sm={12}
                md={12}
                lg={12}
                sx={{ width: "100%", columnGap: "20px" }}
              >
                <Grid item xs={12} sm={12} md={12} lg={12}>
                  <Button
                    type="submit"
                    variant="contained"
                    sx={{ float: "right", borderRadius: "4px" }}
                    onClick={() => handleRedirect()}
                  >
                    Approve
                  </Button>
                </Grid>
                <Grid item xs={12} sm={12} md={12} lg={12}>
                  <Button
                    type="submit"
                    variant="contained"
                    sx={{
                      float: "right",
                      marginRight: "12px",
                      borderRadius: "4px",
                    }}
                    onClick={() => handleRedirectreject("Reject")}
                  >
                    Reject
                  </Button>
                </Grid>
              </Grid>
            </Grid>
          </Box>
        </CardContent>
      </Card>
    </>
  );
}
 
export default ViewMyBookings;
