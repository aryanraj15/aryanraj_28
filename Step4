
import * as React from "react";
import AccordionDetails from "@mui/material/AccordionDetails";
import Button from "@mui/material/Button";
import AddBoxIcon from "@mui/icons-material/AddBox";
import { useState } from "react";
import Autocomplete from '@mui/material/Autocomplete';
import { createTheme } from "@mui/material";
import { ThemeProvider } from '@mui/material/styles';
import { makeStyles } from "@mui/styles";
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import { styled } from '@mui/material/styles';
import Checkbox from '@mui/material/Checkbox';
import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import SaveAltIcon from '@mui/icons-material/SaveAlt';
import CachedIcon from '@mui/icons-material/Cached';
import * as Yup from 'yup';
import { useFormik } from 'formik';
import FormLabel from '@mui/material/FormLabel';
import {
    Grid,
    TextField,
    Box

} from "@mui/material";

const validationSchema = Yup.object().shape({
    ifscCode: Yup.string().required('IFSC is required'),
    bankName: Yup.string().required('Bank Name is required'),
    branchName: Yup.string().required('Branch Name is required'),
    accholdername: Yup.string().required('Account Holder Name is required'),
    accountNumber: Yup.string().required('Account Number is required'),
    accounttype: Yup.string().required('Account Type is required'),

});


const PageFour = ({ onButtonClick }) => {


    const formik = useFormik({
        initialValues: {
            ifscCode: '',
            branchName: '',
            bankName: '',
            accholdername: '',
            accountNumber: '',
            accounttype: '',

            // Add initial values for other fields
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            // Handle form submission or API integration here
        },
    });

    const options = [
        { label: 'One', id: 1 },
        { label: 'Two', id: 2 },
    ];

    const optionsBank = [
        { label: 'Savings Account', id: 1 },
        { label: 'Current Account', id: 2 },
        { label: 'Salary Account', id: 3 },
    ];

    const BankName = [
        { label: 'State Bank of India', id: 1 },
        { label: 'Union Bank of India', id: 2 },
        { label: 'Canara bank', id: 3 },
        { label: 'HDFC Bank', id: 3 },
    ];
    const VisuallyHiddenInput = styled('input')({
        clip: 'rect(0 0 0 0)',
        clipPath: 'inset(50%)',
        height: 1,
        overflow: 'hidden',
        position: 'absolute',
        bottom: 0,
        left: 0,
        whiteSpace: 'nowrap',
        width: 1,
    });



    return (
        <form onSubmit={formik.handleSubmit}>
        <div style={{ padding: "0px 60px", marginBottom: "5px" }}>


            <AccordionDetails>
                <div style={{ color: "red", marginBottom: "15px", fontSize: "14px" }}>
                    <p><b>Note:</b> Please fill the Bank Details, all fields are mandatory</p>
                </div>
                <Grid
                    container
                    direction="row"
                    rowSpacing={0}
                    columnSpacing={2}
                    justify="flex-end"
                    alignItems="center"
                    sx={{ mb: 2 }}

                >
                    <Grid item xs={12} sm={4} md={4} lg={4}>
                    <TextField
                            margin="normal"
                            required
                            fullWidth
                            id="ifscCode"
                            label="IFSC Code"
                            name="ifscCode"
                            value={formik.values.ifscCode || ""}
                            size="small"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            error={
                                formik.touched.ifscCode &&
                                Boolean(formik.errors.ifscCode)
                            }
                            helperText={
                                formik.touched.ifscCode &&
                                formik.errors.ifscCode
                            }
                            
                        />
                        
                    </Grid>
                    <Grid item xs={12} sm={4} md={4} lg={4}>

                        <Autocomplete
                            disablePortal
                            margin="0"
                            fullWidth
                            size="small"
                            id="bankName"
                            name="bankName"
                            options={optionsBank}
                            value={optionsBank.find(
                                (option) => option.id === formik.values.bankName?.id
                            ) || null}
                            onChange={(e, value) => {
                                console.log(value)
                                if (value === null) {
                                    formik.setFieldValue("bankName", null)
                                }
                                else
                                    formik.setFieldValue("bankName", value)
                            }}

                            getOptionLabel={(value) => value.label}
                            sx={{ width: "100%", mt: 2, mb: 1 }}
                            renderInput={(params) => (
                                <TextField {...params}
                                    label="Bank Name"
                                    onBlur={formik.handleBlur}
                                    helperText={formik.errors.bankName && formik.touched.bankName ? formik.errors.bankName : null}
                                    error={formik.errors.bankName && formik.touched.bankName ? true : false}
                                />
                            )}
                        />
                    </Grid>
                    <Grid item xs={12} sm={4} md={4} lg={4}>
                    <Autocomplete
                            disablePortal
                            margin="0"
                            fullWidth
                            size="small"
                            id="branchName"
                            name="branchName"
                            options={optionsBank}
                            value={optionsBank.find(
                                (option) => option.id === formik.values.branchName?.id
                            ) || null}
                            onChange={(e, value) => {
                                console.log(value)
                                if (value === null) {
                                    formik.setFieldValue("branchName", null)
                                }
                                else
                                    formik.setFieldValue("branchName", value)
                            }}

                            getOptionLabel={(value) => value.label}
                            sx={{ width: "100%", mt: 2, mb: 1 }}
                            renderInput={(params) => (
                                <TextField {...params}
                                    label="Branch Name"
                                    onBlur={formik.handleBlur}
                                    helperText={formik.errors.branchName && formik.touched.branchName ? formik.errors.branchName : null}
                                    error={formik.errors.branchName && formik.touched.branchName ? true : false}
                                />
                            )}
                        />

                    </Grid>


                </Grid>
                <Grid
                    container
                    direction="row"
                    rowSpacing={0}
                    columnSpacing={2}
                    justify="flex-end"
                    alignItems="center"
                    sx={{ mb: 2 }}

                >
                    <Grid item xs={12} sm={4} md={4} lg={4}>

                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            id="accountNumber"
                            label="Account Number"
                            name="accountNumber"
                            value={formik.values.accountNumber || ""}
                            size="small"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            error={
                                formik.touched.accountNumber &&
                                Boolean(formik.errors.accountNumber)
                            }
                            helperText={
                                formik.touched.accountNumber &&
                                formik.errors.accountNumber
                            }
                            
                        />
                       
                    </Grid>

                    <Grid item xs={12} sm={4} md={4} lg={4}>


                    <Autocomplete
                            disablePortal
                            margin="0"
                            fullWidth
                            size="small"
                            id="accounttype"
                            name="accounttype"
                            options={optionsBank}
                            value={optionsBank.find(
                                (option) => option.id === formik.values.accounttype?.id
                            ) || null}
                            onChange={(e, value) => {
                                console.log(value)
                                if (value === null) {
                                    formik.setFieldValue("accounttype", null)
                                }
                                else
                                    formik.setFieldValue("accounttype", value)
                            }}

                            getOptionLabel={(value) => value.label}
                            sx={{ width: "100%", mt:2}}
                            renderInput={(params) => (
                                <TextField {...params}
                                    label="Account Type"
                                    onBlur={formik.handleBlur}
                                    helperText={formik.errors.accounttype && formik.touched.accounttype ? formik.errors.accounttype : null}
                                    error={formik.errors.accounttype && formik.touched.accounttype ? true : false}
                                />
                            )}
                        />

                    </Grid>
                    <Grid item xs={12} sm={4} md={4} lg={4}>

                    <TextField
                            margin="normal"
                            required
                            fullWidth
                            id="accholdername"
                            label="Account Holder Name"
                            name="accholdername"
                            value={formik.values.accholdername || ""}
                            size="small"
                            onChange={formik.handleChange}
                            onBlur={formik.handleBlur}
                            error={
                                formik.touched.accholdername &&
                                Boolean(formik.errors.accholdername)
                            }
                            helperText={
                                formik.touched.accholdername &&
                                formik.errors.accholdername
                            }
                            
                        />
                       
                    </Grid>


                </Grid>
                <Grid
                    container
                    direction="row"
                    rowSpacing={0}
                    columnSpacing={2}
                    justify="flex-end"
                    alignItems="center"
                    sx={{ mb: 2 }}

                >


                    <Grid item xs={12} sm={4} md={4} lg={4}>

                        <Button sx={{ mb: 2 }} component="label" variant="contained" startIcon={<CloudUploadIcon />}>
                            Upload Bank PassBook
                            <VisuallyHiddenInput type="file" />

                        </Button>

                    </Grid>


                </Grid>
                <Grid
                    container
                    direction="row"
                    rowSpacing={0}
                    columnSpacing={2}
                    justify="flex-end"
                    alignItems="center"
                    sx={{ mt: 1, textAlign: 'center' }}

                >
                    <Grid item xs={12} sm={4} md={4} lg={12}>
                        <FormControl component="fieldset">

                            <FormGroup aria-label="position" row>

                                <FormControlLabel
                                    value="end"
                                    control={<Checkbox />}
                                    label="I hereby agree that all the information provided above are true to my knowledge."
                                    labelPlacement="end"
                                />
                            </FormGroup>
                        </FormControl>
                    </Grid>

                </Grid>





            </AccordionDetails>

            <Box
                spacing={2}
                sx={{ margin: 2, textAlign: 'center' }}
            >

                <Button
                    type="button"
                    sx={{ minWidth: 100, ml: 1, mt: { xs: 1, md: 0 } }}
                    onClick={() => onButtonClick("pagethree")}
                    variant="outlined" color="secondary"

                >
                    <CachedIcon /> Previous
                </Button>
                <Button
                    sx={{
                        minWidth: 100, ml: 1, mt: { xs: 1, md: 0 }
                    }}
                    variant="contained"
                    type="submit"
                    onClick={() => onButtonClick(alert("Submitted"))}
                >
                    SUBMIT
                    <SaveAltIcon sx={{ ml: 0.2 }}></SaveAltIcon>
                </Button>
            </Box>


        </div>
    </form>
    );
}
export default PageFour;














 axios.get(`${process.env.REACT_APP_MASTER_API_URL}/user/getStatelist`).then(response => {
            let sortedStateData = response.data.result.map((value) => {
                value.stateName = value.stateName.toUpperCase();
                return value;
            })

            sortedStateData = sortedStateData.sort((a, b) => a.stateName.localeCompare(b.stateName));

            setstateList(sortedStateData);
            console.log(sortedStateData);
        })
            .catch(error => {
                setstateList([]);
                console.log(error);
            });

                                   <Grid item xs={12} sm={4} md={4} lg={4}>
                                   
                                        <Autocomplete
                                            disablePortal
                                            margin="0"
                                            fullWidth
                                            size="small"
                                            id="caste"
                                            name="caste"
                                            options={casteList}
                                            value={casteList.find(
                                                (option) => option.id === formik.values.caste?.id
                                            ) || null}
                                            onChange={(e, value) => {
                                                console.log(value)
                                                if (value === null) {
                                                    formik.setFieldValue("caste", null)
                                                  
                                                }
                                                else
                                                    formik.setFieldValue("caste", value)
                                                axios.get(`${process.env.REACT_APP_MASTER_API_URL}/employee-enrollment/subcaste/${value.id}`).then(response => {

                                                    console.log(response.data.result)

                                                    let sortedcastegroup = response.data.result.map((value) => {
                                                        value.label = value.label.toUpperCase();
                                                        return value;
                                                    })

                                                    setSubCasteList(sortedcastegroup);
                                                   
                                                    console.log(sortedcastegroup);
                                                })
                                                    .catch(error => {
                                                        setSubCasteList([]);
                                                        console.log(error);
                                                    });

                                            }}
                                           
                                            
                                            getOptionLabel={(value) => value.label}
                                            sx={{ width: "100%", mt: 2, mb: 1 }}
                                            renderInput={(params) => (
                                                <TextField {...params}
                                                    label="Caste"
                                                    onBlur={formik.handleBlur}
                                                    helperText={formik.errors.caste && formik.touched.caste ? formik.errors.caste : null}
                                                    error={formik.errors.caste && formik.touched.caste ? true : false}
                                                />
                                            )}
                                        />
                                    
                                    </Grid>
                                    <Grid item xs={12} sm={4} md={4} lg={4}>
                                    <Tooltip >
                                        <Autocomplete
                                            disablePortal
                                            margin="0"
                                            fullWidth
                                            size="small"
                                            id="subcaste"
                                            name="subcaste"
                                            options={subcasteList}
                                            value={subcasteList.find(
                                                (option) => option.id === formik.values.subcaste?.id
                                            ) || null}
                                            onChange={(e, value) => {
                                                console.log(value)
                                                if (value === null) {
                                                    formik.setFieldValue("subcaste", null)
                                                }
                                                else
                                                    formik.setFieldValue("subcaste", value)
                                            }}
                                            
                                           
                                            getOptionLabel={(value) => value.label}
                                            sx={{ width: "100%", mt: 2, mb: 1 }}
                                            renderInput={(params) => (
                                                <TextField {...params}
                                                    label="Sub caste"
                                                    onBlur={formik.handleBlur}
                                                    helperText={formik.errors.subcaste && formik.touched.subcaste ? formik.errors.subcaste : null}
                                                    error={formik.errors.subcaste && formik.touched.subcaste ? true : false}
                                                />
                                            )}
                                        />
                                        </Tooltip>

                                    </Grid>
