import React, { useState, useEffect } from 'react'
import SearchTable from '../../../components/SearchTableAlt';
import { Grid, Box, Card, CardContent, IconButton, Stack, Button, Link, Dialog, DialogContent } from '@mui/material';
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import EventBusyIcon from '@mui/icons-material/EventBusy';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns'
import Loader from '../../../components/Loader';
import LocationSearchingIcon from '@mui/icons-material/LocationSearching';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';


const ViewLeaves = () => {


    const title = ' Leave Applications';
    useTitle(title);

    const navigate = useNavigate();
    const user = useSelector((state) => state.loginReducer);
    console.log(user.data.userdetails.user.userId);
    const userId = user.data.userdetails.user.userId;
    const [tableData, setTableData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [open, setOpen] = React.useState(false);
    const [requestStatus, setRequestStatus] = useState(null);
    const [reqRemarks, setReqRemarks] = useState(null);

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const handleFetchData = async () => {
        try {
            const payload = {
                userId: userId
            }

            const response = await axios.post("http://129.154.229.83:8095/leavemanagement/leave-applied-leaves", payload);
            const formattedData = response.data.result.map((item, index) => ({
                ...item,
                index: index + 1,
                // daysOfLeave: item.daysOfLeave + (item.hoursOfLeave), // Convert hours to days
                // rqstFrom: format(new Date(item.rqstFrom), 'yyyy-MM-dd'),
                // rqstTo: format(new Date(item.rqstTo), 'yyyy-MM-dd'),
            }));

            setTableData(formattedData);

            console.log('kp-tableDataResponse', response.data);

            // setTableData(response.data.result);
            if (response.status === true) {
                console.log('kp-tableData1', tableData);
                console.log('kp-tableData2', tableData);
                


            }
        } catch (error) {

            console.error(error);
        }
        finally {
            setIsLoading(false);
        }
    }

    useEffect(() => {
        handleFetchData();
        setIsLoading(true);
    }, [])
    const columns = [
        {
            field: "index", //keep this fixed, index should be present for all tables
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "rqstId",
            headerName: "Leave ID",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link
                    sx={{ cursor: "pointer" }}
                    onClick={() => {
                        const requestId = params.row.rqstId;
                        navigate("/leaveapplicationview", { state: { requestId } });
                    }}
                >
                    {params.value}
                </Link>
            ),
        },
        {
            field: "leaveTypeDesc",
            headerName: "Leave Type",
            flex: 0.3,
            minWidth: 160,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "daysOfLeave",
            headerName: "Days of Leave",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstStatusDesc",
            headerName: "Leave Status",
            flex: 0.3,
            minWidth: 200,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstFromDate",
            headerName: "Start Date",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstFromTime",
            headerName: "Start Time",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstToDate",
            headerName: "End Date",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstToTime",
            headerName: "End Time",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "requestStatus",
            headerName: "Track Status",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link onClick={() => { setReqRemarks(params.row.remarks); setRequestStatus(params.value); handleClickOpen(); }}>
                    <LocationSearchingIcon color='primary' />
                </Link>
            )
        },
       

    ];

    console.log('kp-tabledata3', tableData)
    return (
        <>
            {
                isLoading && <Loader />
            }
            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
 
                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf", marginTop: '30px' }}>
                        <EventBusyIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end"> My Leave Applications</H3>
                    </div>
                    <Box component={"div"} >
                        {/* <Grid sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 2 }}>
                            <Button variant={'contained'} onClick={handleNavigation}>Apply for a new leave</Button>
                        </Grid> */}
                        <SearchTable
                            columns={columns}
                            data={tableData}
                            isCheckbox={false}
                            isHideDensity={false}
                            isHideExport={true}
                            isHideFilter={true}
                            isHideColumn={true}
                            isHidePaging={false}
                            name="abc"
                            id="hjjh"
                        />
                    </Box>
                </CardContent>
            </Card>
            <Dialog
                fullWidth
                maxWidth={'md'}
                open={open}
                onClose={handleClose}
            >
                <DialogContent >
                    <TrackLeaveRequestStatus reqRemarks={reqRemarks} requestStatus={requestStatus} />
                </DialogContent>
            </Dialog>
        </>
    )
}

export default ViewLeaves













const handleFetchApplicants = async (values, reset) => {
    setLoading(true);
    try {
        // Fetch applicants details
        const payload = {
            rqstId: values.rqstId,
            userName: values.userName,
            rqstStatus: values.rqstStatus,
            rqstFrom: values.rqstFrom,
            rqstTo: values.rqstTo,
        };

        const response = await axios.post(
            "http://129.154.229.83:8095/leavemanagement/manage-leave-search",
            payload
        );

        setLoading(false);
        if (response.data.status && response.data.result.length > 0) {
            // Map the data and concatenate the start date and time
            const formattedData = response.data.result.map((item, index) => {
                const fromDate = item.rqstFromDate + " : " + item.rqstFromTime;
                return createData(
                    index + 1,
                    item.rqstId,
                    item.userName,
                    item.empCode,
                    item.leaveTypeDesc,
                    item.daysOfLeave,
                    fromDate, // Concatenated Start Date
                    item.rqstToDate,
                    item.rqstFromTime,
                    item.rqstToTime,
                    item.rqstStatusDesc
                );
            });
            setRows(formattedData);

            if (reset) {
                showSnackbar("Reset successful", "info");
            } else {
                showSnackbar("Data fetched successfully", "success");
            }
        } else if (response.data.statusCode === 404) {
            setRows([]);
            if (reset) {
                showSnackbar("Form reset successful, no data found", "info");
            } else {
                showSnackbar("No data found", "info");
            }
        } else {
            setRows([]);
            showSnackbar("An error occurred", "error");
        }
    } catch (error) {
        console.error("An error occurred:", error);
        setRows([]);
        setLoading(false);
        if (error.response.data.statusCode === 404) {
            if (reset) {
                showSnackbar("Form reset successful, no data found", "info");
            } else {
                showSnackbar("No data found", "error");
            }
        } else {
            showSnackbar("Oops, something went wrong", "error");
        }
    }
};

