import React, { useState, useEffect } from 'react'
import SearchTable from '../../../components/SearchTableAlt';
import { Grid, Box, Card, CardContent, IconButton, Stack, Button, Link, Dialog, DialogContent, TextField } from '@mui/material';
import useTitle from '../../../hooks/useTitle';
import PageTitle from '../../../layouts/PageTitle';
import { useNavigate } from 'react-router-dom';
import { H3 } from '../../../components/Typography';
import EventBusyIcon from '@mui/icons-material/EventBusy';
import { useSelector } from 'react-redux';
import axios from 'axios';
import { format } from 'date-fns'
import Loader from '../../../components/Loader';
import LocationSearchingIcon from '@mui/icons-material/LocationSearching';
import TrackLeaveRequestStatus from './TrackLeaveRequestStatus';
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import dayjs from 'dayjs';
import * as Yup from 'yup';
import { useFormik } from 'formik';
import CachedIcon from "@mui/icons-material/Cached";
import SearchIcon from "@mui/icons-material/Search";
import swal from "sweetalert";
import { useLocation } from "react-router";
const ViewLeaves = () => {


    const title = 'Leave Applications';
    const title2 = 'Search Parameters';

    useTitle(title);

    const navigate = useNavigate();
    const user = useSelector((state) => state.loginReducer);
    console.log(user.data.userdetails.user.userId);
    const userId = user.data.userdetails.user.userId;
    const [tableData, setTableData] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [open, setOpen] = React.useState(false);
    const [requestStatus, setRequestStatus] = useState(null);
    const [reqRemarks, setReqRemarks] = useState(null);
    const [selectAllApplications, setSelectAllApplications] = useState(false);
    const location = useLocation();

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };


    const validationSchema = Yup.object().shape({

        LeaveStartDate: Yup.string().required("Leave Start Date is required").nullable(),
        LeaveEndDate: Yup.string().required("Leave End Date is required").nullable(),
    });

    const formik = useFormik({
        initialValues: {

            LeaveStartDate: null,
            LeaveEndDate: null,

        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            console.log(values)
            handleFetchData();
            // handleRedirect();
        },
    });
    console.log(formik.values.LeaveStartDate);
    console.log(formik.values.LeaveEndDate);


    const handleFetchData = async () => {
        try {
            const payload = {
                userId: userId,
                rqstFrom: formik.values.LeaveStartDate,
                rqstTo: formik.values.LeaveEndDate
            }

            const response = await axios.post("http://129.154.229.83:8095/leavemanagement/leave-applied-leaves", payload);
            const formattedData = response.data.result.map((item, index) => {
                const fromDate = item.rqstFromDate + ":" + item.rqstFromTime;
                const toDate = item.rqstToDate + ":" + item.rqstToTime;


                return {
                    ...item,
                    index: index + 1,
                    fromDate: fromDate,
                    toDate: toDate,
                };

                // daysOfLeave: item.daysOfLeave + (item.hoursOfLeave), // Convert hours to days
                // rqstFrom: format(new Date(item.rqstFrom), 'yyyy-MM-dd'),
                // rqstTo: format(new Date(item.rqstTo), 'yyyy-MM-dd'),

            });

            setTableData(formattedData);
            console.log('kp-tableDataResponse', response.data);

            // setTableData(response.data.result);
            if (response.status === true) {
                console.log('kp-tableData1', tableData);
                console.log('kp-tableData2', tableData);



            }
        } catch (error) {

            console.error(error);
        }
        finally {
            setIsLoading(false);
        }
    }

    useEffect(() => {
        handleFetchData();
        setIsLoading(true);
        // setTableData([]);
    }, [])
    const columns = [
        {
            field: "index", //keep this fixed, index should be present for all tables
            headerName: "S.No",
            flex: 0.1,
            minWidth: 80,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "rqstId",
            headerName: "Leave ID",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link
                    sx={{ cursor: "pointer" }}
                    onClick={() => {
                        const requestId = params.row.rqstId;
                        navigate("/leaveapplicationview", { state: { requestId } });
                    }}
                >
                    {params.value}
                </Link>
            ),
        },
        {
            field: "leaveTypeDesc",
            headerName: "Leave Type",
            flex: 0.3,
            minWidth: 160,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "daysOfLeave",
            headerName: "Days of Leave",
            flex: 0.3,
            minWidth: 120,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "fromDate",
            headerName: "Leave Start",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "toDate",
            headerName: "Leave End",
            flex: 0.3,
            minWidth: 180,
            headerClassName: "super-app-theme--header",
        },
        {
            field: "rqstStatusDesc",
            headerName: "Leave Current Status",
            flex: 0.3,
            minWidth: 220,
            headerClassName: "super-app-theme--header",
        },

        {
            field: "requestStatus",
            headerName: "Track Status",
            flex: 0.3,
            minWidth: 100,
            headerClassName: "super-app-theme--header",
            renderCell: (params) => (
                <Link onClick={() => { setReqRemarks(params.row.remarks); setRequestStatus(params.value); handleClickOpen(); }}>
                    <LocationSearchingIcon color='primary' />
                </Link>
            )
        },


    ];

    const handleResetForm = () => {
        swal({
            title: "Do you want to reset the search?",
            buttons: { cancel: "Cancel", confirm: "Confirm" },
        }).then((userClickedConfirm) => {
            if (userClickedConfirm) {
                setSelectAllApplications(false);

                const updatedValues = { LeaveStartDate: null, LeaveEndDate: null };
                formik.resetForm({ values: updatedValues });
                handleFetchData(updatedValues, true);

                // Additional actions if needed
                // handleFetchData();
            }
        });
    };



    console.log('kp-tabledata3', tableData)
    return (
        <>
            {
                isLoading && <Loader />
            }

            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>
                    <PageTitle name={title2} />
                    <Box component="form" onSubmit={formik.handleSubmit} noValidate>
                        <Grid
                            container
                            columnSpacing={2}
                        >
                            <Grid item xs={12} sm={6} md={6} lg={6}>
                                <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale={"en-gb"}>
                                    <DatePicker
                                        id="LeaveStartDate"
                                        name="LeaveStartDate"
                                        format="DD/MM/YYYY"
                                        label="Start Date"
                                        slotProps={{ textField: { size: 'small' } }}
                                        sx={{ width: "100%" }}
                                        // inputFormat="DD/MM/YYYY"
                                        value={formik.values.LeaveStartDate}
                                        onChange={(date) => {
                                            formik.setFieldValue("LeaveStartDate", null);
                                            const formattedDate = dayjs(date).format("YYYY-MM-DD");
                                            formik.setFieldValue("LeaveStartDate", formattedDate);
                                        }}
                                        renderInput={(params) => (
                                            <TextField
                                                size="small"
                                                fullWidth
                                                margin="0"
                                                required
                                                {...params}
                                                error={formik.touched.LeaveStartDate && Boolean(formik.errors.LeaveStartDate)}
                                                helperText={formik.touched.LeaveStartDate && formik.errors.LeaveStartDate}
                                                onBlur={formik.handleBlur}

                                            />
                                        )}
                                    />
                                </LocalizationProvider>
                            </Grid>
                            <Grid item xs={12} sm={6} md={6} lg={6}>
                                <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale={"en-gb"}>
                                    <DatePicker
                                        margin="0"
                                        id="LeaveEndDate"
                                        name="LeaveEndDate"

                                        slotProps={{ textField: { size: 'small' } }}
                                        label="End Date"
                                        sx={{ width: "100%" }}
                                        format="DD/MM/YYYY"
                                        value={formik.values.LeaveEndDate}
                                        onChange={(date) => {
                                            formik.setFieldValue("LeaveEndDate", null);
                                            const formattedDate = dayjs(date).format("YYYY-MM-DD");
                                            formik.setFieldValue("LeaveEndDate", formattedDate);
                                        }}
                                        renderInput={(params) => (
                                            <TextField margin="0"
                                                required
                                                {...params} />
                                        )}
                                    />
                                </LocalizationProvider>
                            </Grid>

                        </Grid>
                        <Stack
                            direction="row"
                            spacing={2}
                            justifyContent="center"
                        //mt={2}
                        >
                            <Button
                                variant="contained"
                                //onClick={handleFetchApplicants}
                                type="submit"
                            >
                                <SearchIcon />
                                &nbsp;SEARCH
                            </Button>
                            <Button
                                variant="outlined"
                                // onClick ={()=>{
                                //     formik.resetForm();
                                //     window.location.reload();
                                // }}
                                onClick={handleResetForm}


                            >
                                <CachedIcon />
                                &nbsp;RESET
                            </Button>
                        </Stack>
                        {/* </form> */}
                    </Box>
                </CardContent>
            </Card>
            <Card sx={{ my: 2 }} elevation={3}>
                <CardContent>

                    <div style={{ display: "flex", justifyContent: "left", alignItems: 'center', marginBlock: 15, borderBottom: "0.5px solid #d1d1cf", marginTop: '30px' }}>
                        <EventBusyIcon sx={{ fontSize: "25px", color: '#246cb5' }} />
                        <H3 sx={{ fontSize: "15px", color: '#246cb5' }} marginLeft={0.5} my={0.5} display="flex" justifyContent="center" alignItems="flex-end"> Leave Applications</H3>
                    </div>
                    <Box component={"div"} >
                        {/* <Grid sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 2 }}>
                            <Button variant={'contained'} onClick={handleNavigation}>Apply for a new leave</Button>
                        </Grid> */}
                        <SearchTable
                            columns={columns}
                            data={tableData}
                            isCheckbox={false}
                            isHideDensity={false}
                            isHideExport={true}
                            isHideFilter={true}
                            isHideColumn={true}
                            isHidePaging={false}
                            name="abc"
                            id="hjjh"
                        />
                    </Box>
                </CardContent>
            </Card>
            <Dialog
                fullWidth
                maxWidth={'md'}
                open={open}
                onClose={handleClose}
            >
                <DialogContent >
                    <TrackLeaveRequestStatus reqRemarks={reqRemarks} requestStatus={requestStatus} />
                </DialogContent>
            </Dialog>
        </>
    )
}

export default ViewLeaves
