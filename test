
  const getEarningDetails = async (data) => {
    try {
      const response = await axios.post(
        "http://141.148.194.18:8052/payroll/employee/entitlement-details/payment",
        {
          basicPay: formik.values.BasicPay,
          payCommissionId: formik.values.PayCommission,
          grpId: resultList?.group?.id,
          serviceTypeId: resultList?.serviceType?.id,
          payLevelId: formik.values.PayScale,
          departmentId: resultList?.department.id,
          designationId: resultList?.designation?.id,
          ctaEntitlement: formik.values.CTAEntitlement,
          hraTier: formik.values.HRATier,
        },
        {
          headers: {
            Authorization: `Bearer ${Cookies.get("token")}`,
          },
        }
      );
      setEntitlementDetails(response.data);
      setIsSubmitDisabled(true);
      setIsTableDisabled(true);
      console.log("aryznnn", response);
    } catch (error) {
       // setOpenAlertSave(true);
      setToastMessage(
        "Something went wrong while Saving the details, please try again."
      );
      setToastSeverity("error");
      setOpenToast(true);
    }
  };






const qualification = getValueFromList(qualificationList, params.row.qualificationId);
          return qualification ? qualification.label : 'N/A'
return (
          getValueFromList(qualificationList, params.row.qualificationId).label
        )




TypeError: Cannot read properties of null (reading 'label')
    at Object.renderCell (SaveAddressDetails.js:227:1)
    at GridCell.js:558:1
    at renderWithHooks (react-dom.development.js:15486:1)
    at updateForwardRef (react-dom.development.js:19245:1)
    at beginWork (react-dom.development.js:21675:1)
    at HTMLUnknownElement.callCallback (react-dom.development.js:4164:1)
    at Object.invokeGuardedCallbackDev (react-dom.development.js:4213:1)
    at invokeGuardedCallback (react-dom.development.js:4277:1)
    at beginWork$1 (react-dom.development.js:27490:1)
    at performUnitOfWork (react-dom.development.js:26596:1)




const fetchData = () => {
    axios.get(`http://141.148.194.18:8052/payroll/employee/educational-details/${formData.empRefNo}`, {
        headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
        }
    })
    .then(response => {
        console.log(response);
        if (response.data.status && response.data.result) {
            setRows(response.data.result.map(item => ({
                id: item.eduId,
                qualificationId: item.qualificationId ? item.qualificationId.id : null,
                qualificationLabel: item.qualificationId ? item.qualificationId.label : '',
                boardOrUniversity: item.boardOrUniversity,
                instituteName: item.instituteName,
                course: item.course,
                marksCgpaId: item.marksCgpaId ? item.marksCgpaId.id : null,
                marksCgpaLabel: item.marksCgpaId ? item.marksCgpaId.label : '',
                marksSecured: item.marksSecured !== null ? item.marksSecured : '',
                totalMarks: item.totalMarks !== null ? item.totalMarks : '',
                cgpa: item.cgpa !== null ? item.cgpa : '',
                admissionDate: dayjs(item.admissionDate, 'DD-MM-YYYY'),
                completionDate: dayjs(item.completionDate, 'DD-MM-YYYY')
            })));
        }
    })
    .catch(error => {
        console.error("There was an error fetching the data!", error);
    });
};










{
    "status": true,
    "message": "Educational Details fetched successfully",
    "result": [
        {
            "eduId": 28,
            "empId": 66,
            "qualificationId": {
                "id": 267,
                "label": "Graduation"
            },
            "instituteName": "KL",
            "boardOrUniversity": "Deemed",
            "course": "CSE",
            "marksCgpaId": {
                "id": 270,
                "label": "CGPA"
            },
            "marksSecured": null,
            "totalMarks": null,
            "cgpa": 9,
            "admissionDate": "19-07-2019",
            "completionDate": "17-07-2024",
            "filePath": null,
            "fileName": null,
            "crtBy": {
                "id": 1,
                "label": "raj18"
            },
            "crtOn": "18-07-2024 05:04 PM",
            "updBy": null,
            "updOn": "18-07-2024 05:04 PM"
        }
    ],
    "statusCode": 200
}

  const fetchData = () => {
    axios.get(`http://141.148.194.18:8052/payroll/employee/educational-details/${formData.empRefNo}`, {
        headers: {
            Authorization: `Bearer ${Cookies.get("token")}`
        }
    }) .then(response => {
      console.log(response)
      if (response.data.status && response.data.result) {
        setRows(response.data.result.map(item => ({
          id: item.eduId,
          qualificationId: item.qualificationId.id,
          qualificationLabel: item.qualificationId.label,
          boardOrUniversity: item.boardOrUniversity,
          instituteName: item.instituteName,
          course: item.course,
          marksCgpaId: item.marksCgpaId.id,
          marksCgpaLabel: item.marksCgpaId.label,
          marksSecured: item.marksSecured,
          totalMarks: item.totalMarks,
          cgpa: item.cgpa,
          admissionDate: dayjs(item.admissionDate, 'DD-MM-YYYY'),
          completionDate: dayjs(item.completionDate, 'DD-MM-YYYY')
        })));
      }
    })
}


  const columns = [
    {
      field: "id",
      headerClassName: "super-app-theme--header",
      headerName: "S No.",
      width: 60,
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
      hide: true
    },
    {
      width: 250,
      headerName: "Qualification Type",
      field: "qualificationId",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
      renderCell: (params) => {
        return (
          getValueFromList(qualificationList, params.row.qualificationId).label
        )
      }
    },
    {
      width: 200,
      headerName: "Board/University",
      field: "boardOrUniversity",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    // {
    //   width: 200,
    //   headerName: "courseType",
    //   field: "CourseType",
    //   headerClassName: "super-app-theme--header",
    //   sortable: false,
    //   filterable: false,
    //   disableColumnMenu: true,
    // },
    {
      width: 200,
      headerName: "Institute Name",
      field: "instituteName",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    {
      width: 200,
      headerName: "Course",
      field: "course",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    // {
    //   width: 200,
    //   headerName: "Course Duration(in months)",
    //   field: "Duration",
    //   headerClassName: "super-app-theme--header",
    //   sortable: false,
    //   filterable: false,
    //   disableColumnMenu: true,
    // },
    {
      field: "marksCgpaId",
      headerName: "Marks/Cgpa",
      width: 140,
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
      renderCell: (params) => {
        return (
          getValueFromList(marksCgpaList, params.row.marksCgpaId).label
        )
      }
    },
    {
      field: "marksSecured",
      headerName: "Marks Obtained",
      width: 140,
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    {
      field: "totalMarks",
      headerName: "Total Marks",
      width: 140,
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    {
      width: 200,
      headerName: "CGPA",
      field: "cgpa",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
    {
      width: 200,
      headerName: "Admission Date",
      field: "admissionDate",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
      renderCell: (params) => {
        return (
          dayjs(params.row.admissionDate).format("DD-MM-YYYY")
        )
      }
    },
    {
      width: 200,
      headerName: "Completion Date",
      field: "completionDate",
      headerClassName: "super-app-theme--header",
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
      renderCell: (params) => {
        return (
          dayjs(params.row.completionDate).format("DD-MM-YYYY")
        )
      }
    },
    {
      field: "actiondelete",
      headerName: "Action",
      width: 140,
      headerClassName: "super-app-theme--header",
      renderCell: (params) => {
        return (
          <Button
            variant="outlined"
            color="error"
            sx={{ mb: 1 }}
            // value={params.value}
            onClick={() => handleDeleteRow(params.row.id)}
          >
            Delete
          </Button>
        );
      },
      sortable: false,
      filterable: false,
      disableColumnMenu: true,
    },
  ];
