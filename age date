import React, { useRef, useState } from 'react';
import {
  Box,
  Button,
  ButtonGroup,
  Flex,
  HStack,
  IconButton,
  Input,
  SkeletonText,
  Text,
} from '@chakra-ui/react';
import { FaLocationArrow, FaTimes } from 'react-icons/fa';
import { useJsApiLoader, GoogleMap, DirectionsRenderer } from '@react-google-maps/api';
import 'google-polyline';

const center = { lat: 16.412787634213785, lng: 80.56114883838613 };

function GoogleMapsIntegration() {
  const { isLoaded } = useJsApiLoader({
    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
    libraries: ['places'],
  });

  const [map, setMap] = useState(null);
  const [directionsResponse, setDirectionsResponse] = useState(null);
  const [distance, setDistance] = useState('');
  const [duration, setDuration] = useState('');
  const ployline = require('google-polyline');

  const originRef = useRef();
  const destinationRef = useRef();

  if (!isLoaded) {
    return <SkeletonText />;
  }

  async function calculateRoute() {
    if (!originRef.current.value || !destinationRef.current.value) {
      return;
    }
    
    const directionsService = new google.maps.DirectionsService();
    const results = await directionsService.route({
      origin: originRef.current.value,
      destination: destinationRef.current.value,
      travelMode: google.maps.TravelMode.DRIVING,
    });

    setDirectionsResponse(results);
    setDistance(results.routes[0].legs[0].distance.text);
    setDuration(results.routes[0].legs[0].duration.text);
  }

  function clearRoute() {
    setDirectionsResponse(null);
    setDistance('');
    setDuration('');
    originRef.current.value = '';
    destinationRef.current.value = '';
  }

  return (
    <Flex position="relative" flexDirection="column" alignItems="center" h="100vh" w="100vw">
      <Box position="absolute" left={0} top={0} h="100%" w="100%">
        <GoogleMap
          center={center}
          zoom={15}
          mapContainerStyle={{ width: "100%", height: "100%" }}
          onLoad={(map) => setMap(map)}
        >
          {directionsResponse && (
            <DirectionsRenderer directions={directionsResponse} />
          )}
        </GoogleMap>
      </Box>
      <Box p={4} borderRadius="lg" m={4} bgColor="white" shadow="base" minW="container.md" zIndex="1">
        <HStack spacing={2} justifyContent="space-between">
          <Box flexGrow={1}>
            <Input type="text" placeholder="Origin" ref={originRef} />
          </Box>
          <Box flexGrow={1}>
            <Input type="text" placeholder="Destination" ref={destinationRef} />
          </Box>
          <ButtonGroup>
            <Button colorScheme="pink" type="submit" onClick={calculateRoute}>
              Calculate Route
            </Button>
            <IconButton
              aria-label="center back"
              icon={<FaTimes />}
              onClick={clearRoute}
            />
          </ButtonGroup>
        </HStack>
        <HStack spacing={4} mt={4} justifyContent="space-between">
          <Text>Distance: {distance} </Text>
          <Text>Duration: {duration} </Text>
          <IconButton
            aria-label="center back"
            icon={<FaLocationArrow />}
            isRound
            onClick={() => {
              map.panTo(center);
              map.setZoom(15);
            }}
          />
        </HStack>
      </Box>
    </Flex>
  );
}

export default GoogleMapsIntegration;







[3:28 PM] Pothuguntha, Dharma
import {
    Box,
    Button,
    ButtonGroup,
    Flex,
    HStack,
    IconButton,
    Input,
    SkeletonText,
    Text,
  } from '@chakra-ui/react'
  import { FaLocationArrow, FaTimes } from 'react-icons/fa'
 
  import {
    useJsApiLoader,
    GoogleMap,
    Marker,
    Autocomplete,
    DirectionsRenderer,
    Polygon,
   
  } from '@react-google-maps/api'
  import 'google-polyline'
  import { useRef, useState } from 'react'
 
 
  const center = { lat: 16.412787634213785, lng: 80.56114883838613 }
  const center1 = { lat: 16.4117, lng:  80.5604 }
 
 
 
  function GoogleMapsIntegration() {
    const { isLoaded } = useJsApiLoader({
        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
        libraries: ['places'],
      })
    let places_along_the_route = []
   
    console.log(isLoaded)
 
    const [map, setMap] = useState(/** @type google.maps.Map */ (null))
    const [directionsResponse, setDirectionsResponse] = useState(null)
    const [distance, setDistance] = useState('')
    const [duration, setDuration] = useState('')
    const ployline=require('google-polyline')
 
    /** @type React.MutableRefObject<HTMLInputElement> */
 
    /** @type React.MutableRefObject<HTMLInputElement> */
 
 
    if (!isLoaded) {
      return <SkeletonText />
    }
 
    async function calculateRoute() {
      const positions=[
        { location:
           { lat: 16.412787634213785, lng: 80.56114883838613},
        stopover: true},
        { location:
          { lat: 16.41693947871025, lng: 80.56296368584907},
       stopover: true} ]
      // if (originRef.current.value === '' || destiantionRef.current.value === '') {
      //   return
      // }
      // eslint-disable-next-line no-undef
      const directionsService = new google.maps.DirectionsService()
      // console.log(originRef.current.value,"Testing Origin Value")
      // console.log(destiantionRef.current.value,"Testing Destintion Value")
       
      const results = await directionsService.route({
        origin: new window.google.maps.LatLng(14.4426, 79.9865),
        destination: new window.google.maps.LatLng(16.5062, 80.6480),
        // eslint-disable-next-line no-undef
        waypoints:positions,
 
        travelMode:window.google.maps.TravelMode.DRIVING,
      })
 
      setDirectionsResponse(results)
     
      console.log(ployline.decode(results.routes[0].overview_polyline,"testing overview ployline"))
      console.log(results)
      places_along_the_route=ployline.decode(results.routes[0].overview_polyline,"testing overview ployline")
      console.log(places_along_the_route)
      setDistance(results.routes[0].legs[0].distance.text)
      setDuration(results.routes[0].legs[0].duration.text)
    }
 
    function clearRoute() {
      setDirectionsResponse(null)
      setDistance('')
      setDuration('')
      originRef.current.value = ''
      destiantionRef.current.value = ''
    }
 
    return (
      <Flex
        position="relative"
        flexDirection="column"
        alignItems="center"
        h="100vh"
        w="100vw"
      >
        <Box position="absolute" left={0} top={0} h="100%" w="100%">
          {/* Google Map Box */}
          <GoogleMap
            center={center}
            zoom={15}
            mapContainerStyle={{ width: "100%", height: "100%" }}
            // options={{
            //   zoomControl: false,
            //   streetViewControl: false,
            //   mapTypeControl: false,
            //   fullscreenControl: false,
            // }}
            onLoad={(map) => setMap(map)}
          >
            {/* <Marker position={center} />
            <Marker position={center1} /> */}
            {/* <Marker position={center2} /> */}
            {/* { console.log(places_along_the_route)} */}
            {/* {places_along_the_route.map((places)=>{
 
              console.log(places);
              const positions={
                lat:places[0],
                lmg:places[1]
              };
              <Marker position={positions}/>
            })} */}
 
            {directionsResponse && (
              <DirectionsRenderer directions={directionsResponse} />
            )}
          </GoogleMap>
        </Box>
        <Box
          p={4}
          borderRadius="lg"
          m={4}
          bgColor="white"
          shadow="base"
          minW="container.md"
          zIndex="1"
        >
          <HStack spacing={2} justifyContent="space-between">
            {/* <Box flexGrow={1}>
              <Autocomplete>
                <Input type="text" placeholder="Origin" ref={originRef} />
              </Autocomplete>
            </Box> */}
            {/* <Box flexGrow={1}>
              <Autocomplete>
                <Input
                  type="text"
                  placeholder="Destination"
                  ref={destiantionRef}
                />
              </Autocomplete>
            </Box> */}
 
            <ButtonGroup>
              <Button colorScheme="pink" type="submit" onClick={calculateRoute}>
                Calculate Route
              </Button>
              {/* <IconButton
                aria-label="center back"
                icon={<FaTimes />}
                onClick={clearRoute}
              /> */}
            </ButtonGroup>
          </HStack>
          {/* <HStack spacing={4} mt={4} justifyContent="space-between">
            <Text>Distance: {distance} </Text>
            <Text>Duration: {duration} </Text>
            <IconButton
              aria-label="center back"
              icon={<FaLocationArrow />}
              isRound
              onClick={() => {
                map.panTo(center);
                map.setZoom(15);
              }}
            />
          </HStack> */}
        </Box>
      </Flex>
    );
  }
 
  export default GoogleMapsIntegration
 
[3:28 PM] Pothuguntha, Dharma
https://stackoverflow.com/questions/14229695/google-maps-api-throws-uncaught-referenceerror-google-is-not-defined-only-whe
