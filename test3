import React from "react";
import { PieChart, Pie, Tooltip, Legend, Cell } from "recharts";
import { makeStyles } from "@material-ui/core/styles";
import Paper from "@material-ui/core/Paper";
import ReactSpeedometer from "react-d3-speedometer";
import useTitle from "../../hooks/useTitle";
import PageTitle from "../../layouts/PageTitle";
import { FormatAlignJustify } from "@material-ui/icons";
import { useEffect, useState } from "react";
import axiosClient from "../../utils/AxiosInterceptor";
import { useSnackbar } from "../../components/Snackbar";

// const data=[
//     { name:'Yes',totalCounts:10},
//     { name:'No',totalCounts:5},
//     { name:'NA',totalCounts:3},
// ];

// const calculatePciScore=(data)=>{
//     const totalYes=data.find(item=>item. name==='Yes')?.totalCounts||0;
//     const totalNo=data.find(item=>item. name==='No')?.totalCounts||0;
//     // console.log("totalYes",totalYes)
//     const pci=totalYes/(totalYes+totalNo)*100;
//     return pci;
// }
// const pciValue=calculatePciScore(data);
const COLORS = ["#4caf50", "#ba68c8", "#FFBB28"];
const useStyles = makeStyles((theme) => ({
  paper: {
    padding: theme.spacing(2),
    textAlign: "center",
    color: theme.palette.text.black,
    width: "50%",
    // margin:'0 auto',
    margin: "5px",
    boxShadow: "0px 0px 10px rgba(0,0,0,0.1)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flexDirection: "column",
    marginTop: "25px",
  },
}));

const ChartAdmin = ({ selectedProjectId }) => {
  const { showSnackbar } = useSnackbar();
  const classes = useStyles();
  const title = "Dashboard";
  const [pciResponse, setPciResponse] = useState([]);
  const [data, setData] = useState([]);
  useTitle(title);
  //for getting projectId for the payload
  const retrievedData = localStorage.getItem("project");
  const parsedData = JSON.parse(retrievedData);
  const projectId = parsedData.map((item) => item.project.id);
  console.log("selectedProjectId", selectedProjectId);
  useEffect(() => {
    axiosClient
      .post(
        `${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/metrics`,
        {
          // "projectId":projectId[0]
          projectId: selectedProjectId || projectId[0],
        }
      )
      .then((response) => {
        // console.log("Chart Response::",response.data.result["PCI Score"]);
        if (response.data.statusCode === 200) {
          setPciResponse(
            response.data.result["PCI Score"].map((score) => {
              return {
                ...score,
                value: parseFloat(score.value),
              };
            })
          );
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        console.log(error);
        showSnackbar(
          error.response.data.message
            ? error.response.data.message
            : error.response.message,
          "error"
        );
      });
    axiosClient
      .post(`${process.env.REACT_APP_QMS_DASHBOARD_API_URL}/dashboard/counts`, {
        projectId: projectId[0],
      })
      .then((response) => {
        const mappedResponse = response.data.result.map((item) => ({
          name: item.responseValue,
          totalCounts: item.totalCounts,
        }));
        // console.log("Chart Response::",mappedResponse);
        if (response.data.statusCode === 200) {
          setData(mappedResponse);
        } else {
          showSnackbar(response.data?.message, "error");
        }
      })
      .catch((error) => {
        console.log(error);
        showSnackbar(
          error.response.data.message
            ? error.response.data.message
            : error.response.message,
          "error"
        );
      });
  }, []);
  // console.log("pciResponse::",pciResponse)
  const pciValue = pciResponse.map((item) => item.value);
  return (
    <div style={{ display: "flex" }}>
      {/* =========================Pie Chart========================== */}
      <Paper className={classes.paper}>
        <PageTitle name="Distribution of Response" />
        <PieChart width={400} height={300} style={{ marginTop: "-10px" }}>
          <Pie
            data={data}
            labelLine={false}
            label
            outerRadius={100}
            fill="#8884d8"
            dataKey="totalCounts"
          >
            {data.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={COLORS[index]}></Cell>
            ))}
          </Pie>
          <Tooltip />
          <Legend />
        </PieChart>
      </Paper>
      {/* ====================Gauge Graph============================= */}
      <Paper className={classes.paper}>
        <div style={{ marginTop: "-15px" }}>
          <PageTitle name="Process Compilance Index (PCI)" />
        </div>

        <div style={{ marginTop: "-25px" }}>
          <ReactSpeedometer
            value={pciValue}
            minValue={0}
            maxValue={100}
            needleColor="black"
            startColor="red"
            endColor="green"
            segments={3}
            customSegmentStops={[0, 50, 80, 100]}
            segmentColors={["red", "orange", "green"]}
            needleTransitionDuration={4000}
            height={200}
            width={300}
            paddingVertical={50}
          />
        </div>
      </Paper>
    </div>
  );
};

export default ChartAdmin;
