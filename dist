
import React, { Component } from "react";
import {
    Form,
    Button,
    Card,
    CardHeader,
    CardBody,
    CardTitle,
    CardText,
    CardFooter
} from "reactstrap";

import Step1 from "./Step1";
import Step2 from "./Step2";
import Step3 from "./Step3";
import Step4 from "./Step4";
import Step5 from "./Step5";
import YSRScheme from "./YsrSchemeMaster";
import styled from "styled-components";
import MultiStepProgressBar from "./MultiStepProgressBar";

class MasterForm extends Component {
    constructor(props) {
        super(props);

        // Set the intiial input values
        this.state = {
            currentStep: 1,
            
        };

        // Bind the submission to handleChange()
        this.handleChange = this.handleChange.bind(this);

        // Bind new functions for next and previous
        this._next = this._next.bind(this);
        this._prev = this._prev.bind(this);
    }

    // Use the submitted data to set the state
    handleChange(event) {
        const { name, value } = event.target;
        this.setState({
            [name]: value
        });
    }

    // Trigger an alert on form submission
    handleSubmit = event => {
        event.preventDefault();
      
        
    };

    // Test current step with ternary
    // _next and _previous functions will be called on button click
    _next() {
        let currentStep = this.state.currentStep;

        // If the current step is 4 or 5, then add one on "next" button click
        currentStep = currentStep >= 3 ? 4 : currentStep + 1;
        this.setState({
            currentStep: currentStep
        });
    }

    _prev() {
        let currentStep = this.state.currentStep;
        // If the current step is 2 or 3, then subtract one on "previous" button click
        currentStep = currentStep <= 1 ? 1 : currentStep - 1;
        this.setState({
            currentStep: currentStep
        });

    }

    // The "next" and "previous" button functions
    get previousButton() {
        let currentStep = this.state.currentStep;

        // If the current step is not 1, then render the "previous" button
        if (currentStep !== 1) {
            return (
                <Button color="secondary float-left" onClick={this._prev}>
                    Previous
                </Button>
            );
        }

        // ...else return nothing
        return null;
    }

    get nextButton() {
        let currentStep = this.state.currentStep;
        // If the current step is not 3, then render the "next" button
        if (currentStep < 4) {
            return (
                <Button 
                variant="contained"
                onClick={this._next}>
                    NEXT
                </Button>
            );
        }
        // ...else render nothing
        return null;
    }

    get submitButton() {
        let currentStep = this.state.currentStep;

        // If the current step is the last step, then render the "submit" button
        if (currentStep > 3) {
            return <Button color="primary float-right">Submit</Button>;
        }
        // ...else render nothing
        return null;
    }

    render() {
        return (
            <>
                <Form onSubmit={this.handleSubmit}>
                    <Card>
                        <YSRScheme />
                        <CardBody>
                            <CardTitle>
                                <MultiStepProgressBar currentStep={this.state.currentStep} />
                            </CardTitle>
                            <CardText />
                            <Step1
                                currentStep={this.state.currentStep}
                                handleChange={this.handleChange}

                            />
                            <Step2
                                currentStep={this.state.currentStep}
                                handleChange={this.handleChange}

                            />
                            <Step3
                                currentStep={this.state.currentStep}
                                handleChange={this.handleChange}

                            />
                            <Step4
                                currentStep={this.state.currentStep}
                                handleChange={this.handleChange} 
                                    
                                />
                            <Step5
                                currentStep={this.state.currentStep}
                                handleChange={this.handleChange} />
                        </CardBody>
                        <CardFooter>
                            {this.previousButton}
                            {this.nextButton}
                            {this.submitButton}
                        </CardFooter>
                    </Card>
                </Form>
            </>
        );
    }
}

export default MasterForm;
