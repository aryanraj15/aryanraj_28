import React, { Component } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  IconButton,
  TextField,
  MenuItem,
  Select,
  FormControl,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import DatePicker from '@mui/lab/DatePicker';

const QualificationOptions = ['Option 1', 'Option 2', 'Option 3'];
const InstituteOptions = ['Institute 1', 'Institute 2', 'Institute 3'];

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      rows: [
        {
          qualification: '',
          institute: '',
          board: '',
          admissionDate: null,
          completionDate: null,
          document: '',
        },
      ],
    };
  }

  addRow = () => {
    this.setState((prevState) => ({
      rows: [
        ...prevState.rows,
        {
          qualification: '',
          institute: '',
          board: '',
          admissionDate: null,
          completionDate: null,
          document: '',
        },
      ],
    }));
  };

  deleteRow = (index) => {
    const newRows = [...this.state.rows];
    newRows.splice(index, 1);
    this.setState({ rows: newRows });
  };

  handleChange = (index, field, value) => {
    const newRows = [...this.state.rows];
    newRows[index][field] = value;
    this.setState({ rows: newRows });
  };

  render() {
    const { rows } = this.state;

    return (
      <div>
        <Button variant="contained" color="primary" onClick={this.addRow}>
          Add
        </Button>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Qualification</TableCell>
                <TableCell>Institute</TableCell>
                <TableCell>Board</TableCell>
                <TableCell>Admission Date</TableCell>
                <TableCell>Completion Date</TableCell>
                <TableCell>Upload</TableCell>
                <TableCell>Delete</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <FormControl>
                      <Select
                        value={row.qualification}
                        onChange={(e) => this.handleChange(index, 'qualification', e.target.value)}
                      >
                        {QualificationOptions.map((option, i) => (
                          <MenuItem key={i} value={option}>
                            {option}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl>
                      <Select
                        value={row.institute}
                        onChange={(e) => this.handleChange(index, 'institute', e.target.value)}
                      >
                        {InstituteOptions.map((option, i) => (
                          <MenuItem key={i} value={option}>
                            {option}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <TextField
                      value={row.board}
                      onChange={(e) => this.handleChange(index, 'board', e.target.value)}
                    />
                  </TableCell>
                  <TableCell>
                    <DatePicker
                      value={row.admissionDate}
                      onChange={(date) => this.handleChange(index, 'admissionDate', date)}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  </TableCell>
                  <TableCell>
                    <DatePicker
                      value={row.completionDate}
                      onChange={(date) => this.handleChange(index, 'completionDate', date)}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  </TableCell>
                  <TableCell>
                    <input
                      type="file"
                      onChange={(e) => this.handleChange(index, 'document', e.target.value)}
                    />
                  </TableCell>
                  <TableCell>
                    <IconButton onClick={() => this.deleteRow(index)}>
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </div>
    );
  }
}

export default App;
